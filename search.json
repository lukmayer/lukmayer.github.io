[
  {
    "objectID": "research/index.html",
    "href": "research/index.html",
    "title": "Publications",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Journal\n      \n      \n        Authors\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Image\n      \n      \n        OSF\n      \n      \n        Paper\n      \n      \n        Header\n      \n      \n        Description\n      \n    \n  \n    \n      \n      \n    \n\n\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \"What large language models know and what people think they know (2025)\"\n                \n              \n              ▼\n            \n\n            \n              \n                \n                  Steyvers, M., Tejeda, H., Kumar, A., Belem, C., Karny, S., Hu, X., Mayer, L. W., & Smyth, P.\n                \n                \n                  Nature Machine Intelligence\n                \n              \n\n              \n                \n                  \n                    OSF\n                  \n                  \n                    Link\n                  \n                  \n                \n              \n            \n          \n        \n\n        \n          \n            \n              \n            \n          \n\n          \n            \n              \n                \n              \n              \n                In this paper, we show that there is misalignment in the confidence LLM's are perceived to have in their answers, and what their internal confidence values reflect. In essence, LLM's routinely appear more confident than they should, despite model weights accurately reflecting the uncertainty associated with the answer. We also show how prompting LLM's to include appropriate uncertainty language in the answer text diminishes this gap between perceived and actual confidence considerably.\n              \n            \n          \n        \n      \n    \n  \n    \n      \n        \n          \n            \n              \n                \n                  \"Learning with AI Assistance: A Path to Better Task Performance or Dependence? (2024)\"\n                \n              \n              ▼\n            \n\n            \n              \n                \n                  Karny, S., Mayer, L. W., Ayoub, J., Song, M., Su, H., Tian, D., Moradi-Pari, E., & Steyvers, M.\n                \n                \n                  Proceedings of the ACM Collective Intelligence Conference\n                \n              \n\n              \n                \n                  \n                  \n                    Link\n                  \n                  \n                \n              \n            \n          \n        \n\n        \n          \n            \n              \n            \n          \n\n          \n            \n              \n                \n              \n              \n                To answer this question, we developed a gamified task in which participants needed to intercept moving, point-valued targets before they escape. During the game, an AI assistant suggests optimal actions to take to maximize player score. We manipulated when people were given this assistance to see whether its presence harmed or boosted their learning during the task. Despite many media fears of skill degradation and/or hopes of AI-boosted learning, we find that in our task, AI assistance neither harms nor enhances learning. This finding highlights the possibility that there exist a subset of tasks in which AI assistance can be provided risk-free, which we hypothesize may include many tasks that do not require higher-level reasoning.\n              \n            \n          \n        \n      \n    \n  \n\n\n\n\nNo matching items\n\n\n\n\n\n More on Google Scholar\n\n More on Semantic Scholar\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“A Cognitive Framework for Strategic AI Communication”\n\n\n\n\n\nMayer, L. W., Steyvers, M. CogSci 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n“Waste not want not: Computational methods to maximise attendance in group research”\n\n\n\n\n\nMayer, L. W., Bocheva, D., Hinds, J., Brown, O., Piwek, L., Ellis, D. (under Review) Behavior Research Methods.\n\n\n\n\n\nDo your studies rely on groups of people? Recruiting participants for group sessions can be arduous, often costing a lot of time, effort, and resources. In this work, we demonstrate the complete lack of tools that can appropriately allocate a sample of interested participants to a set of group sessions. We then mathematically derive metrics that can quantify the effectiveness of any tool attempting to solve this problem. Finally, we develop an algorithm that outperforms any existing utility on this task using simulation and a large-scale pre-registered user study. Our scheduling utility is free and open-source, available to anyone through a web-applet.\n\nLink to the web-app\n\n\n\n\n\n\n\n\n\n\n“Human-AI Collaboration: Trade-offs Between Performance and Preferences”\n\n\n\n\n\nMayer, L. W., Karny, S., Ayoub, J., Song, M., Tian, D., Moradi-Pari, E., Steyvers, M. (under Review) Cognitive Research: Principles and Implications\n\n\n\n\n\nHow can we make AI collaborate well with people? Narrowly optimizing the performance of AI agents may be convenient, but can cause frustration when people are then asked to work with this agent. In this paper, we show that people prefer AI agents that are considerate of their preferences, even when this comes at the cost of performance. We also find that certain human-centric design choices boost people’s liking of the agent, without harming the performance of the human-AI team. Our results strongly suggest that leveraging both subjective and objective metrics is crucial when designing AI agents for human collaboration.\n\nOSF repository\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComputational Cognitive Science\n\n\n\n\n\nPeople possess a remarkable cognitive flexibility enabling us to solve problems in various domains that are still completely intractable to modern methods in Artificial Intelligence. Therefore, I think that by studying human behavior we may be able to reverse-engineer some of the machinery that gives rise to these amazing abilities, uncovering the structure that may pave the way for new kinds of algorithms.\nAt the moment, I am working on a project series aiming to develop a computational account of causal reasoning for intervention on other agents. In these projects I will be using a considerable amount of simulation, computational modelling, and a series of custom-designed web experiments to develop reasoning models that exhibit human-like abilities to flexibly generalize to new contexts. My goal here is to show how this causal account can outperform sophisticated Reinforcement Learning models in dynamic environments, which includes most of the real world.\n\n\n\n\n\n\n\n\n\n\n\nInversion and Alignment problems in Cognitive Science & AI\n\n\n\n\n\nWhenever people are interacting with machine-learning based systems, human biases can propagate through the model leading to distorted predictions. Therefore, one strand of work I am interested in pursuing in this area is to derive the transformations that lead to better alignment, thus increasing the validity of predictions. I am also interested in addressing more engineering related concerns, such as how to use information we possess about cognition to improve the performance of machine learning algorithms trained on human-generated information. In this type of work, I like to mix and match methods from Cognitive Science and Machine Learning in combination with large, real-world data-sets.\nMy recent work in this area can be broadly described with the umbrella term of “Human-AI collaboration”. AI technologies are increasingly being integrated into various tools, but they oftentimes lack the ability to anticipate the needs of the human user. Using formal models of human cognition as part of these systems can help bridge this gap by describing mental processes people have in a language that AI systems can understand (math). This can lead to more efficient and effective collaboration between humans and AI systems, and can also help to identify potential pitfalls in the design of these systems."
  },
  {
    "objectID": "research/index.html#published",
    "href": "research/index.html#published",
    "title": "Publications",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Journal\n      \n      \n        Authors\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Image\n      \n      \n        OSF\n      \n      \n        Paper\n      \n      \n        Header\n      \n      \n        Description\n      \n    \n  \n    \n      \n      \n    \n\n\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \"What large language models know and what people think they know (2025)\"\n                \n              \n              ▼\n            \n\n            \n              \n                \n                  Steyvers, M., Tejeda, H., Kumar, A., Belem, C., Karny, S., Hu, X., Mayer, L. W., & Smyth, P.\n                \n                \n                  Nature Machine Intelligence\n                \n              \n\n              \n                \n                  \n                    OSF\n                  \n                  \n                    Link\n                  \n                  \n                \n              \n            \n          \n        \n\n        \n          \n            \n              \n            \n          \n\n          \n            \n              \n                \n              \n              \n                In this paper, we show that there is misalignment in the confidence LLM's are perceived to have in their answers, and what their internal confidence values reflect. In essence, LLM's routinely appear more confident than they should, despite model weights accurately reflecting the uncertainty associated with the answer. We also show how prompting LLM's to include appropriate uncertainty language in the answer text diminishes this gap between perceived and actual confidence considerably.\n              \n            \n          \n        \n      \n    \n  \n    \n      \n        \n          \n            \n              \n                \n                  \"Learning with AI Assistance: A Path to Better Task Performance or Dependence? (2024)\"\n                \n              \n              ▼\n            \n\n            \n              \n                \n                  Karny, S., Mayer, L. W., Ayoub, J., Song, M., Su, H., Tian, D., Moradi-Pari, E., & Steyvers, M.\n                \n                \n                  Proceedings of the ACM Collective Intelligence Conference\n                \n              \n\n              \n                \n                  \n                  \n                    Link\n                  \n                  \n                \n              \n            \n          \n        \n\n        \n          \n            \n              \n            \n          \n\n          \n            \n              \n                \n              \n              \n                To answer this question, we developed a gamified task in which participants needed to intercept moving, point-valued targets before they escape. During the game, an AI assistant suggests optimal actions to take to maximize player score. We manipulated when people were given this assistance to see whether its presence harmed or boosted their learning during the task. Despite many media fears of skill degradation and/or hopes of AI-boosted learning, we find that in our task, AI assistance neither harms nor enhances learning. This finding highlights the possibility that there exist a subset of tasks in which AI assistance can be provided risk-free, which we hypothesize may include many tasks that do not require higher-level reasoning.\n              \n            \n          \n        \n      \n    \n  \n\n\n\n\nNo matching items\n\n\n\n\n\n More on Google Scholar\n\n More on Semantic Scholar"
  },
  {
    "objectID": "research/index.html#in-progress",
    "href": "research/index.html#in-progress",
    "title": "Publications",
    "section": "",
    "text": "“Waste not want not: Computational methods to maximise attendance in group research”\n\n\n\n\n\nMayer, L. W., Bocheva, D., Hinds, J., Brown, O., Piwek, L., Ellis, D. (under Review) Behavior Research Methods.\n\n\n\n\n\nDo your studies rely on groups of people? Recruiting participants for group sessions can be arduous, often costing a lot of time, effort, and resources. In this work, we demonstrate the complete lack of tools that can appropriately allocate a sample of interested participants to a set of group sessions. We then mathematically derive metrics that can quantify the effectiveness of any tool attempting to solve this problem. Finally, we develop an algorithm that outperforms any existing utility on this task using simulation and a large-scale pre-registered user study. Our scheduling utility is free and open-source, available to anyone through a web-applet.\n\nLink to the web-app\n\n\n\n\n\n\n\n\n\n\n“Human-AI Collaboration: Trade-offs Between Performance and Preferences”\n\n\n\n\n\nMayer, L. W., Karny, S., Ayoub, J., Song, M., Tian, D., Moradi-Pari, E., Steyvers, M. (under Review) Cognitive Research: Principles and Implications\n\n\n\n\n\nHow can we make AI collaborate well with people? Narrowly optimizing the performance of AI agents may be convenient, but can cause frustration when people are then asked to work with this agent. In this paper, we show that people prefer AI agents that are considerate of their preferences, even when this comes at the cost of performance. We also find that certain human-centric design choices boost people’s liking of the agent, without harming the performance of the human-AI team. Our results strongly suggest that leveraging both subjective and objective metrics is crucial when designing AI agents for human collaboration.\n\nOSF repository"
  },
  {
    "objectID": "presentations/s210_midterm3.html#matrix-form",
    "href": "presentations/s210_midterm3.html#matrix-form",
    "title": "Multiple Linear Regression",
    "section": "Matrix form",
    "text": "Matrix form\n\nIn matrix notation we write:\n\n\\[\\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n \\end{bmatrix} = \\begin{bmatrix} 1 & x_{11} & x_{12} & \\ldots & x_{1k} \\\\ 1 & x_{21} & x_{22} & \\ldots & x_{2k} \\\\ \\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\ 1 & x_{n1} & x_{n2} & \\ldots & x_{nk} \\end{bmatrix} \\cdot \\begin{bmatrix} \\beta_0 \\\\ \\beta_1 \\\\ \\vdots \\\\ \\beta_k \\end{bmatrix} + \\begin{bmatrix} \\epsilon_1 \\\\ \\epsilon_2 \\\\ \\vdots \\\\ \\epsilon_n \\end{bmatrix}\\]\n\nOr in short (with dimension): \\(\\mathbf{y}_{n \\times 1} = \\mathbf{X}_{n \\times (k+1)}\\mathbf{\\beta}_{(k+1) \\times 1} + \\mathbf{\\epsilon}_{n \\times 1}\\)\nalternatively, just: \\(\\mathbf{y} = \\mathbf{X}\\mathbf{\\beta} + \\mathbf{\\epsilon}\\)"
  },
  {
    "objectID": "presentations/s210_midterm3.html#some-properties",
    "href": "presentations/s210_midterm3.html#some-properties",
    "title": "Multiple Linear Regression",
    "section": "Some properties",
    "text": "Some properties\n\n\\(E(\\mathbf{\\epsilon}) = \\mathbf{0}\\)\n\\(Var(\\mathbf{\\epsilon}) = \\sigma^2\\mathbf{I}\\)\nUnder standard and strict assumptions the random vector \\(\\mathbf{y}\\) has expectation \\(E(\\mathbf{y}) = \\mathbf{X}\\mathbf{\\beta}\\) and variance \\(Var(\\mathbf{y}) = \\sigma^2\\mathbf{I}\\)"
  },
  {
    "objectID": "presentations/s210_midterm3.html#quick-review-of-matrix-algebra-cont.",
    "href": "presentations/s210_midterm3.html#quick-review-of-matrix-algebra-cont.",
    "title": "Multiple Linear Regression",
    "section": "Quick review of matrix algebra (cont.)",
    "text": "Quick review of matrix algebra (cont.)\n\nLet \\(\\mathbf{A}\\) be a \\(k \\times k\\) matrix\n\n\\(\\mathbf{A}\\) is symmetric if \\(\\mathbf{A} = \\mathbf{A}^T\\)\n\n\\(\\mathbf{A}\\) is idempotent if \\(\\mathbf{A}^2 = \\mathbf{A}\\)\n\\(\\mathbf{A}\\) is orthonormal if \\(\\mathbf{A}^T\\mathbf{A} = \\mathbf{I}\\)\n\nLet \\(\\mathbf{y}\\) be a \\(k \\times 1\\) vector. The expression: \\[\\mathbf{y}^T\\mathbf{A}\\mathbf{y} = \\sum_{i=1}^k\\sum_{j=1}^k \\mathbf{y}_i \\cdot \\mathbf{A[ij]} \\cdot \\mathbf{y}_j\\] is called a quadratic form. In this case, \\(\\mathbf{A}\\) is the matrix of the quadratic form."
  },
  {
    "objectID": "presentations/s210_midterm3.html#matrix-derivatives-cont.",
    "href": "presentations/s210_midterm3.html#matrix-derivatives-cont.",
    "title": "Multiple Linear Regression",
    "section": "Matrix derivatives (cont.)",
    "text": "Matrix derivatives (cont.)\nLet \\(\\mathbf{A}\\) be a \\(k \\times k\\) matrix, \\(\\mathbf{a}\\) be a \\(k \\times 1\\) vector, and \\(\\mathbf{y}\\) be a \\(k \\times 1\\) vector of variables.\n\nif z = \\(\\mathbf{y}^T\\mathbf{A}\\mathbf{y}\\), then \\(\\frac{\\partial z}{\\partial \\mathbf{y}} = \\mathbf{Ay} + \\mathbf{A}^T\\mathbf{y}\\)\nif z = \\(\\mathbf{y}^T\\mathbf{A}\\mathbf{y}\\) with \\(\\mathbf{A}\\) symmetric, then \\(\\frac{\\partial z}{\\partial \\mathbf{y}} = 2\\mathbf{Ay}\\)"
  },
  {
    "objectID": "presentations/s210_midterm3.html#estimating-sigma2",
    "href": "presentations/s210_midterm3.html#estimating-sigma2",
    "title": "Multiple Linear Regression",
    "section": "Estimating \\(\\sigma^2\\)",
    "text": "Estimating \\(\\sigma^2\\)\n\n\\(MSE = \\frac{SSE}{n-k-1}\\)\n\\(SSE = (\\mathbf{y} - \\mathbf{X}\\mathbf{\\hat{\\beta}})^T(\\mathbf{y} - \\mathbf{X}\\mathbf{\\hat{\\beta}})\\)"
  },
  {
    "objectID": "presentations/s210_midterm3.html#fitted-values-and-residuals",
    "href": "presentations/s210_midterm3.html#fitted-values-and-residuals",
    "title": "Multiple Linear Regression",
    "section": "Fitted values and residuals",
    "text": "Fitted values and residuals\n\n\\(\\hat{\\mathbf{y}} = \\mathbf{X}\\mathbf{\\hat{\\beta}}\\)\n\\(\\hat{\\mathbf{e}} = \\mathbf{y} - \\mathbf{X}\\mathbf{\\hat{\\beta}}\\)"
  },
  {
    "objectID": "presentations/s210_midterm3.html#hat-matrix",
    "href": "presentations/s210_midterm3.html#hat-matrix",
    "title": "Multiple Linear Regression",
    "section": "Hat matrix",
    "text": "Hat matrix\nWith the hat matrix \\(\\mathbf{H} = \\mathbf{X}(\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\) we have:\n\n\\(\\hat{\\mathbf{y}} = \\mathbf{Hy}\\)\n\nSimilarly, the residuals can be expressed as:\n\n\\(\\mathbf{e} = (\\mathbf{I} - \\mathbf{H})\\mathbf{y}\\)"
  },
  {
    "objectID": "presentations/s210_midterm3.html#confidence-intervals-of-beta_j",
    "href": "presentations/s210_midterm3.html#confidence-intervals-of-beta_j",
    "title": "Multiple Linear Regression",
    "section": "Confidence intervals of \\(\\beta_j\\)",
    "text": "Confidence intervals of \\(\\beta_j\\)\n\nThe distribution of \\(\\hat{\\beta}_j\\) are: \\[\\frac{\\hat{\\beta}_j - \\beta_j}{\\sqrt{\\widehat{Var(\\hat{\\beta}_j})}} \\sim t_{n-k-1}\\]\nThus the \\(100\\cdot(1-\\alpha)\\%\\) confidence interval for \\(\\beta_j\\) is: \\[\\hat{\\beta}_j \\pm t_{n-k-1, 1-\\alpha/2}\\cdot\\sqrt{\\widehat{Var(\\hat{\\beta}_j)}}\\]"
  },
  {
    "objectID": "presentations/s210_midterm3.html#general-f-test",
    "href": "presentations/s210_midterm3.html#general-f-test",
    "title": "Multiple Linear Regression",
    "section": "General F-test",
    "text": "General F-test\nFor comparing two nested models \\(M_{full}\\) and \\(M_{reduced}\\) we can use the F-test:\n\\[F = \\frac{(SSE_{reduced} - SSE_{full})/(df_{E}(full) - df_{E}(reduced))}{SSE_{full}/df_{full}}\\]\n\\[F = \\frac{(SSR_{full} - SSR_{reduced})/(df_{R}(full) - df_{R}(reduced))}{SSE_{full}/df_{full}}\\]\nThe two formulas are equivalent."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "lukmayer.github.io",
    "section": "",
    "text": "I’m currently a PhD Student in Cognitive Science at the University of California, Irvine, working in Mark Steyvers’ lab.\nIn my research, I leverage insights from Cognitive Science to enhance human-AI collaboration. I’m especially interested in applications involving model-based reinforcement learning and Bayesian computational models."
  },
  {
    "objectID": "index.html#lukas-william-mayer",
    "href": "index.html#lukas-william-mayer",
    "title": "lukmayer.github.io",
    "section": "",
    "text": "I’m currently a PhD Student in Cognitive Science at the University of California, Irvine, working in Mark Steyvers’ lab.\nIn my research, I leverage insights from Cognitive Science to enhance human-AI collaboration. I’m especially interested in applications involving model-based reinforcement learning and Bayesian computational models."
  },
  {
    "objectID": "cv/cv_content.html",
    "href": "cv/cv_content.html",
    "title": "Education",
    "section": "",
    "text": "Education\n Bayesian modelling of inversion problems in human-AI interaction (preliminary title)\nProfessor Mark Steyvers\nComputational modelling of human problem-solving abilities and alignment of AI systems with human cognition\n Cognition-Inspired Heuristics Improve Machine-Learning Predictions in Multi-Attribute Multi-Alternative Choice\nProfessor Nick Chater\n: Behavioral and Data Science (equivalent to )\nUnifying models from computational cognitive science and machine learning\n Cooperation does not improve selective and/or sustained attention\nDr. John Michael and Dr. Ross Goutcher\nfor the Best Single Honours Psychology Student (equivalent to )\nfor the Best Psychology Dissertation\nMeasuring cognitive abilities in online games\n\n\nResearch Experience\nConducted large-scale mixed methods study concerned with the prediction of online group communications which translate into real-world actions\nDeveloped own project investigating algorithms for complex research appointment scheduling\nPrincipal Investigator: Professor Adam Joinson\nExecution and data analysis of experiments concerning face matching and concealed identity recognition\nPrincipal Investigator: Dr. Ailsa E. Millen\nAutomated video analysis for discrimination learning in lumpfish\nPrincipal Investigator: Dr. Jamie Murray\n\n\nPublications\nSteyvers, M., Tejeda, H., Kumar, A., Belem, C., Karny, S., Hu, X., Mayer, L. W., & Smyth, P. (2025). What large language models know and what people think they know. Nature Machine Intelligence. https://doi.org/10.1038/s42256-024-00976-7\nKarny, S., Mayer, L. W., Ayoub, J., Song, M., Su, H., Tian, D., Moradi-Pari, E., & Steyvers, M. (2024). Learning with AI Assistance: A Path to Better Task Performance or Dependence? Proceedings of the ACM Collective Intelligence Conference, 10–17. https://doi.org/10.1145/3643562.3672610\nMayer, L. W., Bocheva, D., Hinds, J., Brown, O., Piwek, L., Ellis, D. (under Review) Waste not want not: Computational methods to maximise attendance in group research. Behavior Research Methods.\n\n\nMiscellaneous"
  },
  {
    "objectID": "blog/posts/vsc_rstudio.html",
    "href": "blog/posts/vsc_rstudio.html",
    "title": "How to make VS Code look like Rstudio/Spyder",
    "section": "",
    "text": "All in one: editor, variable manager, plotting pane, terminal - beautiful!\n\n\n\n\nToday a super quick tip on how to achieve a grid-like layout in Visual Studio Code similar to more dedicated Data-Science IDE’s like Rstudio and Spyder. See image above (click for zoom).\nI had been working with a 3-Column layout for the longest time: Activity Bar, Workbench, Panel. However, having the panel take up the entirety of one of these columns felt a bit wasteful given that: 1) I don’t use the terminal that much, 2) The layout looks weird when your working directory has a long path, 3) My plots are annoyingly in a separate workbench tab.\nSo how to limit the panel to one corner of the screen?\nLong story short, that’s not currently possible.\nHowever, what we can do, is make terminals be a workbench tab by default, and then tile the tabs to our liking (e.g. via drag-and-drop).\nStep 1 is to press CTRL + SHIFT + P and then open Preferences: Open User Settings (JSON).\nThen, add the following to this .json`:\n\"terminal.integrated.defaultLocation\": \"editor\"\nNow terminals will be workbench tabs, so all you need to do is drag them to your preferred location. Same with the plots tab that you probably already have. Behold the beauty!\nBy the way, if you work with .ipynb files, you’ll find that the Panel has a “Jupyter” view, which will feature a variable manager (currently Python only). You can drag-and-drop this view to live on the Activity Bar if you prefer.\n\n\nFor information on how to set up R or Rmarkdown for VS Code, see this post."
  },
  {
    "objectID": "blog/posts/vivaldi3.html",
    "href": "blog/posts/vivaldi3.html",
    "title": "Making Vivaldi even better",
    "section": "",
    "text": "As reported in my last Vivaldi post, there are some things that I find a bit annoying about Vivaldi. With a lot of software, this is where you would be stuck with the annoyances until someone bothers to fix them, but Vivaldi is a bit different. Vivaldi, like Firefox, supports modifications, meaning you can inject your own CSS and JavaScript into the browser to change its behavior. This is very powerful as it allows you to change almost anything about the front-end of the browser. While the modding community for Vivaldi is fairly small compared to that of Firefox (smaller user base), there are still some very useful mods on the forums that can be used to fix some of the annoyances I have with Vivaldi.\nIn my case, I had two main things I was looking to fix with mods:\n\nI wanted the vertical tab bar to expand on hover, like it does in Brave or MS Edge. This is because dragging tabs around in a minimized vertical tab bar requires quite a bit more precision than in a nice and wide one.\nI want to hide the panel bar. I don’t use many panels, so to me, it was super annoying that the panel bar would show itself whenever I did use one. As reported in my other posts, this drove me to the point where I was trying to completely avoid using panels so that I would not have to deal with this anymore.\n\nSo how to go about it? Basically you just start browsing the forums for code that sounds interesting, then paste that code into a CSS file in a folder you point Vivaldi to. The full instructions on how to do this can be found here.\nI’m afraid I did not keep track of the source posts for the mods I used, but I can provide the code I use for the mods I mentioned above.\n\n\n\nExpanding vertical tab bar on hover\n#tabs-tabbar-container:is(.left, .right) {\n    position: fixed; \n    height: -webkit-fill-available !important;\n    box-shadow: #0008 0 0 2px, rgb(0 0 0 / 25%) 0px 3px 6px;\n    clip-path:inset(0 -50px 0 -50px);\n    transition: .15s ease-out .1s !important;\n}\n\n#tabs-tabbar-container.left {\n    left:0;\n    z-index:1;\n}\n\n#panels-container.left ~ div &gt; #tabs-tabbar-container.left {\n    left: unset;\n}\n\n#tabs-tabbar-container.right {\n    right:0;\n}\n\n#panels-container.right ~ #tabs-tabbar-container.right {\n    right:35px;\n}\n\n#tabs-tabbar-container.left:not(:focus-within):not(:hover) {\n    will-change: clip-path;\n    clip-path:inset(0% calc(100% - 30px) 0% 0%);\n    transition: .15s ease-out .5s !important;\n}\n\n#tabs-tabbar-container.right:not(:focus-within):not(:hover) {\n    will-change: transform;\n    transform: translateX(calc(100% - 30px));\n    transition: .15s ease-out .5s !important;\n}\n\n#tabs-tabbar-container:is(.left, .right):not(:focus-within):not(:hover) &gt; div.overflow .tab-strip {\n    animation: ofh 0s .5s forwards !important;\n}\n\n@keyframes ofh {to {overflow-y: hidden;}}\n\n/* newtab position */\n#tabs-tabbar-container:is(.left, .right) .newtab {\n    left: 0 !important;\n    width: 100%; transition: width .1s .1s !important;\n}\n\n#tabs-tabbar-container:is(.left, .right):not(:focus-within):not(:hover) .newtab {\n    width: 30px;\n    transition: width 0s .5s !important;\n}\n\n/* reserved inner space for minimized tabbar by only push webview-container inward */\n#browser:not(.fullscreen).tabs-left #webview-container {\n    margin-left:30px;\n}\n\n#browser:not(.fullscreen).tabs-right #webview-container {\n    margin-right:30px;\n}\n\n/* Option 1: minimize into parent column */\n#tabs-tabbar-container:is(.left, .right):not(:focus-within):not(:hover) {\n    flex-direction: row;\n}\n\n/* Option 2: minimize into child column */\n/* #tabs-tabbar-container:is(.left, .right):not(:focus-within):not(:hover) {flex-direction: row-reverse;} */\n\n/* canceled left tabbar's parent's DIV width */\n#main &gt; .inner &gt; div:has(#tabs-tabbar-container.left) {\n    max-width: 0px;\n}\n\n/* make space for static statusbar at bottom */\n#browser:has(footer &gt; .toolbar-statusbar) #tabs-tabbar-container {\n    margin-bottom: 24px;\n}\nNow I can’t vouch for the future viability of this code, so if it stops working in the future, you definitely want to be checking the forums for updated code.\n\n\n\n\nHiding the panel bar\n/* hide panel bar */\n#panels #switch {\n    display: none;\n}\n\n#panels-container.icons {\n    display: none;\n}\n\n.panel-group .panel-collapse-guard {\n    max-width: unset !important;\n    min-width: unset !important;\n}\n\n.panel-group .panel {\n    padding: 5px 5px 0 !important;\n}\nThis one is so simple, your grandma could have written it! I’m so glad I can finally use panels again without having to manually hide UI elements every time I open one. Hurray!\n\n\nSo there you have it, two mods that make Vivaldi just that extra bit nicer for me. I think it’s really cool that Vivaldi allows this, since it does not only empower their users, but can also serve as inspiration for the developers to implement some of these features in the browser itself. But then again, most of the things the company does are very well-thought-out. I’m looking forward to seeing what they come up with next!"
  },
  {
    "objectID": "blog/posts/vivaldi1.html",
    "href": "blog/posts/vivaldi1.html",
    "title": "Why Vivaldi is the least and most minimal browser at the same time",
    "section": "",
    "text": "I’ve noticed that with software there sometimes exists a bit of an ironic relationship where the product with the most features somehow is also able to be the most minimal. Emacs is one such example, as it’s a text editor that can be configured to perform tasks you’d never think a text editor would be able to - and it does this with almost no UI whatsoever. It’s fair to say I’m a big fan of reducing visual clutter on my devices. For example, my laptop runs Linux with no Desktop environment, and my phone home screen is basically just a calendar widget. Neither device is minimal in the sense of having little functionality, but both are definitely minimal in the sense of keeping the interface to a minimum.\nToday I want to talk about another piece of software that I use that can be said to enable this form of minimalism. It is of course the Norwegian-made browser Vivaldi. Vivaldi is the brain-child of Jon von Tzetchner, former CEO of Opera, and is essentially aiming to be the go-to browser for power-users. In my opinion it is doing quite well in catering to this audience, as the browser is known for its massive array of features and extensive customizability.\nSome stand-out features of Vivaldi include:\n\nMade by a trustworthy company with no interest in tracking users (although not FOSS)\nA highly customizable UI\nA built-in E-mail, calendar, to-do list and RSS feed reader client\nPage Tiling - basically showing more than one tab in the same window, for example side by side\nWeb Panels - essentially a set of bookmarked pages that can be viewed without switching the tab\nWork spaces, which allow you to have tabs in separate windows within the same window.\nTranslator, Contact list, Reading list, Note-taking client, and sooo much more.\n\nWho on earth needs all of that? Well, the beauty of it all is that Vivaldi does not force you to use any of these, you can turn all of these things off if you wish. You’re not even locked in once you chose to use one of these features, as Vivaldi allows you to export your data - you are in full control. For example, I was using the built-in note-taking client for a while, but then opted for something else. Switching was no problem, because Vivaldi lets you export all your notes to Markdown.\nNow because Vivaldi is such a beast, it can seem a little intimidating when you fire it up for the first time. So today I want to highlight the specific features of Vivaldi that allow you to go from this:\n\n\n\n\nBy default, the Vivaldi browser has a lot of UI\n\n\n\nTo this:\n\n\n\n\nMy minimal configuration of Vivaldi that does not compromise on functionality\n\n\n\nYou’re probably looking at my screenshot and thinking “How do you do … anything?”. The short answer is - Keyboard shortcuts. Vivaldi allows you to map whatever button combination you want to what must be hundreds of different commands. Closing a tab Ctrl + W, going to the previous page Alt + LeftArrow, opening E-Mail Ctrl + Shift + M, etc. That alone has allowed me to remove most of the UI.\nHowever, there are some exceptions to what can be removed. One example is the address field, which has to be in the address bar to work properly. You could hide the address bar in which case pressing Ctrl + L would actually pop out a little field to type in, but hiding the address bar is a little annoying if you use any of the UI in the Mail client, since it no longer will be accessible. Sure, you could bind a key to toggle the address bar for when you need it. However, I find that more cumbersome than just living with the address bar. This is because if you hide the address bar (with tabs not on top), Vivaldi will replace it with a minimal window title bar, which renders the net space savings of hiding the address bar minimal.\nNext, you might have thought that I don’t have tabs. This is not quite correct, as I have a very small vertical tab bar at the right edge of the window. It’s set to the minimum width such that you can only see the favicons of websites, not their titles. I tried going completely without a tab bar, but found the lack of visual feedback a bit jarring.\nYou might think that seeing the website titles is quite important, since it might be hard to tell apart two tabs that are on the same domain otherwise. Luckily, you can enable list view for the tab switcher, meaning if I hit Ctrl + Tab I can cycle through the tabs in a little pop up that shows the tab titles. This is such an underrated feature as it makes switching tabs with your keyboard super efficient.\nThe only things left as UI are for essential functions that do not have an internal page that can be mapped to a keyboard shortcut but do provide a button for a pop-out menu. This includes the extensions, reading list and downloads popups. On the far left is the burger menu to access settings, which cannot be removed. I also hide Speed Dials and everything else on the start page. That’s it!\nUI clutter, Check; Tab clutter, Check. What’s left? Well, as I alluded to in the introductory paragraph I don’t really wish to compromise on functionality. Unfortunately, if you use web panels, Vivaldi currently requires you to have the panel bar showing, even if the panel buttons are not on the panel bar! If you don’t show the panel bar, the sites you have as panels will unload, meaning you will have to load them from scratch every time you want to use them. You could insert your own CSS modifications (which Vivaldi allows), but I have personally not gotten my CSS code to reliably hide/show the panel bar on hover. This annoyance led me to realize that I can achieve virtually the same functionality without actually using panels.\nHow, you ask? My work-around has been a mix of tab tiling and workspaces with pinned tabs. It’s not quite as flexible as actual panels, but it fully satisfies my needs. If I need to quickly view a site that would be panel-worthy, I just hit my keybinding to switch workspaces until I get to the one with the page I’m looking for. If I need to split view that page for multitasking, I simply tile the tab inside that workspace.\nIn some ways this approach off weaning yourself off of panels (especially the built-in ones) is actually superior, because the panel implementations of many features of Vivaldi are less feature-rich than their internal page equivalent. Compare for example the calendar panel to the calendar page, and you’ll see what I mean. That being said, how nice is it that Vivaldi gives you both, a panel implementation of something, and an internal page or pop-out version?\nAnd that’s basically the essence of my setup! If you are not (yet) a Vivaldi user, this was probably too much information for you… hopefully I managed to get you curious about Vivaldi though. If you are a Vivaldi user, I hope you found my approach inspiring for your own configuration! If you liked the theme I use, I actually published it here, enjoy :)\nP.S.: Legend has it you’ll never be able to look at a MacBook with MS Word open in Google Chrome the same way once you have seen the light…"
  },
  {
    "objectID": "blog/posts/usa.html",
    "href": "blog/posts/usa.html",
    "title": "Bread in the USA",
    "section": "",
    "text": "I don’t mean to complain too much about what my life is like in the USA.\n\nThe weather here in California is always monotonously pleasant\nAmericans are super friendly, welcoming, and helpful\nMy university is excellent\n\nMy workplace is unionized\nMy rent is heavily subsidized, housing is guaranteed\nMy department is full of excellent researchers\nEven my grad student health insurance is good, in 2 years I have never spent more than $80 on a procedure\n\nThe point is, things are good. I’d even say they are great. I am very happy and grateful for the life I have here.\nBut, as a German, there is one thing that I can’t seem to get over. And that is American’s taste in baked goods, especially bread.\nThis was already a problem when I lived in the UK, so maybe Anglo-Saxon countries are just hard-wired to be problematic to me in this regard.\nIn the UK, while bread may have been a bit soulless here and there, it was always possible to find something that I felt was edible, even at the supermarket.\nOver here, the choice seems to be between a) full of sugars and additives, or b) completely void of everything, including taste. I even tried going to a farmer’s market to see what the fancy people are eating. But even there, the breads looked less interesting than some of the stuff I was able to dig out of UK supermarkets.\nGermans in the UK really like to complain about the bread in the UK. To be honest, the gap between UK and US is much larger than the gap between UK and Germany.\nIs there a fancy artisan bakery somewhere in Orange County that might be able to help me out? Probably. I feel like driving for 20+ minutes in one of the largest Metro regions of the USA shouldn’t be necessary for a nice household staple but maybe that’s just me. In practice, I am stuck with what I can reach by foot, bike, bus, or can get delivered.\nSo in conclusion, I have been pondering just taking the hit and baking bread myself. So perhaps this complaining post is my cry for help. I don’t think I’m desperate enough quite yet, but if you see me posting about sourdough starters in a few weeks, you’ll know I’ll have finally snapped."
  },
  {
    "objectID": "blog/posts/sticky_tech.html",
    "href": "blog/posts/sticky_tech.html",
    "title": "Is it even possible to avoid big-tech?",
    "section": "",
    "text": "Have you ever had a thought that goes something like “Do I really need &lt;something&gt;”? I definitely have. Over the years, I have done some silly multi-week experiments to assess things like: what would it be like to sleep without a pillow, live without a mirror, work without a chair. Why? Just to challenge my habits, I think.\nCurrently, I guess I have two experiments going on: growing my hair out fairly long, and doing without “big-tech”. Obviously, the latter one is what this post is about.\nThe motivation for this experiment goes something like: Why does everyone use the same software? If you think about it, for PC operating systems you get a choice of macOS (Apple), Windows (Microsoft); for phones you get iOS (Apple), and Android (Google); for apps, it’s either Apple’s App Store, or the Google Play Store; for browsers you only really get Chrome (Google) with Google as the search engine. Most normal people either use Google Drive or OneDrive (Microsoft). Productivity apps either come in the form of Microsoft 365 or Google’s App suite. For E-mail everyone has a Gmail account and most will also have an Outlook (Microsoft). Messaging is done on either iMessage (Apple), WhatsApp (Meta), Messenger (Meta, again). Social media is mostly stuff owned by Meta, with LinkedIn owned by Microsoft. There’s probably more one could add to the list… The point is, is it really necessary to operate in a tech ecosystem where every niche seems to be some kind of de facto mono/duo/oligopoly1 involving a random choice from the same four (-ish) companies?\n1 I write “de facto” because determining the monopoly status of these companies is evidently quite difficult under current competition law.I didn’t know I was going to embark on this experiment at the time, but technically my journey started by wondering if Chrome was really serving me all that well. I remember finding Google products frustrating because they never really offered any settings to tweak. Of particular annoyance to me at the time was that many Google products lacked a dark mode setting. Sometimes the settings page of these apps felt more like an empty placeholder accidentally left in rather than the polished product of some billion-dollar company. Why was Google assuming that all of their billions of users used their products exactly the same way? I wasn’t that committed to using Chrome, so I shopped around. My initial browser switch was to Opera, which was pretty customizable compared to Chrome then (still is).\nMicrosoft products were typically much more customizable than Google’s offerings, so for a while I considered myself a Microsoft fan. Besides Windows, I was using Outlook, OneNote, Word, Excel, PowerPoint, OneDrive, even their dedicated To-Do app and Android Launcher. That only really started to change when Windows 11 rolled out, where seemingly all options had been stripped away, with annoyances now impossible to turn off. It drove me nuts, so I decided to try Ubuntu. Linux definitely is something one needs to get used to because it can uproot so much of an average person’s software stack. However, once I adjusted I never felt it worth going back. Thankfully, most things are web-based nowadays, so as long as you have a browser a normal person can be just fine.\nThese days, I really only have a few things left that have proven very sticky. For some things, my hands are simply tied. For example, my university compels me to use Gmail and Microsoft Teams for my work. If it wasn’t for that my only use of Google products would be Google Voice because I have a VoIP number that I don’t want to pay monthly for, and the Google Play Store because commercial apps are not put anywhere else. As a partial remedy, I generally use F-droid wherever I can or just use services on Desktop (where there usually is much more choice) instead of my phone. Social media is also surprisingly sticky; I still don’t find myself able to delete WhatsApp because it’s so ubiquitous in Europe and I also technically still have a LinkedIn account2.\n2 I think I have a vague sense of it potentially being helpful for a future job search. Although I can’t say I have ever found a job through LinkedIn.There is also stuff that I could do without but have not touched yet. I use Google Scholar and GitHub (Microsoft) pretty regularly, this very website is currently hosted on GitHub. My research data goes to a Google Firebase database. I think I am just a bit ignorant about alternatives when it comes to these. Give me a few more weeks, and perhaps I’ll have switched these too or at least have a good reason for why not.\nSo is it still possible to go without big-tech? You can avoid large parts of the big-tech ecosystem, but only with some notable caveats, so the short answer is no. For one, it took me the better part of 3 years to slowly transition away as much as I could, bit by bit. I think switching E-mails nicely paints the problem. You are free to choose any E-mail service you like, but if you have a Gmail you can use it to log in to all kinds of services, and as you start using this Gmail to register for various things, it becomes more and more effortful to move all of those things to a different, non-Gmail account. In other words, it takes a serious, prolonged effort to abstain from big-tech services. And even if you have the will, chances are someone else will still compel you to use some big-tech provisioned services. It was only a few months ago where an academic journal obliged me to use Premium Adobe Acrobat Reader to fill out a form that was so bare-bones it could just as well have been a simple text file. I should also mention that some of the stuff I ended up using is still heavily dependent on big tech. For example, most browsers are built on the Chromium open source project, managed by Google3.\n3 Similarly, Android alternatives are typically made from Google’s Android Open Source Project.Is abstaining even worth it? In some ways, maybe yes. I pay fewer subscriptions than I used to. I don’t have to buy “premium” products that lock me into an ecosystem and I don’t have to deal with ads or other “features” being shoved down my throat. In other ways, for many people, not really. For example, Linux undeniably has some jankiness that makes it hard(er) to use in many everyday settings than other operating systems. I don’t see myself going back though because I value the freedom to set it up to whatever I like highly and don’t mind occasional use of the terminal.\nI wonder what these things will be like in 10–20 years? Will it be yet more of the same with additional domains monopolized, will big companies maybe have been split up in a way that is actually productive for sustained competition, or will some kind of massive libre software revolution suddenly materialize out of thin air? On the one hand, I get the sense that software is more vulnerable to de facto monopolies compared to industries that operate in the material world4, so I do think this phenomenon of specific niches being utterly dominated by one or two big companies is unlikely to go away completely. On the other hand, it does also feel like more and more people are holding views according to which some types of software should be considered public goods and managed as such. It will definitely be interesting to see which path we end up going down.\n\n\n4 Because of increased potential to benefit from virality, popularity- and network effects."
  },
  {
    "objectID": "blog/posts/stats2.html",
    "href": "blog/posts/stats2.html",
    "title": "Math-Stats: Simple Linear Regression",
    "section": "",
    "text": "Hello world!\n\n\nSo I’m currently revising for a stats exam. Since I like reorganizing notes I’ve taken to see how all the things I’ve been learning fit together, I’ve created a presentation on simple linear regression. It was the perfect excuse to try out the revealjs presentation format in Quarto. I have to say, it was trickier than expected to embed the presentation inside a page. I was trying to study the source code of quarto.org, but I couldn’t replicate the method they use to embed their presentations. But after some tinkering, I finally found a way to embed the presentation. I’ve been planning to make an “advanced quarto” tutorial at some point soon when I’m less swamped. It will probably include my workflow for customizing my website, some notes on triple ‘:’ syntax and how to embed things and the like. So if you’re interested in that, stay tuned.\nWith that out the way, here are two bare-bones presentations on the mathematics of simple linear regression. Proofs omitted because typing it all in Latex takes too long! I have to say though, I’m pretty impressed with the convenience and feature set of these revealjs presentations. For technical content, it seems easier to make than a standard Powerpoint presentation."
  },
  {
    "objectID": "blog/posts/socials.html",
    "href": "blog/posts/socials.html",
    "title": "Have we reached maximum click-bait yet?",
    "section": "",
    "text": "I’ve never been much into social media. There was a period where I used Instagram to follow my friends and artists I liked. Facebook I only used very briefly as an undergrad. Technically, I still have a LinkedIn account that receives no attention from me. However, even back in my social media days I noticed the tendency of these platforms to show you stuff that will grab your attention whether you like it or not.\nSince then, I’ve been exploring Fediverse platforms like Mastodon and Lemmy. But all platforms I have tried have this same problem of incentivizing what I would call rage- or clickbait1. The problem I have with these phenomena is that they are cheap, ubiquitous signals that serve to manipulate. An attention-grabbing essay title that does not follow the clickbait format is really different in this regard, as an interesting title at least has some correlation to the quality of the writing.\n1 I use these terms fairly liberally to basically encapsulate anything that is tailor-made to be attention-grabbing, like using very strong wording or misleading images.2 Academia has a similar problem, since how many papers you publish is far more important for your career than how “good” those papers are. The quality metric, citations, is deeply flawed too. At least university departments put in a bit of effort to look at your papers before inviting you to interview, assuming of course you made it to the stage where they check.Essentially, I don’t think popularity metrics are very useful for distinguishing between quality (where engagement comes through resonance with the audience) and rage-bait (where engagement comes from tricking people into boosting the metrics). I have a feeling that platforms which serve to make content creation as easy as possible will never be able to solve this, as accessibility necessarily induces more low-quality content. In other words, short-form text, photos, and video clip producers will always be incentivized to clickbait2.\nI should say though, Mastodon can be made sane. It is up to you though. This is because Mastodon allows you to hide posts that contain keywords of your choosing. So you can maintain a list of keywords you classify as ragebait-like in nature and so only see the stuff that’s left after that. Of course, that requires some effort, continuous vigilance, and being ok with never seeing the false positives. If you want to use Mastodon, I would generally recommend being pretty liberal in your use of filter words.\nHow to stop gaming of metrics? Simple, have no metrics. The problem of course is that no-one would find a “Trending” tab that really is just a “Random” tab very worthwhile. “Popular” content is used to on-board new users and popularity is also used to make decisions about what to recommend. Ironically, a social media platform that does away with inadvertently incentivizing garbage by default would never be accessible enough to have main-stream appeal.\nIs any of this unique to social media? Of course not. We could easily think of news outlets increasingly following a similar recipe. These trends towards maximum clickbait make me a bit worried about where democracies are headed, especially now with AI making influence campaigns nigh fully automatable. Until we have found a good way to address these problems, it’s probably best you make sure you control what stuff is on your feed, and help your friends do the same."
  },
  {
    "objectID": "blog/posts/search.html",
    "href": "blog/posts/search.html",
    "title": "A review of search engines",
    "section": "",
    "text": "Hello and welcome to yet another technology-fuelled rant from yours truly!\nToday’s topic is search engines, those little websites all browsers use that allow you to find other websites, given a query by the user (that’s you!). Search engines, and doing internet research in general has become synonymous with Google, with it now being common to suggest to other people to “google” something. In this post, I wish to give you a breakdown for why this might not be so good, what can be done, and what the drawbacks are. Let’s get into it."
  },
  {
    "objectID": "blog/posts/search.html#why-ditch-the-default",
    "href": "blog/posts/search.html#why-ditch-the-default",
    "title": "A review of search engines",
    "section": "Why ditch the default?",
    "text": "Why ditch the default?\nEvery modern browser has a search engine that it uses by default. All popular browsers happen to use either Google or Bing, the only exception being the Brave browser (if achieving 1% market share is sufficient to be “popular”). This is of course because Google and Microsoft pay top dollar to convince browser makers to set their search engine as the default on the browser in question. Interestingly, this may be about to change, as a recent court ruling seems to have found this practice to be monopolistic behavior. However, should this ruling actually stop Google from paying billions of dollars to browser companies, you better get ready to wave bye-bye to Firefox, since the Mozilla foundation gets the majority of their money from these deals… We will see what happens.\nEither way, I hope it’s obvious why being the default matters - people generally don’t switch. This phenomenon of human behavior clearly is bad for fostering competition, and there are lots of ideas out there on how best to address this without banning things just for being popular. Of course, a large corporation trying to maximize profits is expected, so why bother switching for reasons other than wanting to be a hipster? Here are some arguments you might consider:\n\nSearch Engine Optimization exists, meaning bigger search engines might be getting worse every year. Search Engine Optimization is the practice of tailoring a website to please the ranking algorithm of the engine you are targeting, such that your website will rank more highly for more key-words than your less optimized rivals. This means business gurus are constantly tinkering with the popular search engines, trying to reverse-engineer the design principles of the algorithm and thus game the system. This is partly why, when you search for information about a product, you always get the same set of generic product review websites, which all say the same generic things. It’s a constant cat-and-mouse game with big search engines, since everyone wants to optimize for them. When the big companies try to intervene against having their engines gamed, it inadvertently promotes something else, until the gurus catch up. This may explain why if you search for a recipe you often see content that accidentally does well with these ultra-engineered algorithms such as those 20 page long cooking blog-posts in which some lady rambles on about her life before giving you that pancake recipe you wanted. If instead you are a smaller search provider, no-one cares about you, so your index will inadvertently surface much more “natural” content for queries.\nYou do not wish to support business practices that emphasize advertisers rather than users. Many big-tech companies make a lot of their money from appealing to advertisers. To be able to charge a premium, they help advertisers target the audiences of their desire. Of course, to target a specific group, you need to know the makeup and identities of the group’s members. This set of incentives practically invites questionable levels of data collection about users, with significant potential for misuse. Thankfully, many governments around the world seem to have started thinking about this problem, but there’s still a long and rocky path ahead of us. You might not want to support these practices, which would be a great reason to look for another service with a different business model.\nOne or two companies controlling what information can and can’t be found is reason for concern. This is a purely theoretical argument to draw your attention to the potential problems an over-concentrated market could promote. If a company with 90% market share on access to information decides that something does not exist, perhaps because its existence goes against the company’s profit-maximizing business interests, would a meaningful number of people ever find out? I hope you will agree that in the best case this level of market dominance is questionable, and in the worst case reminiscent of a George Orwell novel. Again, I don’t really think that these companies have bad intentions, but the point is that we should not have to rely on their good-will. Your ability to choose as a thoughtful human-being can help avert the possibility of bad outcomes, so why not exercise that sweet, sweet free-will?\nYou want to find out about the features that the big providers don’t have. This is the most fun or the least cynical reason I’ll talk about. Basically, each search engine has a different design philosophy. Google clearly values performance and a minimal aesthetic, while Microsoft seems to not shy away from giving users lots of options and additional information. The smaller players also have interesting features that I’ll talk about later on in more detail, but often revolve around privacy, new technologies, and new ways for exploration. Who knows, maybe one of them has something you never realized you needed in your life?"
  },
  {
    "objectID": "blog/posts/search.html#the-alternatives-come-in-a-few-flavors",
    "href": "blog/posts/search.html#the-alternatives-come-in-a-few-flavors",
    "title": "A review of search engines",
    "section": "The alternatives come in a few flavors",
    "text": "The alternatives come in a few flavors\nSo what’s out there? The smaller players in the search engine space generally don’t track their users and can be broadly categorized as follows:\n\n1) The Front-ends\nThese search engines are probably the most common and can be summarized as giving you the results of one of the big players, typically minus the user tracking. They don’t usually give you the exact same results as the big providers, as they vary in the degree to which they use and mix the rankings provided by their big-tech counterparts, but they are generally pretty similar. DuckDuckGo, Startpage and Qwant all fall in this category. DuckDuckGo and Qwant are more closely related to Bing, while Startpage leans more heavily on Google. So if you already use Google or Bing, switching to one of these should provide a very similar user experience for basic search, minus the tracking and plus whatever unique features that search engine has. I’ll talk more about what makes each unique later. Yahoo! and Ecosia are also in this category, but I don’t consider them in any depth here, as Yahoo! is heavily reliant on Bing and Ecosia is more of a charity than a unique search engine.\n\n\n2) The Meta searchers\nThe next category is that of metasearch engines, which as the name may have suggested, compile the results of multiple independent search engines for you. Basically, they will ask each from a set of engines to provide results to your query, and then combine these rankings, with respect to the relevancy scores associated with the results. This is very similar to 1) with the difference that the engines I ascribe to this category clearly display where each result hails from. This is unlike 1) where the result sources are not easily determined by the user. The main player here seems to be SearXNG, which is free software anyone can host themselves, with private people sharing access to their servers by listing them publicly on searx.space. Technically there is also MetaGer, but it really seems to act more as a Yahoo! front-end, which itself seems to be a Bing front-end, so I don’t consider it a serious contender in this category.\n\n\n3) The Independents\nSearch engines in this category have the most work cut out for themselves by creating their own index without the help of existing players. In case you didn’t know, search engines are technically a type of AI that is constantly trying to re-rank web pages so that the page listed first is the one you are most likely to click on, given your query. Naturally, that means that independent search engines have a lot of catching up work to do since they do not use the many years of user-generated feedback that the goliaths have. Brave Search is by far the most popular one in this category, followed by Mojeek. There is also Yep, but it’s currently very bare-bones, so I don’t consider it further in this post.\n\n\n4) The Weird ones\nWith the recent boom of Large-Language-Models (LLMs), there have been a lot of companies trying to give internet search a new spin. These generally emphasize an AI generated summary of the results pages, with the actual results listing being more in the background. While this certainly is useful for quick, low-stakes questions, I don’t find them very useful for doing serious research. Perplexity AI is the most well-known one, but the original player in this space is probably You.com. It should be noted that Perplexity does track users, so is not the most privacy-conscious choice. Because this category of search tools is so different, they are harder to compare, so I will omit them from the following sections. Another search engine that could be considered and is fairly well-known is Yandex. In my opinion, it might not be the most trustworthy choice for unbiased information, though be it a bias different from the one the big tech companies are ascribed to have."
  },
  {
    "objectID": "blog/posts/search.html#a-very-flawed-empirical-comparison",
    "href": "blog/posts/search.html#a-very-flawed-empirical-comparison",
    "title": "A review of search engines",
    "section": "A very flawed empirical comparison",
    "text": "A very flawed empirical comparison\nIn this section, I want to give you a small, empirical comparison of my own experience when using each of these engines. I will consider Google, Bing, DuckDuckGo, Startpage, Qwant, SearXNG, Brave, and Mojeek. For a set of categories, I will come up with one common query and one niche query where I have clear expectations about what the results page should show me. I only consider traditional search, so no images/video searches. The categories are: people, places, finance, news, science.\nI will evaluate the first 5 results on the page, and then score the results for accuracy, (lack of) redundancy, and the provision of other helpful information (complementarity). Sufficient performance will grant one point for each rating, while insufficient performance will give no points, meaning any of my ten test queries can yield up to three points.\nThis will not be a blind test, so take the results with a grain of salt. Additionally, my criteria may oversimplify differences dramatically. Again, it’s just meant to give you an impression. If we wanted a truly scientific comparison, it would take something in the style of lmsys but for search engines.\nSo here are my results: First place is Bing with 28/30 narrowly beating second-place Google (27/30) as it provided better context for the finance queries I tested. I was expecting the big players to be close, but did not expect Bing to beat Google in my metrics, as my previous impression had been that it is less accurate.\nTo my surprise, DuckDuckGo was on par with Google, also achieving 27/30, thanks to still being pretty consistent at providing helpful context. On third place are Startpage and Qwant, both achieving 23/30. Both suffered from my complementarity category, as it was rarer for them to provide helpful widgets.\nOn fourth place is Brave search with 22/30, by far the best search engine that is completely independent, but also struggling to provide helpful context for many queries. However, Brave search was the most impressive out of all the engines when it came to news stories, with very helpful widgets to compare narratives.\nOn fifth place is Mojeek with 15/30, which did not always provide accurate results and struggled to provide context. While this appears as poor performance, I have to say that the results Mojeek provided were noticeably more original than all the other engines, which I had not expected.\nLastly is SearXNG with only 9/30 points, thanks to flaky accuracy, big problems with redundancy and no helpful context. This was the only engine that managed to score 0/3 for one of my test searches. I was very surprised to see a metasearch engine flop this hard, as it seems like a great idea on paper.\nIn sum, if you take my results at face value, then Bing is the best for depth, DuckDuckGo is the best privacy alternative to Google/Bing, Brave is the best for independent results and news, Mojeek is the best for exploration, and SearXNG may better be avoided if you care about finding useful information."
  },
  {
    "objectID": "blog/posts/search.html#cool-new-toys",
    "href": "blog/posts/search.html#cool-new-toys",
    "title": "A review of search engines",
    "section": "Cool new toys",
    "text": "Cool new toys\nNow I want to briefly introduce you to some of my favorite features with these smaller search engines. This is not a comprehensive list of unique features, as I don’t like all of them, so please do explore the functionality each tool provides yourself.\n\nBangs are commands in the form of e.g., !site query that allow you to push a query to another page’s search engine. Here’s an example: Let’s say you want to read the Wikipedia page of Abraham Lincoln, you would first go to Wikipedia’s site and then type in “Abraham Lincoln” in their search field. With bangs you can instead just do !w abraham lincoln and get taken to the result directly. There are thousands of pages that can be indexed like this, and once you get used to it, it’s hard to go without. Want to look for a YouTube video? !yt. Can’t find what you’re looking for? !start. This feature makes smaller players much more viable, because you can easily query another search engine whenever it under-performs. DuckDuckGo and Brave search both have this feature.\nCustom Indexes are a feature unique to Brave search and Mojeek. They allow any user to re-weight the search engine’s index according to their preferences and make it accessible to other users. This means you can make a “goggle” (“focus” for Mojeek) that essentially turns that instance into a search engine for academic articles, or one that helps you uncover niche blogs about animal husbandry - your creativity is the limit. While I love this feature in theory, seemingly neither Brave nor Mojeek have invested all that much into polishing this into something most people would be able to use. However, if refined, this would constitute the most powerful tool for internet exploration ever made.\nDuckDuckGo currently is the only smaller search engine that also gives you access to a range of language models for free. I don’t mean those AI-generated page summaries but a separate space for you to chat with these models. The functionality is a bit limited in this dedicated space, and the models available are obviously not the state-of-the-art ones. However, if DuckDuckGo keeps improving this feature, it might eventually become a real game-changer!\nBoth Startpage and DuckDuckGo provide you with methods to anonymously view content. The approach Startpage takes is more general, with you being able to view any page inside a proxy. This means it becomes harder to track you, as the website is talking to the proxy, not directly to you. DuckDuckGo, on the other hand, lets you view YouTube videos on their video results page, allowing you to watch them without YouTube being able to associate them to your Google account. Personally, I think these are pretty niche features, but maybe you’ll like them?"
  },
  {
    "objectID": "blog/posts/search.html#some-hard-truths",
    "href": "blog/posts/search.html#some-hard-truths",
    "title": "A review of search engines",
    "section": "Some hard truths",
    "text": "Some hard truths\nAlthough I generally find these smaller engines quite exciting, it’s not all rosy:\n\nWhile normal search is pretty passable on most small search engines, things can start to noticeably under-perform once you branch out from that. All non-independent search engines I tried seemed to heavily rely on Bing for images, meaning there is still a long way to go if this is an important feature to you. That being said, DuckDuckGo’s implementation stands out as being the only one actually good enough to satisfy most users. The independent search engines are really not the best at finding images, both in terms of quantity and quality.\nMaps is still dominated by the big providers, especially since Qwant dropped out of the race. DuckDuckGo uses Apple Maps as their default maps provider, while Startpage actually lets you choose between Google Maps and Bing maps for your mapping needs. The others do not currently provide maps. Qwant used to have their own independent mapping service, which I actually felt had the potential to eventually compete with Google Maps, but unfortunately they recently abandoned this feature. My hope is that Brave will eventually make a maps service, as they seem to be the most dynamic company I discussed here in terms of feature expansion."
  },
  {
    "objectID": "blog/posts/search.html#the-moral-of-the-story",
    "href": "blog/posts/search.html#the-moral-of-the-story",
    "title": "A review of search engines",
    "section": "The moral of the story",
    "text": "The moral of the story\nIn sum, the main advantage of the big players seems to be maintaining consistency for fringe searches more than anything, but as we’ve seen, privacy-focused alternatives like DuckDuckGo are already playing serious catch-up to the giants.\nI personally use Brave search as my default, as it gives me a nice mix of original results and unique features, while using DuckDuckGo as a back-up for those really obscure queries. Using back-ups is extremely easy thanks to Bangs. In fact, Brave search even embeds buttons to perform the same search on other engines on their own results page whenever it’s not so confident it found what you wanted (Mojeek also has this).\nSo in essence, I choose to use the search engine that I find most interesting and interoperable, rather than the one that is strictly the most accurate. Maybe you should give this approach to internet exploration a shot too? In either case, I hope you found this informative, and that I managed to arouse your curiosity about the world of alternative tools that’s out there. Thanks for reading! :)"
  },
  {
    "objectID": "blog/posts/reveal_multiplex.html",
    "href": "blog/posts/reveal_multiplex.html",
    "title": "How to remote control a Quarto presentation",
    "section": "",
    "text": "The Quarto documentation for RevealJS presentations has a little section on how to set up Multiplex. The way it works is that RevealJS automatically creates a server hosted by the RevealJS team that syncs the slide change events (they do not see the slide content). The stated premise for this feature is that other people can view your slides on their devices, with the slideshow advancing in sync with the speaker.\nTo be honest, I did not see why anyone would want that. Surely your audience would be better off being able to go back and forth through the slides at their own pace?\nBut then, a few days ago, a little lightbulb went off in my head. I basically realized that this feature could be used to remote control a presentation. What’s that good for? Well, suppose you are at a conference or something, and the “Oh god do I have the right adaptor for this unknown computer?!?” fear strikes you again. Using multiplex, you could just access your slides by browsing to your website with the unknown computer, and use your phone or another device to control the slides. Assuming internet connectivity, no compatibility issues, guaranteed. Also, everyone will recognize you for being very cool, indeed."
  },
  {
    "objectID": "blog/posts/reveal_multiplex.html#demo",
    "href": "blog/posts/reveal_multiplex.html#demo",
    "title": "How to remote control a Quarto presentation",
    "section": "Demo",
    "text": "Demo\nCurious? Here’s an example slide deck:\n\n\nIf you click here on your phone or any other device, you will be able to control above slides.\nThere is one downside to this, which is that the chalkboard plugin does not sync over multiplex. So you could draw on your slides, but noone else would see it (unless you do the drawing on that unknown computer)."
  },
  {
    "objectID": "blog/posts/reveal_multiplex.html#how-to-set-it-up",
    "href": "blog/posts/reveal_multiplex.html#how-to-set-it-up",
    "title": "How to remote control a Quarto presentation",
    "section": "How to set it up",
    "text": "How to set it up\n\nCreate a revealjs presentation with a YAML header that includes:\n\nformat: \n  revealjs:\n    multiplex: true\n\nRender the presentation with quarto render &lt;your_presentation&gt;.qmd. You will now have a file called &lt;your_presentation&gt;-speaker.html in your source directory.\nOpen your presentation on the computer that everyone will see.\nOpen the &lt;your_presentation&gt;-speaker.html file on your phone or another device.\n\nFor making the last two steps easy, here’s what I did for the example above:\n&lt;iframe\n src=\"../../../presentations/multiplex.html\" width=\"800\" height=\"600\" frameborder=\"0\" allowfullscreen&gt;\n&lt;/iframe&gt;\nand then simply linking to the speaker view on the same page:\n[here](../../../presentations/multiplex-speaker.html)\n\n\nPro-tip: ../ is used to navigate up a directory, since you need to navigate from the site where you want to show the presentation to where the presentation actually lives.\n\nHope this is helpful! Feel free to check out my source files if you’re still confused."
  },
  {
    "objectID": "blog/posts/quarto_template.html",
    "href": "blog/posts/quarto_template.html",
    "title": "My website template for you!",
    "section": "",
    "text": "Today, I will show you a new and improved guide for creating a website like this with Quarto!\nIf you didn’t know, Quarto is a powerful open-source tool for creating websites, documents, and presentations. It’s a great way to share your work with the world. What’s nice is that you can combine code, math, and text - similar to a Jupyter notebook. Unlike Jupyter, everything in Quarto is written in plain text, which makes it easy to use in any IDE. Creating a website with Quarto is easy, fun, and requires very little knowledge of web development. It’s amazing for people who have basic coding knowledge but don’t want to dive more heavily into web-development than strictly necessary.\nThis guide will show you how to set up a simple website with Quarto using my template."
  },
  {
    "objectID": "blog/posts/quarto_template.html#set-up",
    "href": "blog/posts/quarto_template.html#set-up",
    "title": "My website template for you!",
    "section": "Set up",
    "text": "Set up\n\nFirst, you need to install Quarto. You can find the installation instructions here.\nThe next step depends on the IDE you are using. If you use Rstudio, you can skip this step. If you use another IDE like VSCode, you need to install the Quarto extension. You can find the installation instructions here.\nGitHub: You need to create a new repository on GitHub. You can find the instructions here. This is also where we will host our website.\nDownload my template"
  },
  {
    "objectID": "blog/posts/quarto_template.html#about-the-template",
    "href": "blog/posts/quarto_template.html#about-the-template",
    "title": "My website template for you!",
    "section": "About the template",
    "text": "About the template\nFirst, if you want to see what the template looks like by default, you can check out a hosted version here.\nThe template is a heavily stripped down version of my current website design. I tried to strip it down as much as possible for teaching purposes while also showing off some of the best features of Quarto. Additionally, I included a lot of comments in all the source files to help teach you what everything does.\nBy default, the template features:\n\nAn attractive homepage layout in which you can slot in your own images, links and text\nA CV section to show off your work experience\nA blog section where you can write posts\nAn about section where you can share more personal information\n\nMaybe more importantly, through the template I can teach you how to:\n\nSet a theme\nAdd icons, including your own logo\nAdd images, math, code, text formatting, references, tables and more\nMake use of tab-sets, call-outs, and buttons\nEmbed files like PDFs and presentations\nCreate blogs or other collections of posts and RSS feeds\nHow to customize your website further with CSS\nWhere to find more information"
  },
  {
    "objectID": "blog/posts/quarto_template.html#editing-the-website",
    "href": "blog/posts/quarto_template.html#editing-the-website",
    "title": "My website template for you!",
    "section": "Editing the website",
    "text": "Editing the website\nI would recommend you look over the source files in the following order:\n\n_quarto.yml to learn about how to configure the global settings of the website\nabout/index.qmd to learn about the basic features of Quarto\ncheck out cv/index.qmd to learn about how to use tab-sets and embed a PDF\nblog/index.qmd to learn about how to create listed collections of posts\nread through the posts in the blog/posts folder to learn about advanced features and workflows.\n\nNow you can change the file content to your liking. The main files you will be editing are the _quarto.yml, any .qmd files, and the styles.css file if you’re feeling adventurous. The general workflow is to make edits, and then “render” the website to see the changes. Essentially, Quarto has to translate all that markdown into HTML, and it will only do so when you tell it to. In Rstudio, there is a UI button for this. It’s simply a blue arrow reading “Render” that is visible when on a .qmd file. In VSCode, you can use the command Quarto: Render to render the website. You can search for this command by pressing Ctrl+Shift+P and typing Quarto: Render. Either way, rendering the website will create a preview of the site, which your browser should open automatically. This is local to you, meaning other people cannot see the website yet. All the files that have been translated to HTML are stored in the _site folder. With this procedure of editing, rendering, and previewing you can simply keep tinkering on your website until you are happy with it and want to make it public."
  },
  {
    "objectID": "blog/posts/quarto_template.html#hosting-the-website",
    "href": "blog/posts/quarto_template.html#hosting-the-website",
    "title": "My website template for you!",
    "section": "Hosting the website",
    "text": "Hosting the website\nFor other people to see your shiny new website it needs to be hosted on a server. The easiest way to do this for free is to use GitHub Pages. You simply head to GitHub, login, and create a repository with the name yourgithubusername.github.io. Then, you upload all the files in the _site folder to the repository. The easiest way to upload is to simply drag and drop all the files in that folder after clicking the upload files button on GitHub. Finally, go to the settings of the repository and scroll down to the GitHub Pages section. Here you can select the branch you want to host from and the folder. Don’t worry too much about what a branch is for now - it will most likely be called main or master and the folder you want will be almost certainly be called root or /. After a view minutes, your website should be live at www.yourgithubusername.github.io!"
  },
  {
    "objectID": "blog/posts/post1.html",
    "href": "blog/posts/post1.html",
    "title": "My first DIY web-app",
    "section": "",
    "text": "Hello world!\nA few weeks ago I made a little web-app to highlight some algorithms we developed for a methodological paper. The paper is concerned with how to best slot people into group appointments. The idea came up while I was employed at the University of Bath, because the project I was hired for required us to recruit participants for longitudinal group experiments that partially took place offline, partially online. The problem was of course how do you figure out the initial real life appointments in which you can start organizing interested participants into their groups?\nAs it turns out, this is a surprisingly tricky problem. Intuitively, you might think that allowing people to indicate their preferences over a set of proposed appointments, in the style of DoodlePoll, and then inviting people to the most popular selection would be a grand idea. However, since we did not really have the capacity to organize a potentially huge group of people at once, we needed some way of breaking up our pool of interested participants into manageable chunks that we could on-board onto the study in a staggered fashion. Once you start thinking about organizing this way, you can come to realize that inviting to the most popular selected appointment can be suboptimal, as a combination of two or more appointments allows you to group more people for the study. This is because anyone who could not make that most popular appointment is essentially discarded, which may not be the case if you can identify two appointments that have little overlap in terms of who is available for each. So the question then becomes, what is the best set of appointments that will yield the most groups, given a pool of interested participants and our recruitment procedure constraints? This is the problem we set out to address in our paper.\nThe specific problem may be intractable to solve optimally, so our starting point was to develop a few heuristic algorithms and see how they compared. Of course, you also need some way of telling how well these algorithms are doing, so we spent quite some time trying to come up with a useful metric. We started trying to work out what would be considered an optimal outcome. Obviously you want to recruit as many people as possible, and you don’t want to be having any appointments that have too few attendees to form a group with or too many attendees for the room we are holding these on-boarding sessions in. From here, you might consider the number of appointments, are you looking to minimize them or maximize how many appointments are in the solution set? You might be tempted to say that you want to minimize the number of appointments, but this is not necessarily the case. Researchers are often concerned with reaching certain sample sizes, in line with the size of effects they are hoping to detect. Therefore, it might actually be better to have as many small groups as possible, rather than a few large groups. More groups equals more statistical power. On the flip side, you may actually indeed want to minimize the set of appointments, for example if the appointments are expensive to run.\nAs it turns out, these problems are defined narrowly enough where you can just work backwards to derive a metric for each case and prove that the metrics are optimal at detecting how close an algorithm’s solution is to the theoretical optimum, that is, the optimal outcome under the best case. I caveat it with “theoretical” because it is quite hard (again, potentially impossible) to tell what the true best possible solution is, without trying every single combination of people and appointments. Either way, this was a great starting point as we now had a pretty well-defined metric to measure our algorithms against.\nWe were quite surprised to find that one of the initial heuristics we developed already beat the algorithm equivalent to “Invite people that have not attended a session yet to the most popular appointment among them” in our simulations. This is where I actually start talking about that web-app this post is supposed to be about. The point of the web-app was to highlight this very finding, by allowing people to compare the performance of the popularity based algorithm to our heuristic. The web-app allows you to choose your own simulation situation, apply the two algorithms, and see the results. In addition, we intended this to also be used by others for their own purposes, so it is possible to apply the algorithms to your own CSV files if you can format them correctly.\nOriginally, I was planning to implement the web-app as a shiny applet in R, with which I had been experimenting for a few weeks by that point. However, I really didn’t like the usage limits of shinyapps.io and was not about to implement my own server, so I turned to JavaScript to enable the computations inside people’s browsers. This meant translating the original algorithms from Python to JavaScript, and then implementing a simple front-end to allow users to interact with the app.\nAs it turns out the first part was pretty easy, because the algorithms are dead simple. The actual app front-end was a bit more challenging as I was a total newbie to JavaScript, but I managed to get it all working in one intense weekend, thanks to the kind support of OpenAI. While I’m pretty pleased with the result, I’m sure I would have learned a lot more if I had done the much harder work of learning to implement it from scratch, rather than with AI assistance. On the other hand, I value efficiency (I’m lazy) and I’ll have plenty of time and reason to learn JavaScript properly in the coming years, since my planned experiments will be much less cookie-cutter than this applet. I’m looking forward to it!\nIf you’re interested in checking out the app, you can find it here. If you’re interested in the paper, let’s hope I’ll remember to update this post once it’s out in the wild. See you then!"
  },
  {
    "objectID": "blog/posts/minimal.html",
    "href": "blog/posts/minimal.html",
    "title": "Phone less, without being phoneless",
    "section": "",
    "text": "Modern smartphones are incredible feats of engineering. We have moved from using several devices for specific purposes (e.g. music player, camera, telephone, flashlight) to having all of these and impossibly many more services in the form of programs (apps) in one hand-sized device. However, just like with any powerful tool, it must be handled responsibly. It has been noted time and again that smartphones have some addictive features, and that indeed people seem to be using them more and more throughout the day. One reason for this development is the portability of smartphones and their ability to connect to the internet. This degree of availability then causes many people to habitually check their phone as we learn to appreciate the stimulation constant access to information provides. Of course, these habits can become a problem if they hinder us from achieving what we set out to accomplish.\nIt has been argued by many that heavy phone usage is at least related to shorter attention spans. I do not wish to argue whether this relationship is causal or not. Instead, I want to share some “habits” I have developed over the years that I feel help me to an extent to reduce my phone usage. A few years ago, I used my phone roughly 8 hours a day, now I use it around 15 minutes a day - this without paying any particular attention to using it less. There are some caveats to my screen-time reduction that I will discuss at the end, but if you want to use your phone less and/or save some money on your data plan or new device purchases, then keep reading!"
  },
  {
    "objectID": "blog/posts/minimal.html#say-what",
    "href": "blog/posts/minimal.html#say-what",
    "title": "Phone less, without being phoneless",
    "section": "",
    "text": "Modern smartphones are incredible feats of engineering. We have moved from using several devices for specific purposes (e.g. music player, camera, telephone, flashlight) to having all of these and impossibly many more services in the form of programs (apps) in one hand-sized device. However, just like with any powerful tool, it must be handled responsibly. It has been noted time and again that smartphones have some addictive features, and that indeed people seem to be using them more and more throughout the day. One reason for this development is the portability of smartphones and their ability to connect to the internet. This degree of availability then causes many people to habitually check their phone as we learn to appreciate the stimulation constant access to information provides. Of course, these habits can become a problem if they hinder us from achieving what we set out to accomplish.\nIt has been argued by many that heavy phone usage is at least related to shorter attention spans. I do not wish to argue whether this relationship is causal or not. Instead, I want to share some “habits” I have developed over the years that I feel help me to an extent to reduce my phone usage. A few years ago, I used my phone roughly 8 hours a day, now I use it around 15 minutes a day - this without paying any particular attention to using it less. There are some caveats to my screen-time reduction that I will discuss at the end, but if you want to use your phone less and/or save some money on your data plan or new device purchases, then keep reading!"
  },
  {
    "objectID": "blog/posts/minimal.html#just-say-no",
    "href": "blog/posts/minimal.html#just-say-no",
    "title": "Phone less, without being phoneless",
    "section": "“Just say no”",
    "text": "“Just say no”\nNotifications are a feature that many of us don’t think very hard about. Others intentionally use it as a tool, like an inbox for unprocessed messages, say. Notifications have a very behaviorist flavor to them, not completely unlike the bell to Pavlov’s dog. They can thus promote habits that you may not appreciate. Because the pairing of sound/vibration is so attention-grabbing, we really ought to reserve the privilege of definite distraction to important events. Given this salience, I think turning off notifications for everything (besides the calendar and to-do list) makes a lot of sense. These apps in particular serve the important purpose of reminding you what you should be doing or where you’re expected to be. Everything else, including e-mails, messages, and other forms of regular communication that rarely are critically important should not have notifications with sound/vibration enabled.\nThere are two reasons why removing notifications for seemingly important things like e-mail is not nearly as radical or life changing as one might think. Firstly, as you learn that your e-mail will not make a sound on your phone, you learn to regularly check the app yourself. Secondly, most people who sent a time critical message will also call you if you did not respond immediately. It’s important to realize that turning notifications off does not magically remove the information from your phone, but it allows you to exercise intentionality when engaging with it. In other words, it’s not the buzzing phone that is making me disengage from my work, but my volitional decision to check it. You are now the master of your own distraction. If you want to go even further with reducing distractions, you could turn off your phone while working, and/or put it out of sight/reach. Of course, these “blunt” methods will stop critical messages from reaching you, so exercise care."
  },
  {
    "objectID": "blog/posts/minimal.html#out-of-sight-out-of-mind",
    "href": "blog/posts/minimal.html#out-of-sight-out-of-mind",
    "title": "Phone less, without being phoneless",
    "section": "Out of sight, out of mind",
    "text": "Out of sight, out of mind\nNowadays, there is an app for everything, and we are often recommended to install the dedicated app for whatever service we are using. As apps start accumulating, we come to devise methods to navigate seas of icons. Having tons of apps invites distraction as it gives you more reasons to check different services even when not critical. Even more importantly, checking these relatively meaningless services is incredibly easy thanks to your phone’s portability. Have you ever asked yourself if this is really neccesary? My definite answer to this question is no, it’s not. The principle to exercise here is “out of sight, out of mind”. The way to think about it in practice is to organize your phone hierarchically, important things should be easy to reach, while less important things should be more hidden and thus harder to reach. One thing smartphone designers mistake about this principle is that they confuse frequency of use with importance. Frequently used, but highly distracting apps should NOT be easy to reach, and anything that you use less than once a month should also be tucked away somewhere. There are many ways to achieve this hierarchical organization, my method revolves around custom launchers and bookmarks.\nA launcher is basically an app that reimagines the UI of your phone. All good ones give you the ability to not have app icons on the home screen, allow you to turn off “Frequently used” and “Recommended” fields, and “hide” apps to a space separate from the main app drawer. My personal favorite launcher for Android and Android-derivatives is the AIO launcher, which at first glance seems like an odd choice for minimal design. However, what is wonderful about it is that you can have your home screen be just widgets, or nothing at all, if you so wish. It also gives you the ability to hide apps in a separate space and has lots of handy optional features that allow you to replace apps like the calculator. If you are comfortable with using Microsoft, the Microsoft launcher is a great alternative that is completely free, with similar functionality. If you want a FOSS option, there is the Pie Launcher available on F-Droid. With your custom launcher in hand, put any app you use less than once a month, but still definitely need, in the hidden folder, and turn any settings that provide suggestions/recommendations off. Banish app icons from your home screen and consider replacing important ones with their widget. For example, a to-do list widget is more convenient for noting something down super quickly, and it allows you to fill up that empty home screen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScreenshots: My entire phone with the AIO launcher can be summarized in three images"
  },
  {
    "objectID": "blog/posts/minimal.html#keeping-tabs-on-yourself",
    "href": "blog/posts/minimal.html#keeping-tabs-on-yourself",
    "title": "Phone less, without being phoneless",
    "section": "Keeping tabs on yourself",
    "text": "Keeping tabs on yourself\nThis tip is something I have never seen anyone else talk about, even though it is so simple. All those services that want you to use their dedicated apps? About 90% of them also have a web-site with the same functionality. After all, most apps are really just front-ends for websites, with design tailored for hand-held devices… Therefore, why not just set a bookmark on your browser and get rid of the app? This is great for anything that you “need” to be able to access but use very infrequently. If you make wide-spread use of this, a nice side effect is that you have a lot fewer apps that need to be updated!\nThis last idea is by far the most radical to people who have never tried it - ask yourself do you really, really need [X], specifically on your phone? Do you strictly need social media on your phone? Messaging apps? E-mail? Music/Audio players? I’m not suggesting you should abstain from music or social connection. However, most of us have more than one device, like a laptop, therefore raising the question whether we really need anything that can be done on a laptop replicated on our phone. If reducing phone use is the goal, then migrating as many services as possible to a laptop can be a good idea. Even if you don’t attach a particular sentiment to phone use per se, and would rather reduce overall screen time, this is still a good idea. The reason for this is that you are making it slightly more inconvenient to access these services, which can help you to be more mindful about when you use them. Moreover, migrating services to a laptop also has the added benefit of giving you more control over your experience by allowing you to use browser extensions to modify website behavior, easily block ads, and much more. Phones are pretty restrictive, whereas PCs give you quite a bit of freedom. Personally, I still have messaging and email on my phone, as every now and then situations do come up where you need to access that one email attachment or something else when the laptop is out of reach."
  },
  {
    "objectID": "blog/posts/minimal.html#the-devil-is-in-the-details",
    "href": "blog/posts/minimal.html#the-devil-is-in-the-details",
    "title": "Phone less, without being phoneless",
    "section": "The devil is in the details",
    "text": "The devil is in the details\nSo how much more time do I have thanks to reducing distractions so much? If you read closely, you can probably guess where I am going with this. We humans are endlessly complex creatures, and messing with our own habits can often lead to emergent behaviors we thought were hard to anticipate. While I definitely am less distraction-prone during my work thanks to these rules I have put in place for myself, the difference between my 8 hours of daily past phone usage and today’s 15 minutes vastly overstates how large this gain is. I would estimate that my reduction in phone usage from 8 hours to 15 minutes is highly correlated (potentially causally so!) with an increase of laptop usage from roughly 6 hours a day to something more like 10 hours. Still a net gain, but not exactly the difference between heaven and earth. A big chunk of the gains probably simply stem from the times when I am on the move, be it walking, cycling, at the gym, and so on. I’m definitely also saving a bit of money through this as I can get a very minimal data plan, and have no need for a fancy device. However, as I detailed throughout this post, there are other, less easily quantifiable benefits that can be reaped from adopting such an approach such as simplicity, mindfulness, freedom, control, and focus. I encourage you to experiment and question your own habits, if you find an interesting trick for yourself in the process, I’d be very interested to hear about it!\nThanks for reading :)"
  },
  {
    "objectID": "blog/posts/login.html",
    "href": "blog/posts/login.html",
    "title": "How to make a login portal for Quarto sites",
    "section": "",
    "text": "Hello again!\nI stumbled upon this blog post while trying to figure out whether it was possible to set up a login portal for static webpages. It seems that so far, no one else has figured out how to do this with Quarto, so I’ve been hacking away at it in my free time for the last few days, and finally figured it out!\nBasically, the idea is to use the SHA1 hash of the username and password as a part of the URL to the gated content. This way, the URL to the gated content is not easily guessable, and the user has to go through the login portal to access the content.\nThe rest was just a matter of figuring out how to make this compatible with Quarto. It’s surprisingly easy!\nFor a demonstration, click on [Login] in the top right and log in with username = username and password = password.\nAlternatively, visit lukmayer.github.io/login_portal to directly go to the login portal."
  },
  {
    "objectID": "blog/posts/login.html#prerequisites",
    "href": "blog/posts/login.html#prerequisites",
    "title": "How to make a login portal for Quarto sites",
    "section": "Prerequisites",
    "text": "Prerequisites\nYou want to be hosting the site somewhere where the source files are not accessible to the public.\nThis can be for example, a private gitHub repository with gitHub pages enabled, etc."
  },
  {
    "objectID": "blog/posts/login.html#step-1-creating-hashes",
    "href": "blog/posts/login.html#step-1-creating-hashes",
    "title": "How to make a login portal for Quarto sites",
    "section": "Step 1: Creating hashes",
    "text": "Step 1: Creating hashes\nYou need to come up with username and password for the gated content BEFORE you create the gated content\nRun the following commands in your terminal to generate the hashes for the username and password of your choice:\necho -n \"&lt;username&gt;\" | openssl dgst -sha1\necho -n \"&lt;password&gt;\" | openssl dgst -sha1\nNote: replace &lt;username&gt; and &lt;password&gt; with the username and password of your choice.\nCopy the hashes these commands produce, we will need them in a second."
  },
  {
    "objectID": "blog/posts/login.html#step-2-setting-up-the-initial-login-page",
    "href": "blog/posts/login.html#step-2-setting-up-the-initial-login-page",
    "title": "How to make a login portal for Quarto sites",
    "section": "Step 2: Setting up the initial login page",
    "text": "Step 2: Setting up the initial login page\nCreate a directory. In this example, we’ll call it login_portal.\nNow, in this directory, create index.html with the following content:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Login Portal&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n  &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Login Portal&lt;/h1&gt;\n  &lt;form id=\"login-form\"&gt;\n    &lt;input type=\"text\" id=\"username\" placeholder=\"Enter username\"&gt;\n    &lt;input type=\"password\" id=\"password\" placeholder=\"Enter password\"&gt;\n    &lt;button id=\"login-btn\" type=\"button\"&gt;Login&lt;/button&gt;\n  &lt;/form&gt;\n  &lt;div id=\"alert\" style=\"display: none;\" data-id=\"alert\"&gt;Incorrect username or password&lt;/div&gt;\n\n  &lt;script&gt;\n    const loginBtn = document.getElementById('login-btn');\n    const usernameInput = document.getElementById('username');\n    const passwordInput = document.getElementById('password');\n    const alertDiv = document.getElementById('alert');\n\n    function sha1(message) {\n      return CryptoJS.SHA1(message).toString(CryptoJS.enc.Hex);\n    }\n\n    async function urlExists(url) {\n      try {\n        const response = await fetch(url, { method: 'HEAD' });\n        return response.ok;\n      } catch (error) {\n        return false;\n      }\n    }\n\n    async function login(username, password) {\n      const usernameHash = sha1(username);\n      const passwordHash = sha1(password);\n\n      // Log the hashes for debugging\n      console.log(\"Username Hash:\", usernameHash);\n      console.log(\"Password Hash:\", passwordHash);\n\n      const url = 'a' + usernameHash + '/a' + passwordHash + '/index.html'; // Construct URL\n      console.log(\"Constructed URL:\", url); // Log the constructed URL\n\n      if (await urlExists(url)) {\n        window.location = url;\n      } else {\n        alertDiv.style.display = 'block'; // Show alert\n        usernameInput.value = '';\n        passwordInput.value = '';\n        console.log(\"Login failed, incorrect username or password.\");\n      }\n    }\n\n    loginBtn.addEventListener('click', function () {\n      login(usernameInput.value, passwordInput.value);\n    });\n\n    passwordInput.addEventListener('keydown', function (e) {\n      if (e.key === 'Enter') {\n        login(usernameInput.value, passwordInput.value);\n      }\n    });\n  &lt;/script&gt;\n\n  &lt;footer&gt;\n    &lt;a href=\"https://lukmayer.github.io\"&gt;Return to lukmayer.github.io&lt;/a&gt;\n  &lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nYou may want to modify the footer to link to your own website.\nThe styles.css should be a file in the same directory as index.html.\nYou can put whatever you like in the styles.css, but here is mine:\n\n\nbody {\n  background-color: #4f4f4f; /* Dark grey background from Darkly theme */\n  color: #ffffff; /* Light text */\n  font-family: 'Arial', sans-serif;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  margin: 0;\n  flex-direction: column; /* Arrange elements in a column */\n}\nh1 {\n  color: #00bf63; /* Green color from Darkly theme */\n  margin-bottom: 20px; /* Space between title and form */\n}\n.form-container {\n  background-color: #777777; /* Slightly lighter dark background for form from Darkly theme */\n  padding: 30px;\n  border-radius: 10px;\n  box-shadow: 0px 0px 15px rgba(0, 191, 99, 0.5); /* Adjusted shadow to match theme */\n  width: 100%;\n  max-width: 400px; /* Set a max-width for better alignment */\n  box-sizing: border-box; /* Ensure padding is included in overall width */\n}\ninput[type=\"text\"], input[type=\"password\"] {\n  width: 100%;\n  padding: 10px;\n  margin: 10px 0;\n  border: 1px solid #00bf63; /* Green border from Darkly theme */\n  border-radius: 5px;\n  background-color: #777777; /* Dark input background from Darkly theme */\n  color: #ffffff; /* Light text in input */\n  box-sizing: border-box; /* Ensure padding is included in overall width */\n}\ninput::placeholder {\n  color: #ced4da; /* Light grey color for placeholder text from Darkly theme */\n}\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #00bf63; /* Green button background from Darkly theme */\n  color: #ffffff; /* Light text */\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  font-weight: bold;\n}\nbutton:hover {\n  background-color: #198754; /* Darker green on hover from Darkly theme */\n}\n#alert {\n  color: #ff0000; /* Red alert message */\n  margin-top: 10px;\n  align-self: center; /* Align to the start of the form */\n}\n\n/* Center the container, form, and alert */\n.container {\n  display: flex;\n  flex-direction: column; /* Arrange title, form, and alert in a column */\n  align-items: center;\n}\n\nfooter {\n  position: absolute;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 18px;\n  color: #00bf63; /* Green color from Darkly theme */\n  text-align: center;\n}\n\nfooter a {\n  text-decoration: none;\n  color: #00bf63; /* Green color from Darkly theme */\n}\n\nfooter a:hover {\n  color: #198754; /* Darker green on hover from Darkly theme */\n}"
  },
  {
    "objectID": "blog/posts/login.html#step-3-creating-the-gated-content",
    "href": "blog/posts/login.html#step-3-creating-the-gated-content",
    "title": "How to make a login portal for Quarto sites",
    "section": "Step 3: Creating the gated content",
    "text": "Step 3: Creating the gated content\nInitialize a Quarto website project in the directory in which index.html sits.\nThe name of the project MUST be a{yourusernamehash}\nThe reason the “a” is prepended to the hash is that GitHub pages will not serve a directory that starts with a number.\nNext, in the project folder, create a new folder of the name a{yourpasswordhash}.\nNote: replace {yourusernamehash} and {yourpasswordhash} with the hashes you generated in Step 1.\nFinally, open your _quarto.yml and make sure it has the following:\n\n\nproject:\n  type: website\n  output-dir: \"a{yourpasswordhash}\"\n\n\nThis ensures that the rendered files sit in the folder that is named after the password hash.\nWhen you log in, you will be redirected to the URL constructed from the username and password hashes.\nThis means you’ll be redirected to the files that sit in this folder named after the password hash.\n\n\nAs a sanity check, post-render the login portal should now have a file structure like this:\nlogin_portal/\n├── index.html\n├── styles.css\n├── favicons/  # if you have favicons\n└── username_hash/\n    └── password_hash/"
  },
  {
    "objectID": "blog/posts/login.html#step-4-hiding-the-hashed-urls",
    "href": "blog/posts/login.html#step-4-hiding-the-hashed-urls",
    "title": "How to make a login portal for Quarto sites",
    "section": "Step 4: Hiding the hashed URLs",
    "text": "Step 4: Hiding the hashed URLs\nYou don’t want the hashed URLs to leak, since knowing them allows you to bypass the login portal.\nThe method I’m going to show you here can’t stop a determined hacker, but it will stop whoever you’re sharing this with from accidentally leaking the hashed URLs.\nAll you need to do is paste the following HTML/JS on every Quarto document behind the login portal:\n\n\n&lt;script&gt;\nwindow.addEventListener('load', () =&gt; {\n  // Change the URL in the address bar after load\n  history.replaceState(null, null, \"/login_portal/\");\n});\n&lt;/script&gt;\n\n\nSo, for example, the index page on the demo I mentioned at the beginning of the post has this script embedded, and so does the “Guide” page.\nWhat this code does is override the URL shown in the address bar once the page loaded, thus hiding the hashes.\n\"/login_portal/\" is optional, you can set this to whatever you like.\nAlternatively, you can add the following to the _quarto.yml to hide the hashed URLs on all pages automatically:\nformat:\n  html:\n    include-in-header: \n      - text: |\n          &lt;script&gt;\n          window.addEventListener('load', () =&gt; {history.replaceState(null, null, \"/login_portal/\");});\n          &lt;/script&gt;"
  },
  {
    "objectID": "blog/posts/login.html#step-5-deploying",
    "href": "blog/posts/login.html#step-5-deploying",
    "title": "How to make a login portal for Quarto sites",
    "section": "Step 5: Deploying",
    "text": "Step 5: Deploying\nI’m assuming you are planning to use GitHub with GitHub pages for this.\nFirst, render your Quarto project to HTML.\nDO NOT git init on the project folder, but instead where the index.html sits, which should be one level above the project folder.\nThen add the remote origin, commit and push to the remote.\nFinally, go to the settings of the repository on GitHub, and enable GitHub pages."
  },
  {
    "objectID": "blog/posts/login.html#step-6-making-more-content",
    "href": "blog/posts/login.html#step-6-making-more-content",
    "title": "How to make a login portal for Quarto sites",
    "section": "Step 6: Making more content",
    "text": "Step 6: Making more content\nTo add more gated content with different access credentials, simply create another Quarto project with different hash names at the same level as the first one.\nThis also means that you need to render each project separately.\n\n\nlogin_portal/\n├── index.html\n├── styles.css\n├── favicons/  # if you have favicons\n├── project1_username_hash/\n│   └── project1_password_hash/\n└── project2_username_hash/  # a second, separate gated project\n    └── project2_password_hash/"
  },
  {
    "objectID": "blog/posts/login.html#troubleshooting",
    "href": "blog/posts/login.html#troubleshooting",
    "title": "How to make a login portal for Quarto sites",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nShould the login portal not redirect correctly, make sure that the folder names match the hashes that are printed to the browser console! Should they somehow not match, verify the hash on your terminal, then rename the files.\n\n\n\nIf you make use of my code or took inspiration from my solution, I’d love to see your result! :)\nEnjoy!"
  },
  {
    "objectID": "blog/posts/index.html",
    "href": "blog/posts/index.html",
    "title": "Why Vivaldi is the least and most minimal browser at the same time",
    "section": "",
    "text": "I’ve noticed that with software there sometimes exists a bit of an ironic relationship where the product with the most features somehow is also able to be the most minimal. Emacs is one such example, as it’s a text editor that can be configured to perform tasks you’d never think a text editor would be able to - and it does this with almost no UI whatsoever. It’s fair to say I’m a big fan of reducing visual clutter on my devices. For example, my laptop runs Linux with no Desktop environment, and my phone home screen is basically just a calendar widget. Neither device is minimal in the sense of having little functionality, but both are definitely minimal in the sense of keeping the interface to a minimum.\nToday I want to talk about another piece of software that I use that can be said to enable this form of minimalism. It is of course the Norwegian-made browser Vivaldi. Vivaldi is the brain-child of Jon von Tzetchner, former CEO of Opera, and is essentially aiming to be the go-to browser for power-users. In my opinion it is doing quite well in catering to this audience, as the browser is known for its massive array of features and extensive customizability.\nSome stand-out features of Vivaldi include:\n\nMade by a trustworthy company with no interest in tracking users (although not FOSS)\nA highly customizable UI\nA built-in E-mail, calendar, to-do list and RSS feed reader client\nPage Tiling - basically showing more than one tab in the same window, for example side by side\nWeb Panels - essentially a set of bookmarked pages that can be viewed without switching the tab\nWork spaces, which allow you to have tabs in separate windows within the same window.\nTranslator, Contact list, Reading list, Note-taking client, and sooo much more.\n\nWho on earth needs all of that? Well, the beauty of it all is that Vivaldi does not force you to use any of these, you can turn all of these things off if you wish. You’re not even locked in once you chose to use one of these features, as Vivaldi allows you to export your data - you are in full control. For example, I was using the built-in note-taking client for a while, but then opted for something else. Switching was no problem, because Vivaldi lets you export all your notes to Markdown.\nNow because Vivaldi is such a beast, it can seem a little intimidating when you fire it up for the first time. So today I want to highlight the specific features of Vivaldi that allow you to go from this:\n\n\n\n\nBy default, the Vivaldi browser has a lot of UI\n\n\n\nTo this:\n\n\n\n\nLukas Mayer has a very minimal configuration of Vivaldi that does not compromise on functionality\n\n\n\nYou’re probably looking at my screenshot and thinking “How do you do … anything?”. The short answer is - Keyboard shortcuts. Vivaldi allows you to map whatever button combination you want to what must be hundreds of different commands. Closing a tab Ctrl + W, going to the previous page Alt + LeftArrow, opening E-Mail Ctrl + Shift + M, etc. That alone has allowed me to remove most of the UI.\nHowever, there are some exceptions to what can be removed. One example is the address field, which has to be in the address bar to work properly. You could hide the address bar in which case pressing Ctrl + L would actually pop out a little field to type in, but hiding the address bar is a little annoying if you use any of the UI in the Mail client, since it no longer will be accessible. Sure, you could bind a key to toggle the address bar for when you need it. However, I find that more cumbersome than just living with the address bar. This is because if you hide the address bar (with tabs not on top), Vivaldi will replace it with a minimal window title bar, which renders the net space savings of hiding the address bar minimal.\nNext, you might have thought that I don’t have tabs. This is not quite correct, as I have a very small vertical tab bar at the right edge of the window. It’s set to the minimum width such that you can only see the favicons of websites, not their titles. I tried going completely without a tab bar, but found the lack of visual feedback a bit jarring.\nYou might think that seeing the website titles is quite important, since it might be hard to tell apart two tabs that are on the same domain otherwise. Luckily, you can enable list view for the tab switcher, meaning if I hit Ctrl + Tab I can cycle through the tabs in a little pop up that shows the tab titles. This is such an underrated feature as it makes switching tabs with your keyboard super efficient.\nThe only things left as UI are for essential functions that do not have an internal page that can be mapped to a keyboard shortcut but do provide a button for a pop-out menu. This includes the extensions, reading list and downloads popups. On the far left is the burger menu to access settings, which cannot be removed. I also hide Speed Dials and everything else on the start page. That’s it!\nUI clutter, Check; Tab clutter, Check. What’s left? Well, as I alluded to in the introductory paragraph I don’t really wish to compromise on functionality. Unfortunately, if you use web panels, Vivaldi currently requires you to have the panel bar showing, even if the panel buttons are not on the panel bar! If you don’t show the panel bar, the sites you have as panels will unload, meaning you will have to load them from scratch every time you want to use them. You could insert your own CSS modifications (which Vivaldi allows), but I have personally not gotten my CSS code to reliably hide/show the panel bar on hover. This annoyance led me to realize that I can achieve virtually the same functionality without actually using panels.\nHow, you ask? My work-around has been a mix of tab tiling and workspaces with pinned tabs. It’s not quite as flexible as actual panels, but it fully satisfies my needs. If I need to quickly view a site that would be panel-worthy, I just hit my keybinding to switch workspaces until I get to the one with the page I’m looking for. If I need to split view that page for multitasking, I simply tile the tab inside that workspace.\nIn some ways this approach off weaning yourself off of panels (especially the built-in ones) is actually superior, because the panel implementations of many features of Vivaldi are less feature-rich than their internal page equivalent. Compare for example the calendar panel to the calendar page, and you’ll see what I mean. That being said, how nice is it that Vivaldi gives you both, a panel implementation of something, and an internal page or pop-out version?\nAnd that’s basically the essence of my setup! If you are not (yet) a Vivaldi user, this was probably too much information for you… hopefully I managed to get you curious about Vivaldi though. If you are a Vivaldi user, I hope you found my approach inspiring for your own configuration! If you liked the theme I use, I actually published it here, enjoy :)\nP.S.: Legend has it you’ll never be able to look at a MacBook with MS Word open in Google Chrome the same way once you have seen the light…"
  },
  {
    "objectID": "blog/posts/generative1.html",
    "href": "blog/posts/generative1.html",
    "title": "Statistical Bouquets: My first venture into creative coding",
    "section": "",
    "text": "Creative coding, where one leverages computer programming to make art, comes in many names and forms. Some people call this practice “creative coding”, others “procedural art”, and yet others “generative art”1. The work itself is even more varied than its various umbrella terms: static images, animations, interactive pieces, transformations of existing media, and so much more.\n1 “Generative Art” “should not be confused with visualizations made using Generative AI, as the creation of the underlying code is essential to the process.I was first exposed to code art through academics in the R community that I followed on Twitter, which must have been sometime in 2021. I was pretty impressed with the creative use of random number generation and “hacking” what was meant to be a data visualization package to make art. Since then, I’ve uncovered a few different venues where people share their code art, such as the OpenProcessing Community, and r/generative on Reddit.\nI was attracted to code art not just because of the beauty of the pieces and the sheer possibilities the method gives rise to, but also because I felt it would be a nice way of practicing programming skills without having to wait for a “real” project to come along.\nWhat took me 3 years then to get going? Well, getting started is kind of the hardest part. All the work you see is extremely impressive, at the same time, it is a very niche subject. This means there are not that many resources available for beginners, especially if you have a specific language in mind. On top of that, there is that feeling of “this is not good enough to be art” that holds one back. Finally, there is the typical “I don’t know what to make” problem.\nIn a weird seeming way, it was exactly this assumption that I needed structure in my learning process that seemed to be holding me back from commencing my journey. What I ended up doing to get over this initial hurdle is very simple. Have a basic understanding of the general process of creation (specifying some structure, leaving other parts random), and then just experiment. The “just play around and see what happens” approach was actually the only way that seemed sensible given I had no idea what I wanted to make, but did want to use Julia - a language that is not widely used in the code art community.\nMy process began with picking a visualization library that I wanted to use. I chose Makie because it seemed to be highly versatile (judging by the GitHub repo) and critically-acclaimed (as judged by Reddit comments). I then figured out how to go from a 2D-plot to a “Canvas”. In other words, how to remove all the elements that normal people want in their plots, like axes, labels, etc. I then tried to figure out how to generate some random values to plot as a scatter plot on this canvas. After that, I explored different geometries and color scales, until I had something that looked like a crazy bowl of neon spaghetti. My 2D bowl of unappetizing angular pasta actually looked kind of artsy, so I was starting to feel a little inspired. I decided to add other graphical elements on top, and the whole piece evolved into a kind of abstract flower bouquet.\nIt really took me a bit to start thinking less in terms of matching the visualization to the data I had, which is what you usually do in dataviz, and instead think more so about how to make data that will look like something I want to see. A second surprise I experienced during the process was to intentionally refrain from planning the output too much. Most traditional art forms require a lot of planning, but with creative coding, it should be the randomness inherent in the generative process that makes one instance ugly, and another beautiful. So if you look at my code attached at the end of this post, you can see that there are some additional elements that I ended up not using because the result started to look “over-engineered”.\nWhat I settled on after a few hours of tinkering was neither technically nor visually complex, and yet, quite beautiful in my opinion.\n\n\n\n\nStatistical Bouquets: #371907020\n\n\n\nThe code simply generates start and end points for lines, as well as some color values. The values are all drawn from statistical distributions. Then I layer two scatter plots on top of the lines, one for the petals and one for the flower head. The scatter plot layers simply differ in the marker shape and size. One flower (Stem + Petals + Head) is generated at a time so that layers do not overlap illogically. The background is a heatmap of random values. I tweaked the color scales and their effective ranges until I was satisfied with the color scheme in the output. If you look closely at my code, you can see how I modified specific lines of code to place elements and achieve the shapes I wanted.\nI very much enjoyed this learning experience! I definitely learned quite a bit about the plotting library, and it’s pretty interesting to play with code with no overly specific end-goal in mind. I’m really looking forward to learning how to give rise to more complex geometries, incorporate more randomness, and add motion in the future!\n\nFor anyone curious, here is my code :)\n\nusing Random\nusing Distributions\nusing CairoMakie\n\nfunction generate_random_graph(seed=nothing; n=200)\n  if seed === nothing\n    seed = rand(1:10^9)\n  end\n  Random.seed!(seed)\n\n  # flower stems\n  x_start = rand(Normal(50, 2), n÷2)\n  y_start = rand(Normal(4, 1), n÷2)\n  x_end = rand(Normal(50, 15), n÷2)\n  y_end = rand(Normal(10, 1), n÷2)\n\n  x = vcat(x_start, x_end)\n  y = vcat(y_start, y_end)\n\n  # stem color\n  z = rand(Beta(2,1), n÷2)\n\n  # Petal color\n  c = rand(Beta(1,1), n÷2)\n\n  #flower head color\n  h = rand(Beta(1,1), n÷2)\n  \n  #Petal size\n  s = rand(50:160, n÷2)\n\n  # FLower pot\n  px = rand(Uniform(35, 65), n*20)\n  py = rand(Uniform(1, 5), n*20)\n  pc = rand(Beta(2,1), n*20)\n\n  #Background color\n  n_rows, n_cols = 100, 15\n  data = rand(Normal(0, 1), n_rows, n_cols)\n\n  #table color\n  nrows2, ncols2 = 20, 40\n  data2 = rand(Normal(0, 0.5), nrows2, ncols2)\n\n  # Create the figure\n  fig = Figure(size = (800, 800))\n  ax = Axis(fig[1, 1], \n    xticklabelsvisible = false,\n    yticklabelsvisible = false,\n    xticksvisible = false,\n    yticksvisible = false,\n    xgridvisible = false,\n    ygridvisible = false,\n    backgroundcolor = :black,\n    leftspinevisible = false,  \n    rightspinevisible = false,\n    topspinevisible = false,\n    bottomspinevisible = false,\n    spinewidth = 0)\n\n\n  #layers\n  #background\n  heatmap!(ax, data,\n    colormap = :blues, colorrange = (-2, 3))\n\n  #table\n  #=\n  x_pos = range(0, 100, length=n_cols)  # Horizontal position\n  y_pos = range(0, 8, length=n_rows)   # Vertical position\n  heatmap!(ax, x_pos, y_pos, data2,\n      colormap = :YlOrBr, colorrange = (-5, .1))\n  =#\n\n  #flowers\n  for g in 1:(n÷2)\n      lines!(ax, [x_start[g], x_end[g]], [y_start[g], y_end[g]],\n          color = z[g], colormap = :speed, colorrange = (-0.1, 1),\n          linewidth = 5, linestyle = :solid)\n      scatter!(ax, x_end[g], y_end[g],\n      color = c[g], colormap = :inferno, colorrange = (-0.2, 1.4),\n      marker = :cross, markersize = s[g])\n      scatter!(ax, x_end[g], y_end[g],\n      color = h[g], colormap = :heat, colorrange = (0, 1.4),\n      marker = :circle, markersize = (s[g]÷4))\n  end\n\n  #flower pot\n  #=\n  scatter!(ax, px, py,\n   color = pc, colormap = :greys, colorrange = (-0.5, 1),\n   marker = :octagon, markersize = 10)\n  =#\n\n  return fig, seed\nend\n\nfig1 = generate_random_graph()\nfig1[1]\n\n\nname = string(fig1[2])\n#save to file\n#save(name*\".png\", fig1[1])"
  },
  {
    "objectID": "blog/posts/freiburg.html",
    "href": "blog/posts/freiburg.html",
    "title": "A day trip to Freiburg",
    "section": "",
    "text": "I grew up in South-West Germany, but in my 13 years there I never visited some cities of my state of Baden-Württemberg. That’s why my sister and I decided to make a day trip to Freiburg im Breisgau, the only major city in the Black Forest region. Since I was home for the holidays, we took the first best chance to do the 2.5h drive after Christmas. Unfortunately, this timing does imply that we did not get to see what Freiburg is like at maximum Christmas. Despite that, I was pretty impressed with the city and its surroundings! I’m obviously used to the aesthetics of more traditional German cities1, but Freiburg has an impressively large and beautiful old-town for its modest size (Population: approx 200k). It’s also remarkably close to nature.\nHere’s a little photo diary of the trip :)"
  },
  {
    "objectID": "blog/posts/freiburg.html#road-trip-to-freiburg",
    "href": "blog/posts/freiburg.html#road-trip-to-freiburg",
    "title": "A day trip to Freiburg",
    "section": "Road trip to Freiburg",
    "text": "Road trip to Freiburg\nOnce we really started to get outside the Stuttgart metropolitan area, temperatures dropped (from -1°C to -8°C) and the landscape became very snowy.\n\n\n\n\nZooming past the frozen landscapes part 1.\n\n\n\n\n\nZooming past the frozen landscapes part 2.\n\n\n\nWe also saw lots of old traditional houses typical to the far south of Germany.\n\n\n\n\nTraditional family house (left) with some barns (right).\n\n\n\n\n\nWooden shingle houses at the border to the Black Forest.\n\n\n\n\n\nVillagers casually skiing on the side of the road.\n\n\n\nWe also drove past this huge 240m tall tower (500+ ft), which sticks out like a sore thumb in the otherwise rural landscape.\n\n\n\n\nThe Thyssenkrupp elevator test tower in Rottweil.\n\n\n\nThere is also this very cliffy area on the way.\n\n\n\n\nCliff with cross on the way to Freiburg.\n\n\n\n\n\nCliff with cross on the way home from Freiburg.\n\n\n\n\n\nThe snowy Black Forest."
  },
  {
    "objectID": "blog/posts/freiburg.html#freiburg-old-town",
    "href": "blog/posts/freiburg.html#freiburg-old-town",
    "title": "A day trip to Freiburg",
    "section": "Freiburg old town",
    "text": "Freiburg old town\nAs I mentioned, the old town of Freiburg is fairly extensive. It’s also quite ornamented, with lots of little details on the buildings.\n\n\n\n\nThe large cathedral (Münster) can be seen from almost anywhere in the old town.\n\n\n\n\n\nThe city center with view of the Martinstor. The entire core is mostly devoid of cars, with trams, bikes and good old feet being the main modes of transport.\n\n\n\n\n\nA lively and quaint street at the edge of the old town. The Christmas decorations are still up.\n\n\n\n\n\nIn some places in the city, you get an unexpected view of the surrounding nature.\n\n\n\n\n\nThe Schwabentor (lit. “Swabian’s Gate”), one of the multiple remaining city gates.\n\n\n\n\n\nThe Martinstor, now featuring a familiar business. Also note that trams can pass through both openings of the gate.\n\n\n\n\n\nThe Schlossbergsteg offers another angle of life in the old town.\n\n\n\n\n\nA hidden private entrance to houses near the Schlossbergsteg. Free view of the Schwabentor included.\n\n\n\n\n\nThe Konviktstraße, a street with a lot of character thanks to overgrown facades.\n\n\n\n\n\nThe Augustinerplatz, a square with extra fancy decorated buildings.\n\n\n\n\n\nMany streets in the center are lined with these water channels called “Bächle” (lit. “little creek”). They are a unique feature of Freiburg, and a major tripping hazard. Unfortunately they seem to be devoid of water in the winter. The cobbled sidewalks also tend to have mosaic patterns built-in (see top left)."
  },
  {
    "objectID": "blog/posts/freiburg.html#the-münster-and-münsterplatz",
    "href": "blog/posts/freiburg.html#the-münster-and-münsterplatz",
    "title": "A day trip to Freiburg",
    "section": "The Münster and Münsterplatz",
    "text": "The Münster and Münsterplatz\nThe Münster is the main cathedral of Freiburg and is located on the Münsterplatz. The square is also home to the market. The Münsterplatz is a very lively place, even in the cold. It also has a lot of interesting buildings around it.\n\n\n\n\nThe Münsterplatz with a piece of the market. The only cars allowed here are those of the market vendors.\n\n\n\n\n\nThe historical merchant’s hall (Historisches Kaufhaus) on the Münsterplatz with its impressive facade.\n\n\n\n\n\nA profile view of the huge Münster. The tower is 116m tall (that’s almost 400 feet).\n\n\n\n\n\nThe large portal into the Münster is lined with many painted statues.\n\n\n\n\n\nThe inside of the cathedral was surprisingly dark, but features beautiful stained-glass windows (not shown). The Christmas trees are still up."
  },
  {
    "objectID": "blog/posts/freiburg.html#schlossberg",
    "href": "blog/posts/freiburg.html#schlossberg",
    "title": "A day trip to Freiburg",
    "section": "Schlossberg",
    "text": "Schlossberg\nThe city has its personal hill, the Schlossberg, which offers a nice nature-getaway right in the city. The hill is sufficiently high to offer a good view of the city and the surrounding area. It also features multiple historical structures and vista points.\n\n\nThere are many paths up the hill, but the most convenient way up is to take the Schlossbergbahn, a funicular railway. The entrance to the station is wedged right in between the historical core and a large city park. The end station on the hill features a restaurant.\n\n\n\nVideo\nThe Schlossbergbahn in action.\n\n\n\n\n\nThe top of the Schlossberg features a tower with a viewing platform.\n\n\n\nI actually overcame my fear of heights to take a picture from the tower. The tower may look pretty sturdy, but it has some noticeable wobble at the top.\n\n\n\n\nTop of the tower. Unfortunately, my good deeds were not rewarded, as the extra height made the fog even worse.\n\n\n\n\n\nThis was the best view I could get from near the Kanonenplatz on the Schlossberg.\n\n\n\n\n\nA view of Oberau, a district of Freiburg, from the Schlossberg."
  },
  {
    "objectID": "blog/posts/freiburg.html#schauinsland",
    "href": "blog/posts/freiburg.html#schauinsland",
    "title": "A day trip to Freiburg",
    "section": "Schauinsland",
    "text": "Schauinsland\nThere is a close by mountain called the Schauinsland, which is a popular destination for hiking, skiing and some attractions. You can actually reach it with public transport by taking the Tram 2 to its terminal station and then hopping on Bus 21. In our case it made more sense to just take the car to the foot of the mountain. You reach the top with a cable car, which takes you up almost 1.3km (0.8 miles) in altitude.\n\n\n\n\nThe road to the foot of the Schauinsland has you drive through someone’s house.\n\n\n\n\n\nHere’s what the cable cars look like. We got lucky and got one for just the two of us.\n\n\n\n\n\nLeaving the station at the foot of the mountain.\n\n\n\n\n\nThe view from the cable car up the mountain is pretty nice.\n\n\n\n\n\nTurns out 1.3km of altitude is enough to get above the fog.\n\n\n\n\n\nHigh up above the clouds.\n\n\n\n\n\n\n\nThe view from the top of the Schauinsland. It’s noticeably warmer up here."
  },
  {
    "objectID": "blog/posts/freiburg.html#conclusion",
    "href": "blog/posts/freiburg.html#conclusion",
    "title": "A day trip to Freiburg",
    "section": "Conclusion",
    "text": "Conclusion\n\n\nMy sister repping some UCI merch. Also, lunch.\n\n\n\nThis was an exceptionally nice day trip. I don’t usually take many pictures, so that should tell you everything. Of course, we got a little unlucky with the timing and the weather in the city, but it was still an amazing experience. It’s definitely worth a visit if you’re in the area.\nThanks for following along :)"
  },
  {
    "objectID": "blog/posts/feeds.html",
    "href": "blog/posts/feeds.html",
    "title": "How I find interesting blogs to follow",
    "section": "",
    "text": "I’ve been using RSS feed readers for a while now, and it’s definetely become my favorite way of keeping up with things. Why? Simply because it’s so effortless.\n\n\nIf you don’t know what RSS is, I’ve written about it previously here\nWith RSS I follow Blogs, YouTubers, Scientific Journals, Newsletters, Mastodon “tooters”, and BlueSky “skeeters”! I don’t even have an account with Youtube or Bluesky, and thanks to RSS I don’t need one. In short, RSS is the universal subscribe button for many parts of the internet.\nSince RSS is just a standardized format for publishing website updates, rather than a platform, there is no recommendation of new content built in. This can be good in the sense that I do not have to scroll through “Recommended” content where it is questionable who finds the post at hand recommendable, like is the case with most big social media platforms. On the flipside, it can also be a disadvantage especially when first getting started with RSS feeds since you probably won’t know what to follow.\n\n\nAnother thing I really appreciate is the complete lack of “trending” style content, which to me sometimes feels more like the billboard for rage-bait posts. Also, no ads, and since you’ll only be following real people, no AI generated stuff.\nI initially used RSS exclusively to follow scientific journals that were publishing in my topic area. Then I migrated my existing Youtube subscriptions. Only when I started looking into the Fediverse a bit, did I learn about tools people use for finding other content. Today, I want to share two of these.\nBoth tools are simple feed recommenders. First up is indieblog.page, which is essentially a curated list of personal blogs. They offer RSS feeds for you to follow that will pick a set number of posts from these blogs and link them to you. So for example, every day I see 10 posts from random people pop up in my RSS feed from Indieblog. A lot of it is Software Engineers talking about some coding problem or hobby project that is beyond my appreciation, but a few times a week at least one of these random posts catch my interest. So if I see something interesting, I check out the rest of their site, and if it looks interesting I’ll follow their blog.\nSecond is the Kagi Small Web another curated list of web-blogs, maintained by the Kagi search engine folk. Here the design is a bit different. The interface shows one random, new blogpost from a site in the list. The UI let’s you click through these, like them, and see what other people using the service like. There are filters for smaller YouTube channels, and comics. There is an RSS feed, but it will likely spam you to death since it will show all recent posts happening from the blogs in the list. I mostly use this when I am really bored and only have my phone, like when sitting on a bus or a waiting room. I simply cycle through until I see something interesting. If something seems worth following I’ll save the URL somewhere so I can follow the site later.\nIf you’re getting started with RSS or looking for new stuff, be sure to give these a spin."
  },
  {
    "objectID": "blog/posts/extensions2.html",
    "href": "blog/posts/extensions2.html",
    "title": "More awesome browser extensions",
    "section": "",
    "text": "I previously wrote about some extensions I use to block ads, reduce the addictiveness of sites like Reddit and Youtube, and improve my experience on Duolingo.\nIn this post, I’ll share some other extensions I really like that have more niche applications."
  },
  {
    "objectID": "blog/posts/extensions2.html#pdf-reader",
    "href": "blog/posts/extensions2.html#pdf-reader",
    "title": "More awesome browser extensions",
    "section": "PDF Reader",
    "text": "PDF Reader\nMy browser of choice, Vivaldi, is based on Chromium, the open-source code component of Google’s Chrome browser. As far as I am aware, all Chromium-based browsers (including Chrome itself) use a very bare-bones PDF reader with the single exception of Microsoft Edge. There was a period of time where I used Edge for the sole reason that it had a really powerful PDF reader that allowed you to highlight text and add comments.\nOf course, thanks to extensions we can simply replace the rather useless PDF reader your favorite browser comes with. Adobe has an extension that serves this purpose, but like all Adobe products it heavily nudges you to pay for a subscription, and has a questionable privacy policy.\nSo if you’re ok with trading some additional privacy and sanity for something a little bit less powerful than Adobe’s offering then I have something for you. One benefit of Mozilla developing Firefox as an open-source project is that their PDF reader is also open-source. It’s no shock then that someone took Mozilla’s PDF.js library and turned it into a Chrome extension. The extension is simply called “PDF Reader” on the Chrome Web Store, and can be found here.\nIt’s pretty handy. One thing to keep in mind is that viewing pdfs from websites will open them in a local url, so you can’t just copy the url from the address bar. Instead, you have to click a button in the top right corner of the PDF reader to save the link to the document."
  },
  {
    "objectID": "blog/posts/extensions2.html#vimium-c",
    "href": "blog/posts/extensions2.html#vimium-c",
    "title": "More awesome browser extensions",
    "section": "Vimium C",
    "text": "Vimium C\nVim is a text editor that is very popular among programmers. It’s known for its steep learning curve and powerful keyboard shortcuts. Vim keybindings are so popular that many applications offer them as an option. For example, many coding IDEs have a Vim mode (sometimes called Evil mode). Vimium C is simply an extension that offers Vim mode for your browser1. The keybindings are sometimes as expected, sometimes a little different due to the browser not being a text editor. But overall, if you know Vim, it’s a treat to use.\n1 “Vimium” (without the C) is definitely the OG Vim browser extension, but I prefer Vimium C because it has slightly better looks, and slightly more features that I find useful. Vimium C is open-source.My favorite part feature is the ability to navigate links, scroll, and open new tabs all via very simple Keyboard shortcuts. For example, if you press f, a little overlay will appear that shows you a button combination you can press to open any link on the page. If you hold shift while pressing the buttons for a link, it will open the link in a new tab. If you want to use the keyboard shortcuts that a website has defined, you simply press i to enter insert mode, and then you don’t have to worry about Vimium C interfering with the website’s shortcuts. For scrolling, you can use the familiar j and k keys to scroll down and up, respectively. This extension also has u and d for scrolling up and down a screen worth of content, and gg and G for scrolling to the top and bottom of the page, respectively. It feels awesome, especially when paired with Vivaldi, which already has pretty powerful keyboard shortcut options."
  },
  {
    "objectID": "blog/posts/extensions2.html#tampermonkey",
    "href": "blog/posts/extensions2.html#tampermonkey",
    "title": "More awesome browser extensions",
    "section": "Tampermonkey",
    "text": "Tampermonkey\nLike Vimium C, Tampermonkey is an extension whose idea appeals to programmers. It simply allows you to automatically inject some JavaScript code into any website. At first regard, this seems ridicously niche. But hear me out, I’ll give some examples to show why it’s extremely useful.\nSo as you know, I use an Ad-blocker. Youtube recently has taken a lot of issue with ad-blockers. So what they started doing is to pause my video from playing to show a message that basically says “Adblockers are not allowed on Youtube”. Naturally, this message can only be dismissed after a timer runs out. Every detail of this design is meant to be annoying, and I’m simply not going to disable my ad-blocker.\nSo what did I do? I open the browser console, and copy the HTML of the element that contains the pop-up message. I ask an LLM to write a little script that removes the element from the page for Tampermonkey. I paste the code into Tampermonkey. Boom, no more annoying pop-ups. I could have probably written a script like this myself with a little tinkering, but what you should take away from my example is that you don’t even have to be a coder anymore to use Tampermonkey. It took me less than 2 minutes to completely get rid of a “feature” that some developer at Youtube probabily spent weeks on refining to maximize ad money gains. That is seriously powerful2.\n2 It may be worth mentioning that you used to be able to do something very similar using UBlock Origin’s element picker. However, this extension has been effectively neutered on Chromium browsers (because Google dislikes ad-blockers), meaning you would only be able to make use of this functionality on Firefox and its derivatives.3 I prefer not being able to “doom-scroll”.A second, less striking example is simply removing stuff from sites that I don’t want to see. Much like the extensions I use to strip addictive features from Reddit and Youtube, I use Tampermonkey to remove elements from sites that don’t receive enough attention to have a dedicated extension. For example, I personally don’t care for the Trending section of Mastodon (called ‘Explore’), because you can’t run out of content to scroll there, unlike your home feed3. So I simply made a Tampermonkey script that removes the button for the Explore page on the Mastodon instance I use.\nSo essentially, every time you see a feature on a website that you don’t like, you can use Tampermonkey to remove it. Nice."
  },
  {
    "objectID": "blog/posts/duolingo2.html",
    "href": "blog/posts/duolingo2.html",
    "title": "How to survive Free-tier Duolingo",
    "section": "",
    "text": "Duolingo has been my preferred language learning app for over 5 years now, simply due to its impressive scale and thoughtful design. It is still the best app for language learning in my opinion, given you are aware of its limits and put in the work to overcome them. I’ve discussed the Pros and Cons of Duolingo, and its evolution over the years in my previous Duolingo post - so for more background read that post. One pain point I have with the app is that its creators are monetizing the app more and more in the pursuit of profitability as a publicly traded company. Unfortunately, as a long time user I have therefore witnessed multiple major changes that I believe have made the user experience worse (rather than better) in specific ways.\nIn its current state, Duolingo is challenging to use as a free user, somewhat contrasting Duolingo’s self-proclaimed mission to be “Universally accessible”. The reason you are more-or-ess obliged to pay ~84 USD a year to continue using the free service1 is simple. Duolingo has a “hearts” system in which you have a limited number of mistakes you can make before the app refuses to let you continue. Being booted out of a lesson is obviously an extremely frustrating experience that poses a real risk to your motivation for maintaining language learning ambitions. By default, you have 5 hearts, with one heart replenishing every 5 hours, and an option to perform practice lessons to replenish one heart for each. Should you run out of hearts during a lesson, your only options are to quit that lesson or pay 450 “Gems” to refill your hearts to 5. Being a premium user removes all need to worry about silly hearts.\n1 as a non “tech-savvy” user2 An otherwise great feature, that is now working against you!At first glance, it seems like there are fair amount of options for restoring hearts, doesn’t it? Well, there are a couple of problems here. First of all, the hearts system did not used to exist at all, suggesting to me that its main purpose is to push users towards premium. Secondly, Duolingo is not infallible, with tiny typos or alternative expressions potentially costing you hearts when you can’t afford to lose them. Third is the problem that gems are not that easily earned. You earn them for completing lessons and challenges, but the average user probably only earns 5-20 per day. Compare that to the 450 gem cost of replenishing hearts in a pinch - it’s not hard to see that you soon will be gems bankrupt (assuming you had any in the first place). Finally, if all of this was not enough, Duolingo has recently made a change on their app limiting how many hearts you can earn through practice lessons. On the mobile app, you are now only eligible for a single practice lesson at specific times. Since you will be broke for gems, your only realistic options are now: wait and risk not being able to continue your streak2, quit out of frustration, or pay.\nPutting on my cynic hat, I might speculate that since Duolingo’s exercises are personalized to the user, they could (and probably would) use their analytics to ensure that you regularly run out of hearts due to exercises that are just “a tad bit” out of reach for you. They would conceivably do this if they believe you would be likely to pay as a result. I would not be shocked to learn they already do this, as it would be very much in line with the other changes they have made to become more profitable.\nI bought the premium subscription for two years, but I have very mixed feelings about supporting Duolingo’s current business strategy. From what I gather, it feels as though their mission to make language learning universally accessible is being compromised, with their focus seemingly shifting towards more polished experiences that require much more funding.\nThis is why I asked myself what would it take to make the free-tier version of Duolingo sustainable in its current form? In essence, how can one maximize their learning within the contraints of Duolingo’s freemium model? I think you will find that what I suggest here will not only improve your sanity while using Duolingo, but also quite possibly your learning."
  },
  {
    "objectID": "blog/posts/duolingo2.html#why-write-this-post",
    "href": "blog/posts/duolingo2.html#why-write-this-post",
    "title": "How to survive Free-tier Duolingo",
    "section": "",
    "text": "Duolingo has been my preferred language learning app for over 5 years now, simply due to its impressive scale and thoughtful design. It is still the best app for language learning in my opinion, given you are aware of its limits and put in the work to overcome them. I’ve discussed the Pros and Cons of Duolingo, and its evolution over the years in my previous Duolingo post - so for more background read that post. One pain point I have with the app is that its creators are monetizing the app more and more in the pursuit of profitability as a publicly traded company. Unfortunately, as a long time user I have therefore witnessed multiple major changes that I believe have made the user experience worse (rather than better) in specific ways.\nIn its current state, Duolingo is challenging to use as a free user, somewhat contrasting Duolingo’s self-proclaimed mission to be “Universally accessible”. The reason you are more-or-ess obliged to pay ~84 USD a year to continue using the free service1 is simple. Duolingo has a “hearts” system in which you have a limited number of mistakes you can make before the app refuses to let you continue. Being booted out of a lesson is obviously an extremely frustrating experience that poses a real risk to your motivation for maintaining language learning ambitions. By default, you have 5 hearts, with one heart replenishing every 5 hours, and an option to perform practice lessons to replenish one heart for each. Should you run out of hearts during a lesson, your only options are to quit that lesson or pay 450 “Gems” to refill your hearts to 5. Being a premium user removes all need to worry about silly hearts.\n1 as a non “tech-savvy” user2 An otherwise great feature, that is now working against you!At first glance, it seems like there are fair amount of options for restoring hearts, doesn’t it? Well, there are a couple of problems here. First of all, the hearts system did not used to exist at all, suggesting to me that its main purpose is to push users towards premium. Secondly, Duolingo is not infallible, with tiny typos or alternative expressions potentially costing you hearts when you can’t afford to lose them. Third is the problem that gems are not that easily earned. You earn them for completing lessons and challenges, but the average user probably only earns 5-20 per day. Compare that to the 450 gem cost of replenishing hearts in a pinch - it’s not hard to see that you soon will be gems bankrupt (assuming you had any in the first place). Finally, if all of this was not enough, Duolingo has recently made a change on their app limiting how many hearts you can earn through practice lessons. On the mobile app, you are now only eligible for a single practice lesson at specific times. Since you will be broke for gems, your only realistic options are now: wait and risk not being able to continue your streak2, quit out of frustration, or pay.\nPutting on my cynic hat, I might speculate that since Duolingo’s exercises are personalized to the user, they could (and probably would) use their analytics to ensure that you regularly run out of hearts due to exercises that are just “a tad bit” out of reach for you. They would conceivably do this if they believe you would be likely to pay as a result. I would not be shocked to learn they already do this, as it would be very much in line with the other changes they have made to become more profitable.\nI bought the premium subscription for two years, but I have very mixed feelings about supporting Duolingo’s current business strategy. From what I gather, it feels as though their mission to make language learning universally accessible is being compromised, with their focus seemingly shifting towards more polished experiences that require much more funding.\nThis is why I asked myself what would it take to make the free-tier version of Duolingo sustainable in its current form? In essence, how can one maximize their learning within the contraints of Duolingo’s freemium model? I think you will find that what I suggest here will not only improve your sanity while using Duolingo, but also quite possibly your learning."
  },
  {
    "objectID": "blog/posts/duolingo2.html#improving-your-heart-health",
    "href": "blog/posts/duolingo2.html#improving-your-heart-health",
    "title": "How to survive Free-tier Duolingo",
    "section": "Improving your heart health",
    "text": "Improving your heart health\n\nPart 1: Making better use of the hearts you get\n\nSTOP using the app!!!1!!eleven!!3\nA little known fact about Duolingo is that their website is always at least a year behind the app on any “feature” introductions. Many things seemingly never make it to the web-app. The reason this is important for this guide is extremely simple: You can still do unlimited practice lessons on the website. This means that so long as you manage to finish lessons by the skin of your teeth, you can keep learning. The practice lessons are actually not bad, as they serve as revision of old content4.\n4 Weirdly, the practice lessons you get as a free-tier user are of much higher quality and less repetitive than the ones you get access to as a premium user…So the strategy is simple: Do a lesson, try to complete it with at least one heart, do practice lessons until you are topped up, repeat until you’re done learning for the day.\nDo note though, some things are not available on the website. For example, timed challenges. Luckily, these missing features are pretty insignificant anyway.\n\n\n\n3 Not using the mobile app for services that also have a website is a good idea in general because it is easier to modify websites.\nA tale of early birds and night owls\nDuolingo had a period where they rewarded you for checking in twice a day, by giving you temporary boosts to how much XP a lesson would award you. The way it worked was that if you did a lesson in the morning, you would become eligible for this boost later on in the day. If you did a lesson during this later “evening” stage you would get a boost available the next morning. This was actually a great system because you felt strongly incentivized to do lessons so that “future you” will feel good when it comes to the next practice time. It’s actually been my habit to do lessons twice a day ever since this existed.\nOf course, with the hearts systems mechanics, this habit is dually valuable. Firstly, doing lessons first thing in the morning is hands-down the best thing you can do. This is because your mind will be fresh and focused, resulting in less mistakes and a higher capacity to practice. Doing lessons in the late evening can be really hard simply due to being so fatigued at the end of your day. But establishing this evening habit as well lets you maximize your hearts since you will have “gained” up to two hearts since your morning practice.\nTherefore, the strategy now is: Do lessons primarily in the morning and then try to squeeze one or two more lessons into the evening to make sure you’re using those hearts as soon as they become available.\n\n\n\n\n\nPart 2: Preventing heart-aches\n\nBabble like the baby you are\nI have previously faulted Duolingo for having relatively few/poor speaking practice options. Therefore, if you are using Duolingo you should take matters into your own hands a bit more. One easy way to do this is to simply sound everything out loud during lessons. Not only does this help you get valuable pronunciation and speaking practice, it also clearly improves your retention, and makes you less likely to make mistakes. The reason you are less likely to make mistakes is that when you are sounding everything out loud, you are taking the lessons a bit slower. In other words, you are reading more carefully, and thus will avoid misinterpretation errors. A bit awkward a first, but doing this is basically a no-brainer if hearts are at stake!\n\n\n\n\nWork smarter, not harder\nAnother one of these little known features of Duolingo is that most of the time, you can either submit your answer for a given exercise, or hit the “skip” button. Pressing the skip button will reveal the solution to the question, and add the question to the back of the stack of lesson exercises, much like a mistake would. Unlike a mistake however, pressing skip will not cost you a heart. Thus, if you are unsure about how to spell something, what the word was, etc. you should make use of this.\n\n\n\n\n\n\n\n\nThe elusive skip button (bottom-left) in the wild\n\n\n\nOf course, you’re also not forbidden from opening another tab and translating answers you are foggy on. Language models are decent at fixing grammar and spelling errors. Remember, the goal is to not let Duolingo drain your gems wallet any more than strictly necessary because we need those gems for when you are having a rough day."
  },
  {
    "objectID": "blog/posts/duolingo2.html#hacking-duolingo",
    "href": "blog/posts/duolingo2.html#hacking-duolingo",
    "title": "How to survive Free-tier Duolingo",
    "section": "“Hacking” Duolingo",
    "text": "“Hacking” Duolingo\nTo be honest, following everything in Part 1 might still not be enough to make your net gem earnings positive. The reason we care so much about gems is that they are the only way to continue a lesson when you’re having a bad day. Having to abandon a lesson you struggled so hard on because you can’t afford to continue is really frustrating and may even lead you to quit all together.\nSo the next level is to use more advanced tools to help you.\nSince we are using the website, we can use browser extensions that modify how Duolingo works. There are a couple that are very recommendable. For our goals, one really stands out.\n\n\n\nAlmost essential: Duolingo Fast Mode\nDuolingo Fast Mode has almost no users, even though it makes free-tier Duolingo so much nicer. This extension gives you instant feedback while you are doing exercises, allowing you to know before you submit your answer whether it will be accepted. It will even help you notice if you are using the wrong word form. However, note that these suggestions are very picky, and will expect you to type out all punctuation and special characters!\n\n\n\n\n\n\n\n\nFast Mode helping me spot a typo before submitting (highlight just underneath Bea)\n\n\n\n\n\n\n\n\n\nFast Mode helping me realize I’m not using the right word\n\n\n\nSome other nice extensions include: Duoleavemealone, which will automatically skip through unnecessary screens during lessons, and Duolingo Solution Viewer, which provides additional information on what solutions would have been accepted whenever you do make a mistake.\nFinally, being a free user on Duolingo also means enduring tons of ads. So if you have not already, do yourself a favor and install an ad-blocker. Some useful information on ad-blockers and other essential web tools here."
  },
  {
    "objectID": "blog/posts/duolingo2.html#conclusion",
    "href": "blog/posts/duolingo2.html#conclusion",
    "title": "How to survive Free-tier Duolingo",
    "section": "Conclusion",
    "text": "Conclusion\nI hope this guide has successfully shown you how to make the most out of the free user experience on Duolingo. While some of these tips may appear like “cheating”, I actually believe the learning experience is either improved or at least not harmed by using them. You might find that the more “hacky” solutions are not necessary at the moment, but as a long time user I can tell you that they most likely will eventually be needed5. Good luck on your language learning journey!\n\n\n5 For reference, Duolingo initially promised they would not introduce the hearts system to their website, and yet here we are."
  },
  {
    "objectID": "blog/posts/degoogle.html",
    "href": "blog/posts/degoogle.html",
    "title": "Linux changed me",
    "section": "",
    "text": "My journey\nIn 2023, I went to a Cognitive Science summer-school. There, I spent a lot of the time between sessions with a roboticist who was really into Linux. Like most people who never seriously considered installing an operating system (OS) that did not come with my machine, I was pretty skeptical about the reliability of such obscure seeming software. However, what stuck with me from these conversations was something along the lines of “On Linux, you can remove everything you don’t like”. But I was not ready to take the leap quite yet.\nFast forward to about six months later, I had just installed the brand new Windows 11 on my laptop. I liked the new coat of paint, and felt like I was using the bleeding-edge of it all. However, after a bit more time with it, I grew increasingly annoyed with it. At least back then, Windows 11 had multiple “features” that provided recommendations I did not want but couldn’t fully turn off. This drove me nuts, and I kept thinking back to the roboticists’ ramblings - could jumping ship really be all that bad?\nAfter a bit of research, on a bored day after work, I took the plunge and installed Ubuntu, a specific version of Linux. While Ubuntu is not particularly remarkable, taking this step really changed how I thought about technology. Namely, it opened my eyes to a much more mindful consideration of the products I use. There is a real sense of freedom in “voting with your wallet” as Americans like to put it.\nWhat started with wanting to remove widgets I thought were annoying, quickly expanded into other areas. So today, I want to briefly list some alternatives you could consider if, for example, you are not too happy with whose pockets you are lining.\nFor the purposes of this list, I will assume you are not super duper techy. Just techy enough to follow installation instructions.\n\n\n\n\nPC operating system\nI started this post with my Linux journey, so let’s wrap this domain up.\nFor beginners, I’d probably recommend Linux Mint. It’s widely regarded as a super easy introduction where you will be able to do all of your daily tasks without running into problems.\nThere are two big things you should ask yourself before switching:\n\nIs my hardware supported?\nDo I use software critical for my job that is not available on Linux?\n\nThanks to the rise of web-apps, the second question is unlikely to be a huge problem unless your work is very technical.\n\n\n\n\nMobile operating system\nIf you happen to own a Google Pixel, you should consider Graphene OS.\nThere are some drawbacks to this though. There are a few apps that will not work or require some extra thinking on your part. In my experience, anything that requires location services can be a bit fiddly. NFC will probably not work. The banking app Revolut is known to be broken. If you don’t use these things much, feel free to go ahead. The installation of GrapheneOs feels a little scary, but is fairly straightforward. I’ve only had minor hick-ups over 3 years of use, which were all largely due to my own ignorance.\nThere are multiple other alternatives, but I feel they are unlikely to suit the needs of non-techy people. Perhaps try using your phone less in general?\n\n\n\n\nApp-store\nFor some things, you will need to use a big app store like Google Play.\nBut there are also tons of utilities that you could get from F-Droid.\nF-Droid is an alternative app-store where app developers have to ensure their apps are ad-free, free of charge, and make their code public. Remarkably, many developers agree to this largely out of philosophical conviction. There are some surprisingly good apps on here that might just be good enough for your purposes. So my suggestion would be to try to find something that works for you from F-Droid before downloading an app from Google Play.\nYou could also try to reduce your dependency on apps altogether.\n\n\n\n\nEmail, Calendar, Passwords, Cloud storage\nBe aware, migrating all of this takes some effort, as you may for example have to change the e-mail address associated with various accounts. On the bright side, you will hopefully only have to switch once.\nI think Proton services are the most convenient alternative here. A free-tier account may be sufficient for you.\nMake sure to forward email that arrives at your old account(s) to the new one so you don’t miss anything critical.\n\n\n\n\nMessaging\nThis is another tough category make a full switch on, since you need to convince others to switch too.\nSignal is likely the main alternative service popular enough where at least some of your contacts already have it.\nYou should probably at least have Signal installed, even if it’s just to allow Signal-curious friends to more easily switch too.\n\n\n\n\nBrowser and search engine\nFor normal people, I’d probably recommend switching to Brave.\nIt has state-of-the-art ad-blocking and I happily used their search engine for a long time.\nYou could also try Firefox and set your search engine to DuckDuckGo in the Search settings.\n\n\n\n\nSocial media\nI mostly use Social media to keep up with artists/creators, not to stay in touch with friends. If you are using it for maintaining friendships, maybe consider incorporating some of the tips from my post about apps, and browser extensions.\nIn case you use socials for similar reasons as me, I recently wrote about Mastodon, which I whole-heartedly recommend. See my post for details.\nDo be aware, curating your Mastodon feed is down to YOU, as there is no recommendation algorithm.\n\n\n\n\nMaps\nThis is a category people don’t tend to think about. However, you are with 99% probability either using Apple maps or Google Maps/Waze. Map services are remarkably concentrated.\nIf you’re looking for a switch, OsmAnd is your best bet.\nThere are some drawbacks. You have to download the maps for areas beforehand. Business information will not be as up to date as you are used to. As a result, you may have to search for a business online, and then paste the address into the app. Review information may also be lacking.\n\n\n\nAs you can see, going off the beaten track is a bit more effort. However, I hope you found at least one thing listed here that caught your interest. If you have more suggestions, I’d love to hear from you in the comments."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "Blog\nFollow my blog with RSS \n\n\n\n\n\n\n\n\n\n\nMy current ultra minimal phone\n\n\n\nphone\n\nsoftware\n\n\n\nSmall but mighty\n\n\n\nJul 27, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry dashboard\n\n\n\nr\n\n\n\nA shinylive experiment\n\n\n\nJun 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich countries are equipped to handle a storm?\n\n\n\nr\n\nlife\n\n\n\nLetting my inner hobby economist run loose\n\n\n\nJun 25, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLight and Dark mode PDFs for your Quarto website\n\n\n\nquarto\n\nwebdev\n\n\n\nHow I made my CV adapt to the theme of my site\n\n\n\nJun 15, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomizing the theme icon for Quarto websites\n\n\n\nquarto\n\nwebdev\n\n\n\nA quick-and-dirty guide\n\n\n\nJun 15, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to have theme-adaptive comment sections in Quarto websites\n\n\n\nquarto\n\nwebdev\n\n\n\nMaking the theme of Utterances change with the site theme\n\n\n\nJun 15, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nIs it even possible to avoid big-tech?\n\n\n\nsoftware\n\n\n\nA status update on my self-experiment\n\n\n\nMay 18, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow I find interesting blogs to follow\n\n\n\nrss\n\n\n\nMy super secret curated lists\n\n\n\nMay 11, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nHave we reached maximum click-bait yet?\n\n\n\nsocial media\n\n\n\nMy struggle with social media\n\n\n\nMay 11, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy is nature so disturbing?\n\n\n\nlife\n\n\n\nOn overthinking animal documentaries and human exceptionalism\n\n\n\nMay 4, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nMore awesome browser extensions\n\n\n\nextensions\n\n\n\nBetter PDFs, website navigation via keyboard, website code injection\n\n\n\nMay 3, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhether we have free will or not should be inconsequential\n\n\n\nphd\n\n\n\nScientific findings should not always influence institutional practice\n\n\n\nMay 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nBread in the USA\n\n\n\nphd\n\nlife\n\n\n\nAndere Länder, andere Sitten\n\n\n\nMay 2, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimplifying my site\n\n\n\nwebdev\n\n\n\nK.I.S.S.\n\n\n\nMay 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to remote control a Quarto presentation\n\n\n\nquarto\n\n\n\nAn intro to RevealJS with Multiplex\n\n\n\nApr 5, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nMy new favorite search engine\n\n\n\nsearch engines\n\nsoftware\n\n\n\nKagi has a lot to offer for power-users.\n\n\n\nMar 30, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinux changed me\n\n\n\nsoftware\n\nlinux\n\nphone\n\nsearch engines\n\n\n\nI’m more annoying now.\n\n\n\nFeb 22, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Mastodon is the only social network I use\n\n\n\nmastodon\n\nsocial media\n\n\n\nThe Fediverse is the true digital town square\n\n\n\nFeb 14, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to render Quarto websites faster\n\n\n\nquarto\n\nsoftware\n\ncode\n\n\n\nGit + Bash to speed up website updates\n\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to make VS Code look like Rstudio/Spyder\n\n\n\nsoftware\n\nvscode\n\n\n\nOptimizing VS Code for Data Science\n\n\n\nJan 24, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to survive Free-tier Duolingo\n\n\n\nsoftware\n\nduolingo\n\nextensions\n\n\n\nA guide for overcoming freemium limitations\n\n\n\nJan 23, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nVivaldi features: Personal Best-of\n\n\n\nsoftware\n\nvivaldi\n\n\n\nMy favorite features in the Vivaldi browser\n\n\n\nJan 5, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\nA day trip to Freiburg\n\n\n\ntravel\n\n\n\nMy first shot at a travel blog post\n\n\n\nDec 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nEssential tools to make the modern web more bearable\n\n\n\nextensions\n\nrss\n\n\n\nSome free tools I enjoy that you might too\n\n\n\nDec 28, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nStatistical Bouquets: My first venture into creative coding\n\n\n\nart\n\njulia\n\ncode\n\n\n\nRandom.jl + Distributions.jl + CairoMakie.jl = Flowers?\n\n\n\nDec 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuick Fix for Public WiFi on Linux\n\n\n\nlinux\n\n\n\nTrouble connecting? Here are some terminal commands to help you get online.\n\n\n\nDec 1, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nMy website template for you!\n\n\n\nwebdev\n\nquarto\n\n\n\nA simple template for getting started with Quarto websites\n\n\n\nNov 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nMath-Stats: Multiple Linear Regression\n\n\n\nstatistics\n\nmath\n\n\n\nSome notes on Multiple Linear Regression\n\n\n\nNov 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nMath-Stats: Simple Linear Regression\n\n\n\nstatistics\n\nmath\n\n\n\nLinear regression notes in RevealJS\n\n\n\nNov 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nMath-Stats: Properties of Expectation, Variance, and Covariance\n\n\n\nstatistics\n\nmath\n\n\n\nSome reflections and lecture notes\n\n\n\nOct 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaking Vivaldi even better\n\n\n\nsoftware\n\nvivaldi\n\n\n\nFixing small annoyances with mods\n\n\n\nOct 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to use R in Visual Studio Code - The Essentials\n\n\n\ncode\n\nr\n\nvscode\n\nquarto\n\nsoftware\n\n\n\nA guide to setting up R for Visual Studio Code\n\n\n\nOct 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nVivaldi is a strange browser\n\n\n\nsoftware\n\nvivaldi\n\n\n\nA discussion of odd design choices and my feature wishlist\n\n\n\nSep 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n2000+ days of Duolingo - Worth it?\n\n\n\nsoftware\n\nduolingo\n\n\n\nMy review after 5+ years of daily use\n\n\n\nSep 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nPhone less, without being phoneless\n\n\n\nsoftware\n\nphone\n\n\n\nSome simple tricks for cutting down\n\n\n\nAug 25, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to make a login portal for Quarto sites\n\n\n\nwebdev\n\nquarto\n\n\n\nPersonalized/Gated content on static websites\n\n\n\nAug 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nHabit tracking with Habitica - a quick tour\n\n\n\nsoftware\n\nhabitica\n\n\n\nTurn your life into a video-game? It’s less questionable than you think\n\n\n\nAug 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nA review of search engines\n\n\n\nsoftware\n\nsearch engines\n\n\n\nTo google or not to google, that is the question.\n\n\n\nAug 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy ‘Doom-scroll’, when there is RSS?\n\n\n\nsoftware\n\nrss\n\n\n\nA post about old technology that was ahead of its time\n\n\n\nAug 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Vivaldi is the least and most minimal browser at the same time\n\n\n\nsoftware\n\nvivaldi\n\n\n\nMy take on how to make a piece of maximalist software easy on the eyes\n\n\n\nAug 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Vivaldi is the least and most minimal browser at the same time\n\n\n\nsoftware\n\nvivaldi\n\n\n\nMy take on how to make a piece of maximalist software easy on the eyes\n\n\n\nAug 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to easily make a website for free\n\n\n\nwebdev\n\nquarto\n\n\n\nA jumpstart guide to creating websites with Quarto\n\n\n\nJul 28, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\nMy first DIY web-app\n\n\n\nwebdev\n\n\n\nJust a quick post to test the blog and briefly talk about my first ventures into JavaScript\n\n\n\nJul 21, 2024\n\n\n\n\n\n\nNo matching items\n\n  \n\n\nFollow my blog with RSS"
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About",
    "section": "",
    "text": "Code\nd3 = require(\"d3@7\")\ntopojson = require(\"topojson-client@3\")\n\n// Your location data by year\nlocationData = [\n  { year: 1998, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 1999, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2000, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2001, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2002, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2003, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2004, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2005, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2006, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2007, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2008, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2009, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2010, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2011, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2012, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2013, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2014, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2015, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2016, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2017, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2018, location: \"Stirling\", country: \"Scotland\", lat: 56.1165, lon: -3.9369 },\n  { year: 2019, location: \"Stirling\", country: \"Scotland\", lat: 56.1165, lon: -3.9369 },\n  { year: 2020, location: \"Stirling\", country: \"Scotland\", lat: 56.1165, lon: -3.9369 },\n  { year: 2021, location: \"Stirling\", country: \"Scotland\", lat: 56.1165, lon: -3.9369 },\n  { year: 2022, location: \"Royal Leamington Spa\", country: \"England\", lat: 52.2851, lon: -1.5364 },\n  { year: 2023, location: \"Bath\", country: \"England\", lat: 51.3751, lon: -2.3618 },\n  { year: 2024, location: \"Irvine\", country: \"USA\", lat: 33.6846, lon: -117.8265 },\n  { year: 2025, location: \"Irvine\", country: \"USA\", lat: 33.6846, lon: -117.8265 }\n]\n\n// Load world map data\nworld = {\n  const response = await fetch(\"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\");\n  return topojson.feature(await response.json(), \"countries\");\n}\n\n// Function to get current theme colors for timeline map\ngetTimelineThemeColors = () =&gt; {\n  const isDark = document.body.classList.contains('quarto-dark');\n\n  if (isDark) {\n    return {\n      landColor: \"#374151\", // gray-700\n      countryStroke: \"#6b7280\", // gray-500\n      futurePath: \"#60a5fa\", // blue-400\n      traveledPath: \"#f87171\", // red-400\n      currentMarker: \"#f87171\", // red-400\n      otherMarkers: \"#60a5fa\", // blue-400\n      markerStroke: \"#e5e7eb\", // gray-200\n      labelText: \"#f3f4f6\", // gray-100\n      labelBg: \"rgba(17, 24, 39, 0.8)\", // gray-900 with opacity\n      tooltipBg: \"rgba(17, 24, 39, 0.95)\", // gray-900 with opacity\n      tooltipText: \"#f3f4f6\", // gray-100\n      tooltipAccent: \"#fbbf24\", // amber-400\n      controlsBg: \"rgba(17, 24, 39, 0.8)\", // gray-900 with opacity\n      controlsText: \"#f3f4f6\", // gray-100\n      controlsButtonBg: \"rgba(75, 85, 99, 0.8)\", // gray-600 with opacity\n      sliderBg: \"rgba(17, 24, 39, 0.8)\", // gray-900 with opacity\n      sliderText: \"#f3f4f6\", // gray-100\n      sliderButtonBg: \"rgba(75, 85, 99, 0.8)\" // gray-600 with opacity\n    };\n  } else {\n    return {\n      landColor: \"#e5e7eb\", // gray-200\n      countryStroke: \"#9ca3af\", // gray-400\n      futurePath: \"#3b82f6\", // blue-500\n      traveledPath: \"#ef4444\", // red-500\n      currentMarker: \"#ef4444\", // red-500\n      otherMarkers: \"#3b82f6\", // blue-500\n      markerStroke: \"#374151\", // gray-700\n      labelText: \"#374151\", // gray-700\n      labelBg: \"rgba(255, 255, 255, 0.9)\", // white with opacity\n      tooltipBg: \"rgba(255, 255, 255, 0.95)\", // white with opacity\n      tooltipText: \"#374151\", // gray-700\n      tooltipAccent: \"#f59e0b\", // amber-500\n      controlsBg: \"rgba(255, 255, 255, 0.9)\", // white with opacity\n      controlsText: \"#374151\", // gray-700\n      controlsButtonBg: \"rgba(243, 244, 246, 0.8)\", // gray-100 with opacity\n      sliderBg: \"rgba(255, 255, 255, 0.9)\", // white with opacity\n      sliderText: \"#374151\", // gray-700\n      sliderButtonBg: \"rgba(243, 244, 246, 0.8)\" // gray-100 with opacity\n    };\n  }\n}\n\n// Theme-adaptive year selector with buttons\nviewof selectedYear = {\n  const MIN_YEAR = 1998;\n  const MAX_YEAR = 2025;\n  const DEFAULT_YEAR = 2025;\n\n  const colors = getTimelineThemeColors();\n\n  const container = html`&lt;div style=\"display: flex; flex-direction: column; width: 100%;\"&gt;\n    &lt;div style=\"display: flex; align-items: center; margin-bottom: 8px;\"&gt;\n      &lt;button id=\"prev-year\" style=\"\n        background: ${colors.sliderButtonBg}; \n        color: ${colors.sliderText}; \n        border: 1px solid ${colors.countryStroke}; \n        border-radius: 4px; \n        padding: 4px 8px; \n        margin-right: 10px;\n        cursor: pointer;\n        font-size: 16px;\n        width: 36px;\n      \"&gt;◀&lt;/button&gt;\n      &lt;div style=\"flex-grow: 1; text-align: center; color: ${colors.sliderText}; font-size: 16px;\"&gt;\n        Year: &lt;span id=\"year-display\"&gt;${DEFAULT_YEAR}&lt;/span&gt;\n      &lt;/div&gt;\n      &lt;button id=\"next-year\" style=\"\n        background: ${colors.sliderButtonBg}; \n        color: ${colors.sliderText}; \n        border: 1px solid ${colors.countryStroke}; \n        border-radius: 4px; \n        padding: 4px 8px; \n        margin-left: 10px;\n        cursor: pointer;\n        font-size: 16px;\n        width: 36px;\n      \"&gt;▶&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;input type=\"range\" id=\"year-slider\" min=\"${MIN_YEAR}\" max=\"${MAX_YEAR}\" step=\"1\" value=\"${DEFAULT_YEAR}\" style=\"width: 100%; accent-color: ${colors.traveledPath};\"&gt;\n  &lt;/div&gt;`;\n\n  const slider = container.querySelector(\"#year-slider\");\n  const display = container.querySelector(\"#year-display\");\n  const prevBtn = container.querySelector(\"#prev-year\");\n  const nextBtn = container.querySelector(\"#next-year\");\n\n  let value = DEFAULT_YEAR;\n\n  // Function to update colors based on theme\n  const updateColors = () =&gt; {\n    const currentColors = getTimelineThemeColors();\n    prevBtn.style.background = currentColors.sliderButtonBg;\n    prevBtn.style.color = currentColors.sliderText;\n    prevBtn.style.borderColor = currentColors.countryStroke;\n    nextBtn.style.background = currentColors.sliderButtonBg;\n    nextBtn.style.color = currentColors.sliderText;\n    nextBtn.style.borderColor = currentColors.countryStroke;\n    display.parentElement.style.color = currentColors.sliderText;\n    slider.style.accentColor = currentColors.traveledPath;\n  };\n\n  // Function to update everything\n  const updateYear = (year) =&gt; {\n    year = Math.max(MIN_YEAR, Math.min(MAX_YEAR, year));\n    value = year;\n    slider.value = year;\n    display.textContent = year;\n\n    // Update button states\n    prevBtn.disabled = year &lt;= MIN_YEAR;\n    prevBtn.style.opacity = year &lt;= MIN_YEAR ? \"0.5\" : \"1\";\n    nextBtn.disabled = year &gt;= MAX_YEAR;\n    nextBtn.style.opacity = year &gt;= MAX_YEAR ? \"0.5\" : \"1\";\n\n    container.dispatchEvent(new CustomEvent(\"input\"));\n  };\n\n  // Update when slider changes\n  slider.oninput = () =&gt; {\n    updateYear(parseInt(slider.value));\n  };\n\n  // Previous year button\n  prevBtn.onclick = () =&gt; {\n    updateYear(value - 1);\n  };\n\n  // Next year button\n  nextBtn.onclick = () =&gt; {\n    updateYear(value + 1);\n  };\n\n  // Add keyboard navigation\n  container.tabIndex = 0;\n  container.style.outline = \"none\";\n  container.addEventListener(\"keydown\", (event) =&gt; {\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault();\n      updateYear(value - 1);\n    } else if (event.key === \"ArrowRight\") {\n      event.preventDefault();\n      updateYear(value + 1);\n    }\n  });\n\n  // Listen for theme changes\n  const observer = new MutationObserver(() =&gt; {\n    updateColors();\n  });\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  });\n\n  // Initialize\n  updateYear(DEFAULT_YEAR);\n  updateColors();\n\n  // Define getter for Observable\n  Object.defineProperty(container, \"value\", {\n    get: () =&gt; value\n  });\n\n  return container;\n}\n\n// Current location based on selected year\ncurrentLocation = locationData.find(d =&gt; d.year === selectedYear)\n\n// Create a theme-adaptive tooltip element\ntooltip = {\n  const colors = getTimelineThemeColors();\n\n  const div = html`&lt;div style=\"\n    position: absolute;\n    background: ${colors.tooltipBg};\n    border: 1px solid ${colors.countryStroke};\n    border-radius: 5px;\n    padding: 10px;\n    pointer-events: none;\n    opacity: 0;\n    transition: opacity 0.2s;\n    z-index: 1000;\n    font-family: sans-serif;\n    font-size: 14px;\n    max-width: 200px;\n    color: ${colors.tooltipText};\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\n  \"&gt;&lt;/div&gt;`;\n\n  document.body.appendChild(div);\n\n  // Function to update tooltip colors\n  const updateTooltipColors = () =&gt; {\n    const currentColors = getTimelineThemeColors();\n    div.style.background = currentColors.tooltipBg;\n    div.style.borderColor = currentColors.countryStroke;\n    div.style.color = currentColors.tooltipText;\n  };\n\n  // Listen for theme changes\n  const observer = new MutationObserver(() =&gt; {\n    updateTooltipColors();\n  });\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  });\n\n  return div;\n}\n\n// Theme-adaptive map visualization\nmapVisualization = {\n  const colors = getTimelineThemeColors();\n\n  // Set up dimensions and projection\n  const width = 900;\n  const height = 500;\n\n  // Create a projection focused on US and Europe\n  const projection = d3.geoMercator()\n    .center([-40, 45])\n    .scale(250)\n    .translate([width / 2, height / 2]);\n\n  // Create path generator\n  const path = d3.geoPath().projection(projection);\n\n  // Create SVG\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto;\");\n\n  // Add ocean background\n  svg.append(\"rect\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"fill\", \"none\");\n\n  // Create a group for all map elements\n  const g = svg.append(\"g\");\n\n  // Draw countries\n  const countries = g.append(\"g\")\n    .selectAll(\"path\")\n    .data(world.features)\n    .join(\"path\")\n    .attr(\"fill\", colors.landColor)\n    .attr(\"stroke\", colors.countryStroke)\n    .attr(\"stroke-width\", 0.5)\n    .attr(\"d\", path);\n\n  // Get unique locations to avoid drawing the same point multiple times\n  const uniqueLocations = Array.from(\n    new Map(locationData.map(d =&gt; [`${d.lat},${d.lon}`, d])).values()\n  ).sort((a, b) =&gt; a.year - b.year);\n\n  // Draw path lines connecting unique locations\n  const lineGenerator = d3.line()\n    .x(d =&gt; projection([d.lon, d.lat])[0])\n    .y(d =&gt; projection([d.lon, d.lat])[1])\n    .curve(d3.curveCardinal.tension(0.5));\n\n  // Draw the complete path \n  const futurePath = g.append(\"path\")\n    .attr(\"d\", lineGenerator(uniqueLocations))\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", colors.futurePath)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke-dasharray\", \"5,5\")\n    .attr(\"opacity\", 0.7);\n\n  // Highlight the path traveled up to the current year\n  const currentYearIndex = uniqueLocations.findIndex(d =&gt; {\n    const locationsAtThisPoint = locationData.filter(loc =&gt; \n      loc.lat === d.lat && loc.lon === d.lon\n    );\n    const years = locationsAtThisPoint.map(loc =&gt; loc.year);\n    const minYear = Math.min(...years);\n    return selectedYear &lt; minYear;\n  });\n\n  let traveledPathIndex;\n  if (currentYearIndex === -1) {\n    traveledPathIndex = uniqueLocations.length;\n  } else if (currentYearIndex === 0) {\n    traveledPathIndex = 0;\n  } else {\n    traveledPathIndex = currentYearIndex;\n  }\n\n  // Draw traveled path\n  let traveledPath = null;\n  if (traveledPathIndex &gt; 0) {\n    const traveledPathData = uniqueLocations.slice(0, traveledPathIndex);\n    traveledPath = g.append(\"path\")\n      .attr(\"d\", lineGenerator(traveledPathData))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", colors.traveledPath)\n      .attr(\"stroke-width\", 3)\n      .attr(\"opacity\", 0.9);\n  }\n\n  // Create a group for markers and labels\n  const markersGroup = g.append(\"g\");\n\n  // Get unique locations for markers\n  const markerLocations = Array.from(\n    new Map(locationData.map(d =&gt; [`${d.lat},${d.lon}`, d])).values()\n  );\n\n  // Draw all locations as markers\n  const markers = markersGroup.selectAll(\"circle\")\n    .data(markerLocations)\n    .join(\"circle\")\n    .attr(\"cx\", d =&gt; projection([d.lon, d.lat])[0])\n    .attr(\"cy\", d =&gt; projection([d.lon, d.lat])[1])\n    .attr(\"r\", d =&gt; {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n      return isCurrentLocation ? 8 : 4;\n    })\n    .attr(\"fill\", d =&gt; {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n      return isCurrentLocation ? colors.currentMarker : colors.otherMarkers;\n    })\n    .attr(\"stroke\", colors.markerStroke)\n    .attr(\"stroke-width\", d =&gt; {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n      return isCurrentLocation ? 2 : 1;\n    })\n    .attr(\"opacity\", d =&gt; {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n      return isCurrentLocation ? 1 : 0.7;\n    })\n    .on(\"mouseover\", function(event, d) {\n      const locYears = locationData\n        .filter(loc =&gt; loc.lat === d.lat && loc.lon === d.lon)\n        .map(loc =&gt; loc.year);\n\n      const yearRanges = [];\n      let start = locYears[0];\n      let end = locYears[0];\n\n      for (let i = 1; i &lt; locYears.length; i++) {\n        if (locYears[i] === end + 1) {\n          end = locYears[i];\n        } else {\n          yearRanges.push(start === end ? `${start}` : `${start}-${end}`);\n          start = end = locYears[i];\n        }\n      }\n      yearRanges.push(start === end ? `${start}` : `${start}-${end}`);\n\n      d3.select(this)\n        .attr(\"r\", 12)\n        .attr(\"stroke-width\", 3);\n\n      const currentColors = getTimelineThemeColors();\n      tooltip.innerHTML = `\n        &lt;strong style=\"color: ${currentColors.tooltipAccent};\"&gt;${d.location}, ${d.country}&lt;/strong&gt;&lt;br/&gt;\n        Years: ${yearRanges.join(\", \")}&lt;br/&gt;\n        Coordinates: ${d.lat.toFixed(2)}, ${d.lon.toFixed(2)}\n      `;\n\n      tooltip.style.opacity = \"1\";\n      tooltip.style.left = (event.pageX + 15) + \"px\";\n      tooltip.style.top = (event.pageY - 28) + \"px\";\n    })\n    .on(\"mouseout\", function(event, d) {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n\n      d3.select(this)\n        .attr(\"r\", isCurrentLocation ? 8 : 4)\n        .attr(\"stroke-width\", isCurrentLocation ? 2 : 1);\n\n      tooltip.style.opacity = \"0\";\n    })\n    .on(\"mousemove\", function(event) {\n      tooltip.style.left = (event.pageX + 15) + \"px\";\n      tooltip.style.top = (event.pageY - 28) + \"px\";\n    });\n\n  // Add label for current location\n  let currentLocationLabel = null;\n  let currentLocationBg = null;\n\n  if (currentLocation) {\n    const [x, y] = projection([currentLocation.lon, currentLocation.lat]);\n\n    currentLocationBg = markersGroup.append(\"rect\")\n      .attr(\"x\", x + 10)\n      .attr(\"y\", y - 15)\n      .attr(\"width\", `${currentLocation.location.length * 8 + 30}px`)\n      .attr(\"height\", \"22px\")\n      .attr(\"fill\", colors.labelBg)\n      .attr(\"rx\", 3)\n      .attr(\"ry\", 3);\n\n    currentLocationLabel = markersGroup.append(\"text\")\n      .attr(\"x\", x + 12)\n      .attr(\"y\", y)\n      .text(`${currentLocation.location} (${currentLocation.year})`)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", \"14px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", colors.labelText);\n  }\n\n  // Add zoom controls\n  const zoomControls = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width - 70}, 20)`);\n\n  // Zoom in button\n  const zoomInButton = zoomControls.append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.countryStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; zoom.scaleBy(svg.transition().duration(300), 1.5));\n\n  const zoomInText = zoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.controlsText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"+\");\n\n  // Zoom out button\n  const zoomOutButton = zoomControls.append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 40)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.countryStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; zoom.scaleBy(svg.transition().duration(300), 0.75));\n\n  const zoomOutText = zoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 60)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.controlsText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"−\");\n\n  // Reset button\n  const resetButton = zoomControls.append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 80)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.countryStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", resetZoom);\n\n  const resetText = zoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 100)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.controlsText)\n    .attr(\"font-size\", \"14px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"R\");\n\n  // Function to update all colors based on current theme\n  function updateMapColors() {\n    const currentColors = getTimelineThemeColors();\n\n    // Update countries\n    countries\n      .attr(\"fill\", currentColors.landColor)\n      .attr(\"stroke\", currentColors.countryStroke);\n\n    // Update paths\n    futurePath.attr(\"stroke\", currentColors.futurePath);\n    if (traveledPath) {\n      traveledPath.attr(\"stroke\", currentColors.traveledPath);\n    }\n\n    // Update markers\n    markers\n      .attr(\"fill\", d =&gt; {\n        const isCurrentLocation = locationData.some(loc =&gt; \n          loc.year === selectedYear && \n          loc.lat === d.lat && \n          loc.lon === d.lon\n        );\n        return isCurrentLocation ? currentColors.currentMarker : currentColors.otherMarkers;\n      })\n      .attr(\"stroke\", currentColors.markerStroke);\n\n    // Update labels\n    if (currentLocationBg) {\n      currentLocationBg.attr(\"fill\", currentColors.labelBg);\n    }\n    if (currentLocationLabel) {\n      currentLocationLabel.attr(\"fill\", currentColors.labelText);\n    }\n\n    // Update controls\n    zoomInButton.attr(\"fill\", currentColors.controlsButtonBg).attr(\"stroke\", currentColors.countryStroke);\n    zoomOutButton.attr(\"fill\", currentColors.controlsButtonBg).attr(\"stroke\", currentColors.countryStroke);\n    resetButton.attr(\"fill\", currentColors.controlsButtonBg).attr(\"stroke\", currentColors.countryStroke);\n    zoomInText.attr(\"fill\", currentColors.controlsText);\n    zoomOutText.attr(\"fill\", currentColors.controlsText);\n    resetText.attr(\"fill\", currentColors.controlsText);\n  }\n\n  // Define zoom behavior\n  const zoom = d3.zoom()\n    .scaleExtent([0.5, 8])\n    .on(\"zoom\", zoomed);\n\n  function zoomed(event) {\n    g.attr(\"transform\", event.transform);\n    const strokeScale = 1 / Math.sqrt(event.transform.k);\n    g.selectAll(\"path\").attr(\"stroke-width\", 0.5 * strokeScale);\n\n    markersGroup.selectAll(\"circle\").each(function(d) {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n\n      d3.select(this)\n        .attr(\"r\", (isCurrentLocation ? 8 : 4) * strokeScale)\n        .attr(\"stroke-width\", (isCurrentLocation ? 2 : 1) * strokeScale);\n    });\n  }\n\n  function resetZoom() {\n    svg.transition().duration(750).call(\n      zoom.transform,\n      d3.zoomIdentity\n    );\n  }\n\n  // Enable zoom and pan on the SVG\n  svg.call(zoom);\n\n  // Listen for theme changes and update colors accordingly\n  const observer = new MutationObserver(() =&gt; {\n    updateMapColors();\n  });\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  });\n\n  return svg.node();\n}\n\n// Display the map\nmapVisualization;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHi, I’m Luke, or more formally Lukas. I’m a German national with dual citizenship in the US. I was born in Wisconsin, USA but grew up in the greater Stuttgart area (Germany), which is known for its car industry and the Swabian dialect.\n\n\n\n\n\nReutlingen, Germany - Credit\n\n\n\n\n\nStuttgart, Germany - Credit\n\n\nAfter a brief stint working in a closed psychiatric ward at my local university hospital in Tübingen, I decided to pursue undergraduate education at a small university in beautiful Scotland.\n\n\n\n\n\nTübingen, Germany - Credit: Westend61/Getty Images\n\n\n\n\n\nStirling, Scotland - Credit\n\n\nDespite my initial ambitions to pursue a career in clinical psychology, I discovered my analytical side when I was introduced to computer programming by a PhD student in the lab I was helping out in. I got very lucky in this regard as just prior to graduating, I was offered a summer internship at a London-based Data-Science consultancy. I enjoyed the work as it offered diverse problems to solve from different clients, but ultimately I felt that I should also seek formal education in data analytics.\nThe Behavioral and Data Science M.Sc. at the University of Warwick was very much the perfect fit for me, as it combined my interest in behavioral research with my newfound passion for select topics in Computer Science. It was at Warwick where I first came to appreciate the application of computational modelling to describe cognitive processes. This was when things “clicked” in my head, and I knew that I wanted to pursue a PhD in this area.\n\n\n\n\n\nRoyal Leamington Spa, England - Credit\n\n\nI spent a very fun year working in the Applied Digital Behavior Lab at the University of Bath while preparing my PhD applications and was fortunate to be accepted into the Cognitive Science PhD program at the University of California, Irvine, where I am currently working in Mark Steyvers’ lab.\n\n\n\n\n\nBath, England - Credit: Ian Woolcock — Shutterstock\n\n\n\n\n\nUniversity of California, Irvine, USA - Credit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1. Exercise\n\n\n\n\n\nI’ve always been pretty active, but when I was younger I somehow never really stuck with any particular sport for too long. To give you an idea, I’ve had a phase for: archery, badminton, Crossfit, golf, parkour, powerlifting, and skateboarding. I’m still interested in strength training, which I have been doing in some form for 10+ years, and badminton. I have limited means to engage with these in an organized format at the moment, so to fill the hole in my heart, I’ve been investing some time to figure out the perfect home gym setup that still fits inside my bedroom. I think I’ve been pretty successful with this, so maybe I’ll show it off in a post sometime.\n\n\n\n\n\n\n\n\n\n2. Technology\n\n\n\n\n\nI like GNU/Linux, and use it as my everyday operating system. At the moment, my laptop runs Debian with KDE. I’ve also played around with operating systems on mobile devices, currently using GrapheneOS. I enjoy coding, and wish I could do it more! My favorite languages at the moment are Julia, R, and Python. As you can see, I’ve also taken an interest in web development. While Quarto admittedly makes this website pretty easy to create, I also use web development in my research to create experiments that run in a browser. I’m super interested in picking up creative coding and I am hoping to eventually generate some art that I can post on here! :)\n\n\n\n\n\n\n\n\n\n3. Languages\n\n\n\n\n\nEnglish used to be my first language as I only started learning German after relocating to the Länd at age six. Fast-forward to now, English has become my second language. Maybe because of this strange experience, I’ve had a bit of an interest in language-learning. I have a habit of doing language lessons for fun on Duolingo, where I have a streak of over 2000 days. I’m mostly learning French and Dutch at the moment. My Dutch is definitely better than my French, probably just by virtue of being so similar to German, but both are good enough to follow a YouTube video. I hope to eventually move away from Duolingo and bring my skills to the next level, but don’t feel I have the bandwidth for it just now. If you know a good free resource, be sure to let me know!\n\n\n\n\n\n\n\n\n\n4. Gaming\n\n\n\n\n\nI was quite the avid gamer as a teen, spending countless hours on the likes of Team Fortress 2, Minecraft and Guild Wars 2. I don’t actively play much these days, but I still like to keep up with the industry. Perhaps I’m just waiting for the next big thing to come along. I also really enjoy going to board game cafés and completing escape rooms with friends!\n\n\n\n\n\n\n\n\n\nCode\nd3Highlight = require(\"d3@7\")\ntopoHighlight = require(\"topojson-client@3\")\n\n// Your list of visited countries\ncountriesVisited = [\n  \"Germany\", \"France\", \"USA\", \"Spain\", \"Italy\", \"Austria\", \n  \"Switzerland\", \"Netherlands\", \"Belgium\", \"San Marino\", \n  \"Vatican\", \"Malta\", \"Monaco\", \"United Kingdom\", \"Hungary\",\n]\n\n// Load world map data with a unique variable name\nworldGeoData = {\n  const response = await fetch(\"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\");\n  return topoHighlight.feature(await response.json(), \"countries\");\n}\n\n// Function to get current theme colors\ngetThemeColors = () =&gt; {\n  const isDark = document.body.classList.contains('quarto-dark');\n\n  if (isDark) {\n    return {\n      visitedColor: \"#00a653\",\n      notVisitedColor: \"#374151\", // gray-700 equivalent\n      strokeColor: \"#6b7280\", // gray-500 equivalent\n      strokeHoverColor: \"#ffffff\",\n      tooltipBg: \"rgba(17, 24, 39, 0.95)\", // gray-900 with opacity\n      tooltipText: \"#ffffff\",\n      legendBg: \"rgba(17, 24, 39, 0.8)\",\n      legendText: \"#ffffff\",\n      controlsBg: \"rgba(17, 24, 39, 0.8)\",\n      controlsButtonBg: \"rgba(75, 85, 99, 0.8)\", // gray-600 with opacity\n      controlsButtonStroke: \"#9ca3af\" // gray-400\n    };\n  } else {\n    return {\n      visitedColor: \"#00a653\",\n      notVisitedColor: \"#e5e7eb\", // gray-200 equivalent\n      strokeColor: \"#9ca3af\", // gray-400 equivalent\n      strokeHoverColor: \"#374151\",\n      tooltipBg: \"rgba(255, 255, 255, 0.95)\",\n      tooltipText: \"#374151\",\n      legendBg: \"rgba(255, 255, 255, 0.9)\",\n      legendText: \"#374151\",\n      controlsBg: \"rgba(255, 255, 255, 0.9)\",\n      controlsButtonBg: \"rgba(243, 244, 246, 0.8)\", // gray-100 with opacity\n      controlsButtonStroke: \"#d1d5db\" // gray-300\n    };\n  }\n}\n\n// Map visualization with theme-adaptive colors\nhighlightedCountriesMap = {\n  const colors = getThemeColors();\n\n  // Set up dimensions and projection\n  const mapWidth = 900;\n  const mapHeight = 500;\n\n  // Create a projection focused on the world\n  const mapProjection = d3Highlight.geoMercator()\n    .center([10, 45])\n    .scale(150)\n    .translate([mapWidth / 2, mapHeight / 2]);\n\n  // Create path generator\n  const mapPath = d3Highlight.geoPath().projection(mapProjection);\n\n  // Create SVG with transparent background\n  const mapSvg = d3Highlight.create(\"svg\")\n    .attr(\"width\", mapWidth)\n    .attr(\"height\", mapHeight)\n    .attr(\"viewBox\", [0, 0, mapWidth, mapHeight])\n    .attr(\"style\", \"max-width: 100%; height: auto; background: none;\");\n\n  // Create a group for all map elements\n  const mapGroup = mapSvg.append(\"g\");\n\n  // Create a tooltip\n  const mapTooltip = d3Highlight.select(document.createElement(\"div\"))\n    .attr(\"class\", \"highlight-map-tooltip\")\n    .style(\"position\", \"absolute\")\n    .style(\"background\", colors.tooltipBg)\n    .style(\"color\", colors.tooltipText)\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"8px\")\n    .style(\"pointer-events\", \"none\")\n    .style(\"opacity\", 0)\n    .style(\"z-index\", 1000)\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"14px\");\n\n  document.body.appendChild(mapTooltip.node());\n\n  // Country name mapping for special cases\n  const countryNameMap = {\n    \"United States of America\": \"USA\",\n    \"United States\": \"USA\",\n    \"Holy See\": \"Vatican\",\n    \"Vatican City\": \"Vatican\",\n    \"Vatican\": \"Vatican\",\n    \"San Marino\": \"San Marino\"\n  };\n\n  // Function to update map colors based on current theme\n  function updateMapColors() {\n    const currentColors = getThemeColors();\n\n    // Update country colors\n    mapGroup.selectAll(\"path\")\n      .attr(\"fill\", d =&gt; {\n        const countryName = d.properties.name;\n        const normalizedName = countryNameMap[countryName] || countryName;\n        return countriesVisited.includes(normalizedName) ? currentColors.visitedColor : currentColors.notVisitedColor;\n      })\n      .attr(\"stroke\", currentColors.strokeColor);\n\n    // Update tooltip colors\n    mapTooltip\n      .style(\"background\", currentColors.tooltipBg)\n      .style(\"color\", currentColors.tooltipText);\n\n    // Update legend colors\n    mapLegend.select(\".legend-bg\")\n      .attr(\"fill\", currentColors.legendBg);\n\n    mapLegend.selectAll(\".legend-text\")\n      .style(\"fill\", currentColors.legendText);\n\n    // Update control colors\n    mapZoomControls.select(\".controls-bg\")\n      .attr(\"fill\", currentColors.controlsBg);\n\n    mapZoomControls.selectAll(\".control-button\")\n      .attr(\"fill\", currentColors.controlsButtonBg)\n      .attr(\"stroke\", currentColors.controlsButtonStroke);\n  }\n\n  // Draw countries\n  const countries = mapGroup.selectAll(\"path\")\n    .data(worldGeoData.features)\n    .join(\"path\")\n    .attr(\"fill\", d =&gt; {\n      const countryName = d.properties.name;\n      const normalizedName = countryNameMap[countryName] || countryName;\n      return countriesVisited.includes(normalizedName) ? colors.visitedColor : colors.notVisitedColor;\n    })\n    .attr(\"stroke\", colors.strokeColor)\n    .attr(\"stroke-width\", 0.5)\n    .attr(\"d\", mapPath)\n    .on(\"mouseover\", function(event, d) {\n      const currentColors = getThemeColors();\n      d3Highlight.select(this).attr(\"stroke-width\", 1.5).attr(\"stroke\", currentColors.strokeHoverColor);\n\n      const countryName = d.properties.name;\n      const normalizedName = countryNameMap[countryName] || countryName;\n      const isVisited = countriesVisited.includes(normalizedName);\n\n      mapTooltip\n        .style(\"opacity\", 1)\n        .html(`&lt;strong&gt;${countryName}&lt;/strong&gt;&lt;br/&gt;${isVisited ? \"✓ Visited\" : \"Not visited\"}`)\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 28) + \"px\");\n    })\n    .on(\"mouseout\", function() {\n      const currentColors = getThemeColors();\n      d3Highlight.select(this).attr(\"stroke-width\", 0.5).attr(\"stroke\", currentColors.strokeColor);\n      mapTooltip.style(\"opacity\", 0);\n    })\n    .on(\"mousemove\", function(event) {\n      mapTooltip\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 28) + \"px\");\n    });\n\n  // Add a legend\n  const mapLegend = mapSvg.append(\"g\")\n    .attr(\"transform\", `translate(20, ${mapHeight - 60})`);\n\n  // Background for legend\n  mapLegend.append(\"rect\")\n    .attr(\"class\", \"legend-bg\")\n    .attr(\"x\", -5)\n    .attr(\"y\", -15)\n    .attr(\"width\", 120)\n    .attr(\"height\", 70)\n    .attr(\"fill\", colors.legendBg)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5);\n\n  // Visited countries legend\n  mapLegend.append(\"rect\")\n    .attr(\"width\", 20)\n    .attr(\"height\", 20)\n    .attr(\"fill\", colors.visitedColor);\n\n  mapLegend.append(\"text\")\n    .attr(\"class\", \"legend-text\")\n    .attr(\"x\", 30)\n    .attr(\"y\", 15)\n    .text(\"Visited\")\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"14px\")\n    .style(\"fill\", colors.legendText);\n\n  // Not visited countries legend\n  mapLegend.append(\"rect\")\n    .attr(\"width\", 20)\n    .attr(\"height\", 20)\n    .attr(\"y\", 30)\n    .attr(\"fill\", colors.notVisitedColor);\n\n  mapLegend.append(\"text\")\n    .attr(\"class\", \"legend-text\")\n    .attr(\"x\", 30)\n    .attr(\"y\", 45)\n    .text(\"Not Visited\")\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"14px\")\n    .style(\"fill\", colors.legendText);\n\n  // Add zoom controls\n  const mapZoomControls = mapSvg.append(\"g\")\n    .attr(\"transform\", `translate(${mapWidth - 70}, 20)`);\n\n  // Background for zoom controls\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"controls-bg\")\n    .attr(\"x\", -5)\n    .attr(\"y\", -5)\n    .attr(\"width\", 40)\n    .attr(\"height\", 120)\n    .attr(\"fill\", colors.controlsBg)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5);\n\n  // Zoom in button\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"control-button\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.controlsButtonStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; mapZoomBehavior.scaleBy(mapSvg.transition().duration(300), 1.5));\n\n  mapZoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.legendText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"+\");\n\n  // Zoom out button\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"control-button\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 40)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.controlsButtonStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; mapZoomBehavior.scaleBy(mapSvg.transition().duration(300), 0.75));\n\n  mapZoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 60)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.legendText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"−\");\n\n  // Reset button\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"control-button\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 80)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.controlsButtonStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", resetMapZoom);\n\n  mapZoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 100)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.legendText)\n    .attr(\"font-size\", \"14px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"R\");\n\n  // Define zoom behavior\n  const mapZoomBehavior = d3Highlight.zoom()\n    .scaleExtent([1, 8])\n    .on(\"zoom\", mapZoomed);\n\n  function mapZoomed(event) {\n    mapGroup.attr(\"transform\", event.transform);\n    const mapStrokeScale = 1 / Math.sqrt(event.transform.k);\n    mapGroup.selectAll(\"path\").attr(\"stroke-width\", 0.5 * mapStrokeScale);\n  }\n\n  function resetMapZoom() {\n    mapSvg.transition().duration(750).call(\n      mapZoomBehavior.transform,\n      d3Highlight.zoomIdentity\n    );\n  }\n\n  // Enable zoom and pan on the SVG\n  mapSvg.call(mapZoomBehavior);\n\n  // Listen for theme changes and update colors accordingly\n  const observer = new MutationObserver(() =&gt; {\n    updateMapColors();\n  });\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  });\n\n  return mapSvg.node();\n}\n\n// Display the map\nhighlightedCountriesMap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI have also visited a few micro-states including: Malta, Monaco, San Marino, and the Vatican."
  },
  {
    "objectID": "about/index.html#short-bio",
    "href": "about/index.html#short-bio",
    "title": "About",
    "section": "",
    "text": "Code\nd3 = require(\"d3@7\")\ntopojson = require(\"topojson-client@3\")\n\n// Your location data by year\nlocationData = [\n  { year: 1998, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 1999, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2000, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2001, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2002, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2003, location: \"Racine\", country: \"USA\", lat: 42.7261, lon: -87.7828 },\n  { year: 2004, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2005, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2006, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2007, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2008, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2009, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2010, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2011, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2012, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2013, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2014, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2015, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2016, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2017, location: \"Reutlingen\", country: \"Germany\", lat: 48.4921, lon: 9.2095 },\n  { year: 2018, location: \"Stirling\", country: \"Scotland\", lat: 56.1165, lon: -3.9369 },\n  { year: 2019, location: \"Stirling\", country: \"Scotland\", lat: 56.1165, lon: -3.9369 },\n  { year: 2020, location: \"Stirling\", country: \"Scotland\", lat: 56.1165, lon: -3.9369 },\n  { year: 2021, location: \"Stirling\", country: \"Scotland\", lat: 56.1165, lon: -3.9369 },\n  { year: 2022, location: \"Royal Leamington Spa\", country: \"England\", lat: 52.2851, lon: -1.5364 },\n  { year: 2023, location: \"Bath\", country: \"England\", lat: 51.3751, lon: -2.3618 },\n  { year: 2024, location: \"Irvine\", country: \"USA\", lat: 33.6846, lon: -117.8265 },\n  { year: 2025, location: \"Irvine\", country: \"USA\", lat: 33.6846, lon: -117.8265 }\n]\n\n// Load world map data\nworld = {\n  const response = await fetch(\"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\");\n  return topojson.feature(await response.json(), \"countries\");\n}\n\n// Function to get current theme colors for timeline map\ngetTimelineThemeColors = () =&gt; {\n  const isDark = document.body.classList.contains('quarto-dark');\n\n  if (isDark) {\n    return {\n      landColor: \"#374151\", // gray-700\n      countryStroke: \"#6b7280\", // gray-500\n      futurePath: \"#60a5fa\", // blue-400\n      traveledPath: \"#f87171\", // red-400\n      currentMarker: \"#f87171\", // red-400\n      otherMarkers: \"#60a5fa\", // blue-400\n      markerStroke: \"#e5e7eb\", // gray-200\n      labelText: \"#f3f4f6\", // gray-100\n      labelBg: \"rgba(17, 24, 39, 0.8)\", // gray-900 with opacity\n      tooltipBg: \"rgba(17, 24, 39, 0.95)\", // gray-900 with opacity\n      tooltipText: \"#f3f4f6\", // gray-100\n      tooltipAccent: \"#fbbf24\", // amber-400\n      controlsBg: \"rgba(17, 24, 39, 0.8)\", // gray-900 with opacity\n      controlsText: \"#f3f4f6\", // gray-100\n      controlsButtonBg: \"rgba(75, 85, 99, 0.8)\", // gray-600 with opacity\n      sliderBg: \"rgba(17, 24, 39, 0.8)\", // gray-900 with opacity\n      sliderText: \"#f3f4f6\", // gray-100\n      sliderButtonBg: \"rgba(75, 85, 99, 0.8)\" // gray-600 with opacity\n    };\n  } else {\n    return {\n      landColor: \"#e5e7eb\", // gray-200\n      countryStroke: \"#9ca3af\", // gray-400\n      futurePath: \"#3b82f6\", // blue-500\n      traveledPath: \"#ef4444\", // red-500\n      currentMarker: \"#ef4444\", // red-500\n      otherMarkers: \"#3b82f6\", // blue-500\n      markerStroke: \"#374151\", // gray-700\n      labelText: \"#374151\", // gray-700\n      labelBg: \"rgba(255, 255, 255, 0.9)\", // white with opacity\n      tooltipBg: \"rgba(255, 255, 255, 0.95)\", // white with opacity\n      tooltipText: \"#374151\", // gray-700\n      tooltipAccent: \"#f59e0b\", // amber-500\n      controlsBg: \"rgba(255, 255, 255, 0.9)\", // white with opacity\n      controlsText: \"#374151\", // gray-700\n      controlsButtonBg: \"rgba(243, 244, 246, 0.8)\", // gray-100 with opacity\n      sliderBg: \"rgba(255, 255, 255, 0.9)\", // white with opacity\n      sliderText: \"#374151\", // gray-700\n      sliderButtonBg: \"rgba(243, 244, 246, 0.8)\" // gray-100 with opacity\n    };\n  }\n}\n\n// Theme-adaptive year selector with buttons\nviewof selectedYear = {\n  const MIN_YEAR = 1998;\n  const MAX_YEAR = 2025;\n  const DEFAULT_YEAR = 2025;\n\n  const colors = getTimelineThemeColors();\n\n  const container = html`&lt;div style=\"display: flex; flex-direction: column; width: 100%;\"&gt;\n    &lt;div style=\"display: flex; align-items: center; margin-bottom: 8px;\"&gt;\n      &lt;button id=\"prev-year\" style=\"\n        background: ${colors.sliderButtonBg}; \n        color: ${colors.sliderText}; \n        border: 1px solid ${colors.countryStroke}; \n        border-radius: 4px; \n        padding: 4px 8px; \n        margin-right: 10px;\n        cursor: pointer;\n        font-size: 16px;\n        width: 36px;\n      \"&gt;◀&lt;/button&gt;\n      &lt;div style=\"flex-grow: 1; text-align: center; color: ${colors.sliderText}; font-size: 16px;\"&gt;\n        Year: &lt;span id=\"year-display\"&gt;${DEFAULT_YEAR}&lt;/span&gt;\n      &lt;/div&gt;\n      &lt;button id=\"next-year\" style=\"\n        background: ${colors.sliderButtonBg}; \n        color: ${colors.sliderText}; \n        border: 1px solid ${colors.countryStroke}; \n        border-radius: 4px; \n        padding: 4px 8px; \n        margin-left: 10px;\n        cursor: pointer;\n        font-size: 16px;\n        width: 36px;\n      \"&gt;▶&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;input type=\"range\" id=\"year-slider\" min=\"${MIN_YEAR}\" max=\"${MAX_YEAR}\" step=\"1\" value=\"${DEFAULT_YEAR}\" style=\"width: 100%; accent-color: ${colors.traveledPath};\"&gt;\n  &lt;/div&gt;`;\n\n  const slider = container.querySelector(\"#year-slider\");\n  const display = container.querySelector(\"#year-display\");\n  const prevBtn = container.querySelector(\"#prev-year\");\n  const nextBtn = container.querySelector(\"#next-year\");\n\n  let value = DEFAULT_YEAR;\n\n  // Function to update colors based on theme\n  const updateColors = () =&gt; {\n    const currentColors = getTimelineThemeColors();\n    prevBtn.style.background = currentColors.sliderButtonBg;\n    prevBtn.style.color = currentColors.sliderText;\n    prevBtn.style.borderColor = currentColors.countryStroke;\n    nextBtn.style.background = currentColors.sliderButtonBg;\n    nextBtn.style.color = currentColors.sliderText;\n    nextBtn.style.borderColor = currentColors.countryStroke;\n    display.parentElement.style.color = currentColors.sliderText;\n    slider.style.accentColor = currentColors.traveledPath;\n  };\n\n  // Function to update everything\n  const updateYear = (year) =&gt; {\n    year = Math.max(MIN_YEAR, Math.min(MAX_YEAR, year));\n    value = year;\n    slider.value = year;\n    display.textContent = year;\n\n    // Update button states\n    prevBtn.disabled = year &lt;= MIN_YEAR;\n    prevBtn.style.opacity = year &lt;= MIN_YEAR ? \"0.5\" : \"1\";\n    nextBtn.disabled = year &gt;= MAX_YEAR;\n    nextBtn.style.opacity = year &gt;= MAX_YEAR ? \"0.5\" : \"1\";\n\n    container.dispatchEvent(new CustomEvent(\"input\"));\n  };\n\n  // Update when slider changes\n  slider.oninput = () =&gt; {\n    updateYear(parseInt(slider.value));\n  };\n\n  // Previous year button\n  prevBtn.onclick = () =&gt; {\n    updateYear(value - 1);\n  };\n\n  // Next year button\n  nextBtn.onclick = () =&gt; {\n    updateYear(value + 1);\n  };\n\n  // Add keyboard navigation\n  container.tabIndex = 0;\n  container.style.outline = \"none\";\n  container.addEventListener(\"keydown\", (event) =&gt; {\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault();\n      updateYear(value - 1);\n    } else if (event.key === \"ArrowRight\") {\n      event.preventDefault();\n      updateYear(value + 1);\n    }\n  });\n\n  // Listen for theme changes\n  const observer = new MutationObserver(() =&gt; {\n    updateColors();\n  });\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  });\n\n  // Initialize\n  updateYear(DEFAULT_YEAR);\n  updateColors();\n\n  // Define getter for Observable\n  Object.defineProperty(container, \"value\", {\n    get: () =&gt; value\n  });\n\n  return container;\n}\n\n// Current location based on selected year\ncurrentLocation = locationData.find(d =&gt; d.year === selectedYear)\n\n// Create a theme-adaptive tooltip element\ntooltip = {\n  const colors = getTimelineThemeColors();\n\n  const div = html`&lt;div style=\"\n    position: absolute;\n    background: ${colors.tooltipBg};\n    border: 1px solid ${colors.countryStroke};\n    border-radius: 5px;\n    padding: 10px;\n    pointer-events: none;\n    opacity: 0;\n    transition: opacity 0.2s;\n    z-index: 1000;\n    font-family: sans-serif;\n    font-size: 14px;\n    max-width: 200px;\n    color: ${colors.tooltipText};\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\n  \"&gt;&lt;/div&gt;`;\n\n  document.body.appendChild(div);\n\n  // Function to update tooltip colors\n  const updateTooltipColors = () =&gt; {\n    const currentColors = getTimelineThemeColors();\n    div.style.background = currentColors.tooltipBg;\n    div.style.borderColor = currentColors.countryStroke;\n    div.style.color = currentColors.tooltipText;\n  };\n\n  // Listen for theme changes\n  const observer = new MutationObserver(() =&gt; {\n    updateTooltipColors();\n  });\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  });\n\n  return div;\n}\n\n// Theme-adaptive map visualization\nmapVisualization = {\n  const colors = getTimelineThemeColors();\n\n  // Set up dimensions and projection\n  const width = 900;\n  const height = 500;\n\n  // Create a projection focused on US and Europe\n  const projection = d3.geoMercator()\n    .center([-40, 45])\n    .scale(250)\n    .translate([width / 2, height / 2]);\n\n  // Create path generator\n  const path = d3.geoPath().projection(projection);\n\n  // Create SVG\n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto;\");\n\n  // Add ocean background\n  svg.append(\"rect\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"fill\", \"none\");\n\n  // Create a group for all map elements\n  const g = svg.append(\"g\");\n\n  // Draw countries\n  const countries = g.append(\"g\")\n    .selectAll(\"path\")\n    .data(world.features)\n    .join(\"path\")\n    .attr(\"fill\", colors.landColor)\n    .attr(\"stroke\", colors.countryStroke)\n    .attr(\"stroke-width\", 0.5)\n    .attr(\"d\", path);\n\n  // Get unique locations to avoid drawing the same point multiple times\n  const uniqueLocations = Array.from(\n    new Map(locationData.map(d =&gt; [`${d.lat},${d.lon}`, d])).values()\n  ).sort((a, b) =&gt; a.year - b.year);\n\n  // Draw path lines connecting unique locations\n  const lineGenerator = d3.line()\n    .x(d =&gt; projection([d.lon, d.lat])[0])\n    .y(d =&gt; projection([d.lon, d.lat])[1])\n    .curve(d3.curveCardinal.tension(0.5));\n\n  // Draw the complete path \n  const futurePath = g.append(\"path\")\n    .attr(\"d\", lineGenerator(uniqueLocations))\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke\", colors.futurePath)\n    .attr(\"stroke-width\", 2)\n    .attr(\"stroke-dasharray\", \"5,5\")\n    .attr(\"opacity\", 0.7);\n\n  // Highlight the path traveled up to the current year\n  const currentYearIndex = uniqueLocations.findIndex(d =&gt; {\n    const locationsAtThisPoint = locationData.filter(loc =&gt; \n      loc.lat === d.lat && loc.lon === d.lon\n    );\n    const years = locationsAtThisPoint.map(loc =&gt; loc.year);\n    const minYear = Math.min(...years);\n    return selectedYear &lt; minYear;\n  });\n\n  let traveledPathIndex;\n  if (currentYearIndex === -1) {\n    traveledPathIndex = uniqueLocations.length;\n  } else if (currentYearIndex === 0) {\n    traveledPathIndex = 0;\n  } else {\n    traveledPathIndex = currentYearIndex;\n  }\n\n  // Draw traveled path\n  let traveledPath = null;\n  if (traveledPathIndex &gt; 0) {\n    const traveledPathData = uniqueLocations.slice(0, traveledPathIndex);\n    traveledPath = g.append(\"path\")\n      .attr(\"d\", lineGenerator(traveledPathData))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", colors.traveledPath)\n      .attr(\"stroke-width\", 3)\n      .attr(\"opacity\", 0.9);\n  }\n\n  // Create a group for markers and labels\n  const markersGroup = g.append(\"g\");\n\n  // Get unique locations for markers\n  const markerLocations = Array.from(\n    new Map(locationData.map(d =&gt; [`${d.lat},${d.lon}`, d])).values()\n  );\n\n  // Draw all locations as markers\n  const markers = markersGroup.selectAll(\"circle\")\n    .data(markerLocations)\n    .join(\"circle\")\n    .attr(\"cx\", d =&gt; projection([d.lon, d.lat])[0])\n    .attr(\"cy\", d =&gt; projection([d.lon, d.lat])[1])\n    .attr(\"r\", d =&gt; {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n      return isCurrentLocation ? 8 : 4;\n    })\n    .attr(\"fill\", d =&gt; {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n      return isCurrentLocation ? colors.currentMarker : colors.otherMarkers;\n    })\n    .attr(\"stroke\", colors.markerStroke)\n    .attr(\"stroke-width\", d =&gt; {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n      return isCurrentLocation ? 2 : 1;\n    })\n    .attr(\"opacity\", d =&gt; {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n      return isCurrentLocation ? 1 : 0.7;\n    })\n    .on(\"mouseover\", function(event, d) {\n      const locYears = locationData\n        .filter(loc =&gt; loc.lat === d.lat && loc.lon === d.lon)\n        .map(loc =&gt; loc.year);\n\n      const yearRanges = [];\n      let start = locYears[0];\n      let end = locYears[0];\n\n      for (let i = 1; i &lt; locYears.length; i++) {\n        if (locYears[i] === end + 1) {\n          end = locYears[i];\n        } else {\n          yearRanges.push(start === end ? `${start}` : `${start}-${end}`);\n          start = end = locYears[i];\n        }\n      }\n      yearRanges.push(start === end ? `${start}` : `${start}-${end}`);\n\n      d3.select(this)\n        .attr(\"r\", 12)\n        .attr(\"stroke-width\", 3);\n\n      const currentColors = getTimelineThemeColors();\n      tooltip.innerHTML = `\n        &lt;strong style=\"color: ${currentColors.tooltipAccent};\"&gt;${d.location}, ${d.country}&lt;/strong&gt;&lt;br/&gt;\n        Years: ${yearRanges.join(\", \")}&lt;br/&gt;\n        Coordinates: ${d.lat.toFixed(2)}, ${d.lon.toFixed(2)}\n      `;\n\n      tooltip.style.opacity = \"1\";\n      tooltip.style.left = (event.pageX + 15) + \"px\";\n      tooltip.style.top = (event.pageY - 28) + \"px\";\n    })\n    .on(\"mouseout\", function(event, d) {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n\n      d3.select(this)\n        .attr(\"r\", isCurrentLocation ? 8 : 4)\n        .attr(\"stroke-width\", isCurrentLocation ? 2 : 1);\n\n      tooltip.style.opacity = \"0\";\n    })\n    .on(\"mousemove\", function(event) {\n      tooltip.style.left = (event.pageX + 15) + \"px\";\n      tooltip.style.top = (event.pageY - 28) + \"px\";\n    });\n\n  // Add label for current location\n  let currentLocationLabel = null;\n  let currentLocationBg = null;\n\n  if (currentLocation) {\n    const [x, y] = projection([currentLocation.lon, currentLocation.lat]);\n\n    currentLocationBg = markersGroup.append(\"rect\")\n      .attr(\"x\", x + 10)\n      .attr(\"y\", y - 15)\n      .attr(\"width\", `${currentLocation.location.length * 8 + 30}px`)\n      .attr(\"height\", \"22px\")\n      .attr(\"fill\", colors.labelBg)\n      .attr(\"rx\", 3)\n      .attr(\"ry\", 3);\n\n    currentLocationLabel = markersGroup.append(\"text\")\n      .attr(\"x\", x + 12)\n      .attr(\"y\", y)\n      .text(`${currentLocation.location} (${currentLocation.year})`)\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", \"14px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", colors.labelText);\n  }\n\n  // Add zoom controls\n  const zoomControls = svg.append(\"g\")\n    .attr(\"transform\", `translate(${width - 70}, 20)`);\n\n  // Zoom in button\n  const zoomInButton = zoomControls.append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.countryStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; zoom.scaleBy(svg.transition().duration(300), 1.5));\n\n  const zoomInText = zoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.controlsText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"+\");\n\n  // Zoom out button\n  const zoomOutButton = zoomControls.append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 40)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.countryStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; zoom.scaleBy(svg.transition().duration(300), 0.75));\n\n  const zoomOutText = zoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 60)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.controlsText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"−\");\n\n  // Reset button\n  const resetButton = zoomControls.append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 80)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.countryStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", resetZoom);\n\n  const resetText = zoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 100)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.controlsText)\n    .attr(\"font-size\", \"14px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"R\");\n\n  // Function to update all colors based on current theme\n  function updateMapColors() {\n    const currentColors = getTimelineThemeColors();\n\n    // Update countries\n    countries\n      .attr(\"fill\", currentColors.landColor)\n      .attr(\"stroke\", currentColors.countryStroke);\n\n    // Update paths\n    futurePath.attr(\"stroke\", currentColors.futurePath);\n    if (traveledPath) {\n      traveledPath.attr(\"stroke\", currentColors.traveledPath);\n    }\n\n    // Update markers\n    markers\n      .attr(\"fill\", d =&gt; {\n        const isCurrentLocation = locationData.some(loc =&gt; \n          loc.year === selectedYear && \n          loc.lat === d.lat && \n          loc.lon === d.lon\n        );\n        return isCurrentLocation ? currentColors.currentMarker : currentColors.otherMarkers;\n      })\n      .attr(\"stroke\", currentColors.markerStroke);\n\n    // Update labels\n    if (currentLocationBg) {\n      currentLocationBg.attr(\"fill\", currentColors.labelBg);\n    }\n    if (currentLocationLabel) {\n      currentLocationLabel.attr(\"fill\", currentColors.labelText);\n    }\n\n    // Update controls\n    zoomInButton.attr(\"fill\", currentColors.controlsButtonBg).attr(\"stroke\", currentColors.countryStroke);\n    zoomOutButton.attr(\"fill\", currentColors.controlsButtonBg).attr(\"stroke\", currentColors.countryStroke);\n    resetButton.attr(\"fill\", currentColors.controlsButtonBg).attr(\"stroke\", currentColors.countryStroke);\n    zoomInText.attr(\"fill\", currentColors.controlsText);\n    zoomOutText.attr(\"fill\", currentColors.controlsText);\n    resetText.attr(\"fill\", currentColors.controlsText);\n  }\n\n  // Define zoom behavior\n  const zoom = d3.zoom()\n    .scaleExtent([0.5, 8])\n    .on(\"zoom\", zoomed);\n\n  function zoomed(event) {\n    g.attr(\"transform\", event.transform);\n    const strokeScale = 1 / Math.sqrt(event.transform.k);\n    g.selectAll(\"path\").attr(\"stroke-width\", 0.5 * strokeScale);\n\n    markersGroup.selectAll(\"circle\").each(function(d) {\n      const isCurrentLocation = locationData.some(loc =&gt; \n        loc.year === selectedYear && \n        loc.lat === d.lat && \n        loc.lon === d.lon\n      );\n\n      d3.select(this)\n        .attr(\"r\", (isCurrentLocation ? 8 : 4) * strokeScale)\n        .attr(\"stroke-width\", (isCurrentLocation ? 2 : 1) * strokeScale);\n    });\n  }\n\n  function resetZoom() {\n    svg.transition().duration(750).call(\n      zoom.transform,\n      d3.zoomIdentity\n    );\n  }\n\n  // Enable zoom and pan on the SVG\n  svg.call(zoom);\n\n  // Listen for theme changes and update colors accordingly\n  const observer = new MutationObserver(() =&gt; {\n    updateMapColors();\n  });\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  });\n\n  return svg.node();\n}\n\n// Display the map\nmapVisualization;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHi, I’m Luke, or more formally Lukas. I’m a German national with dual citizenship in the US. I was born in Wisconsin, USA but grew up in the greater Stuttgart area (Germany), which is known for its car industry and the Swabian dialect.\n\n\n\n\n\nReutlingen, Germany - Credit\n\n\n\n\n\nStuttgart, Germany - Credit\n\n\nAfter a brief stint working in a closed psychiatric ward at my local university hospital in Tübingen, I decided to pursue undergraduate education at a small university in beautiful Scotland.\n\n\n\n\n\nTübingen, Germany - Credit: Westend61/Getty Images\n\n\n\n\n\nStirling, Scotland - Credit\n\n\nDespite my initial ambitions to pursue a career in clinical psychology, I discovered my analytical side when I was introduced to computer programming by a PhD student in the lab I was helping out in. I got very lucky in this regard as just prior to graduating, I was offered a summer internship at a London-based Data-Science consultancy. I enjoyed the work as it offered diverse problems to solve from different clients, but ultimately I felt that I should also seek formal education in data analytics.\nThe Behavioral and Data Science M.Sc. at the University of Warwick was very much the perfect fit for me, as it combined my interest in behavioral research with my newfound passion for select topics in Computer Science. It was at Warwick where I first came to appreciate the application of computational modelling to describe cognitive processes. This was when things “clicked” in my head, and I knew that I wanted to pursue a PhD in this area.\n\n\n\n\n\nRoyal Leamington Spa, England - Credit\n\n\nI spent a very fun year working in the Applied Digital Behavior Lab at the University of Bath while preparing my PhD applications and was fortunate to be accepted into the Cognitive Science PhD program at the University of California, Irvine, where I am currently working in Mark Steyvers’ lab.\n\n\n\n\n\nBath, England - Credit: Ian Woolcock — Shutterstock\n\n\n\n\n\nUniversity of California, Irvine, USA - Credit"
  },
  {
    "objectID": "about/index.html#hobbies-and-interests",
    "href": "about/index.html#hobbies-and-interests",
    "title": "About",
    "section": "",
    "text": "1. Exercise\n\n\n\n\n\nI’ve always been pretty active, but when I was younger I somehow never really stuck with any particular sport for too long. To give you an idea, I’ve had a phase for: archery, badminton, Crossfit, golf, parkour, powerlifting, and skateboarding. I’m still interested in strength training, which I have been doing in some form for 10+ years, and badminton. I have limited means to engage with these in an organized format at the moment, so to fill the hole in my heart, I’ve been investing some time to figure out the perfect home gym setup that still fits inside my bedroom. I think I’ve been pretty successful with this, so maybe I’ll show it off in a post sometime.\n\n\n\n\n\n\n\n\n\n2. Technology\n\n\n\n\n\nI like GNU/Linux, and use it as my everyday operating system. At the moment, my laptop runs Debian with KDE. I’ve also played around with operating systems on mobile devices, currently using GrapheneOS. I enjoy coding, and wish I could do it more! My favorite languages at the moment are Julia, R, and Python. As you can see, I’ve also taken an interest in web development. While Quarto admittedly makes this website pretty easy to create, I also use web development in my research to create experiments that run in a browser. I’m super interested in picking up creative coding and I am hoping to eventually generate some art that I can post on here! :)\n\n\n\n\n\n\n\n\n\n3. Languages\n\n\n\n\n\nEnglish used to be my first language as I only started learning German after relocating to the Länd at age six. Fast-forward to now, English has become my second language. Maybe because of this strange experience, I’ve had a bit of an interest in language-learning. I have a habit of doing language lessons for fun on Duolingo, where I have a streak of over 2000 days. I’m mostly learning French and Dutch at the moment. My Dutch is definitely better than my French, probably just by virtue of being so similar to German, but both are good enough to follow a YouTube video. I hope to eventually move away from Duolingo and bring my skills to the next level, but don’t feel I have the bandwidth for it just now. If you know a good free resource, be sure to let me know!\n\n\n\n\n\n\n\n\n\n4. Gaming\n\n\n\n\n\nI was quite the avid gamer as a teen, spending countless hours on the likes of Team Fortress 2, Minecraft and Guild Wars 2. I don’t actively play much these days, but I still like to keep up with the industry. Perhaps I’m just waiting for the next big thing to come along. I also really enjoy going to board game cafés and completing escape rooms with friends!\n\n\n\n\n\n\n\n\n\nCode\nd3Highlight = require(\"d3@7\")\ntopoHighlight = require(\"topojson-client@3\")\n\n// Your list of visited countries\ncountriesVisited = [\n  \"Germany\", \"France\", \"USA\", \"Spain\", \"Italy\", \"Austria\", \n  \"Switzerland\", \"Netherlands\", \"Belgium\", \"San Marino\", \n  \"Vatican\", \"Malta\", \"Monaco\", \"United Kingdom\", \"Hungary\",\n]\n\n// Load world map data with a unique variable name\nworldGeoData = {\n  const response = await fetch(\"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\");\n  return topoHighlight.feature(await response.json(), \"countries\");\n}\n\n// Function to get current theme colors\ngetThemeColors = () =&gt; {\n  const isDark = document.body.classList.contains('quarto-dark');\n\n  if (isDark) {\n    return {\n      visitedColor: \"#00a653\",\n      notVisitedColor: \"#374151\", // gray-700 equivalent\n      strokeColor: \"#6b7280\", // gray-500 equivalent\n      strokeHoverColor: \"#ffffff\",\n      tooltipBg: \"rgba(17, 24, 39, 0.95)\", // gray-900 with opacity\n      tooltipText: \"#ffffff\",\n      legendBg: \"rgba(17, 24, 39, 0.8)\",\n      legendText: \"#ffffff\",\n      controlsBg: \"rgba(17, 24, 39, 0.8)\",\n      controlsButtonBg: \"rgba(75, 85, 99, 0.8)\", // gray-600 with opacity\n      controlsButtonStroke: \"#9ca3af\" // gray-400\n    };\n  } else {\n    return {\n      visitedColor: \"#00a653\",\n      notVisitedColor: \"#e5e7eb\", // gray-200 equivalent\n      strokeColor: \"#9ca3af\", // gray-400 equivalent\n      strokeHoverColor: \"#374151\",\n      tooltipBg: \"rgba(255, 255, 255, 0.95)\",\n      tooltipText: \"#374151\",\n      legendBg: \"rgba(255, 255, 255, 0.9)\",\n      legendText: \"#374151\",\n      controlsBg: \"rgba(255, 255, 255, 0.9)\",\n      controlsButtonBg: \"rgba(243, 244, 246, 0.8)\", // gray-100 with opacity\n      controlsButtonStroke: \"#d1d5db\" // gray-300\n    };\n  }\n}\n\n// Map visualization with theme-adaptive colors\nhighlightedCountriesMap = {\n  const colors = getThemeColors();\n\n  // Set up dimensions and projection\n  const mapWidth = 900;\n  const mapHeight = 500;\n\n  // Create a projection focused on the world\n  const mapProjection = d3Highlight.geoMercator()\n    .center([10, 45])\n    .scale(150)\n    .translate([mapWidth / 2, mapHeight / 2]);\n\n  // Create path generator\n  const mapPath = d3Highlight.geoPath().projection(mapProjection);\n\n  // Create SVG with transparent background\n  const mapSvg = d3Highlight.create(\"svg\")\n    .attr(\"width\", mapWidth)\n    .attr(\"height\", mapHeight)\n    .attr(\"viewBox\", [0, 0, mapWidth, mapHeight])\n    .attr(\"style\", \"max-width: 100%; height: auto; background: none;\");\n\n  // Create a group for all map elements\n  const mapGroup = mapSvg.append(\"g\");\n\n  // Create a tooltip\n  const mapTooltip = d3Highlight.select(document.createElement(\"div\"))\n    .attr(\"class\", \"highlight-map-tooltip\")\n    .style(\"position\", \"absolute\")\n    .style(\"background\", colors.tooltipBg)\n    .style(\"color\", colors.tooltipText)\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"8px\")\n    .style(\"pointer-events\", \"none\")\n    .style(\"opacity\", 0)\n    .style(\"z-index\", 1000)\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"14px\");\n\n  document.body.appendChild(mapTooltip.node());\n\n  // Country name mapping for special cases\n  const countryNameMap = {\n    \"United States of America\": \"USA\",\n    \"United States\": \"USA\",\n    \"Holy See\": \"Vatican\",\n    \"Vatican City\": \"Vatican\",\n    \"Vatican\": \"Vatican\",\n    \"San Marino\": \"San Marino\"\n  };\n\n  // Function to update map colors based on current theme\n  function updateMapColors() {\n    const currentColors = getThemeColors();\n\n    // Update country colors\n    mapGroup.selectAll(\"path\")\n      .attr(\"fill\", d =&gt; {\n        const countryName = d.properties.name;\n        const normalizedName = countryNameMap[countryName] || countryName;\n        return countriesVisited.includes(normalizedName) ? currentColors.visitedColor : currentColors.notVisitedColor;\n      })\n      .attr(\"stroke\", currentColors.strokeColor);\n\n    // Update tooltip colors\n    mapTooltip\n      .style(\"background\", currentColors.tooltipBg)\n      .style(\"color\", currentColors.tooltipText);\n\n    // Update legend colors\n    mapLegend.select(\".legend-bg\")\n      .attr(\"fill\", currentColors.legendBg);\n\n    mapLegend.selectAll(\".legend-text\")\n      .style(\"fill\", currentColors.legendText);\n\n    // Update control colors\n    mapZoomControls.select(\".controls-bg\")\n      .attr(\"fill\", currentColors.controlsBg);\n\n    mapZoomControls.selectAll(\".control-button\")\n      .attr(\"fill\", currentColors.controlsButtonBg)\n      .attr(\"stroke\", currentColors.controlsButtonStroke);\n  }\n\n  // Draw countries\n  const countries = mapGroup.selectAll(\"path\")\n    .data(worldGeoData.features)\n    .join(\"path\")\n    .attr(\"fill\", d =&gt; {\n      const countryName = d.properties.name;\n      const normalizedName = countryNameMap[countryName] || countryName;\n      return countriesVisited.includes(normalizedName) ? colors.visitedColor : colors.notVisitedColor;\n    })\n    .attr(\"stroke\", colors.strokeColor)\n    .attr(\"stroke-width\", 0.5)\n    .attr(\"d\", mapPath)\n    .on(\"mouseover\", function(event, d) {\n      const currentColors = getThemeColors();\n      d3Highlight.select(this).attr(\"stroke-width\", 1.5).attr(\"stroke\", currentColors.strokeHoverColor);\n\n      const countryName = d.properties.name;\n      const normalizedName = countryNameMap[countryName] || countryName;\n      const isVisited = countriesVisited.includes(normalizedName);\n\n      mapTooltip\n        .style(\"opacity\", 1)\n        .html(`&lt;strong&gt;${countryName}&lt;/strong&gt;&lt;br/&gt;${isVisited ? \"✓ Visited\" : \"Not visited\"}`)\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 28) + \"px\");\n    })\n    .on(\"mouseout\", function() {\n      const currentColors = getThemeColors();\n      d3Highlight.select(this).attr(\"stroke-width\", 0.5).attr(\"stroke\", currentColors.strokeColor);\n      mapTooltip.style(\"opacity\", 0);\n    })\n    .on(\"mousemove\", function(event) {\n      mapTooltip\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 28) + \"px\");\n    });\n\n  // Add a legend\n  const mapLegend = mapSvg.append(\"g\")\n    .attr(\"transform\", `translate(20, ${mapHeight - 60})`);\n\n  // Background for legend\n  mapLegend.append(\"rect\")\n    .attr(\"class\", \"legend-bg\")\n    .attr(\"x\", -5)\n    .attr(\"y\", -15)\n    .attr(\"width\", 120)\n    .attr(\"height\", 70)\n    .attr(\"fill\", colors.legendBg)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5);\n\n  // Visited countries legend\n  mapLegend.append(\"rect\")\n    .attr(\"width\", 20)\n    .attr(\"height\", 20)\n    .attr(\"fill\", colors.visitedColor);\n\n  mapLegend.append(\"text\")\n    .attr(\"class\", \"legend-text\")\n    .attr(\"x\", 30)\n    .attr(\"y\", 15)\n    .text(\"Visited\")\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"14px\")\n    .style(\"fill\", colors.legendText);\n\n  // Not visited countries legend\n  mapLegend.append(\"rect\")\n    .attr(\"width\", 20)\n    .attr(\"height\", 20)\n    .attr(\"y\", 30)\n    .attr(\"fill\", colors.notVisitedColor);\n\n  mapLegend.append(\"text\")\n    .attr(\"class\", \"legend-text\")\n    .attr(\"x\", 30)\n    .attr(\"y\", 45)\n    .text(\"Not Visited\")\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"14px\")\n    .style(\"fill\", colors.legendText);\n\n  // Add zoom controls\n  const mapZoomControls = mapSvg.append(\"g\")\n    .attr(\"transform\", `translate(${mapWidth - 70}, 20)`);\n\n  // Background for zoom controls\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"controls-bg\")\n    .attr(\"x\", -5)\n    .attr(\"y\", -5)\n    .attr(\"width\", 40)\n    .attr(\"height\", 120)\n    .attr(\"fill\", colors.controlsBg)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5);\n\n  // Zoom in button\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"control-button\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.controlsButtonStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; mapZoomBehavior.scaleBy(mapSvg.transition().duration(300), 1.5));\n\n  mapZoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.legendText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"+\");\n\n  // Zoom out button\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"control-button\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 40)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.controlsButtonStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; mapZoomBehavior.scaleBy(mapSvg.transition().duration(300), 0.75));\n\n  mapZoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 60)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.legendText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"−\");\n\n  // Reset button\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"control-button\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 80)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.controlsButtonStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", resetMapZoom);\n\n  mapZoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 100)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.legendText)\n    .attr(\"font-size\", \"14px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"R\");\n\n  // Define zoom behavior\n  const mapZoomBehavior = d3Highlight.zoom()\n    .scaleExtent([1, 8])\n    .on(\"zoom\", mapZoomed);\n\n  function mapZoomed(event) {\n    mapGroup.attr(\"transform\", event.transform);\n    const mapStrokeScale = 1 / Math.sqrt(event.transform.k);\n    mapGroup.selectAll(\"path\").attr(\"stroke-width\", 0.5 * mapStrokeScale);\n  }\n\n  function resetMapZoom() {\n    mapSvg.transition().duration(750).call(\n      mapZoomBehavior.transform,\n      d3Highlight.zoomIdentity\n    );\n  }\n\n  // Enable zoom and pan on the SVG\n  mapSvg.call(mapZoomBehavior);\n\n  // Listen for theme changes and update colors accordingly\n  const observer = new MutationObserver(() =&gt; {\n    updateMapColors();\n  });\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  });\n\n  return mapSvg.node();\n}\n\n// Display the map\nhighlightedCountriesMap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI have also visited a few micro-states including: Malta, Monaco, San Marino, and the Vatican."
  },
  {
    "objectID": "about/index.html#places-ive-been",
    "href": "about/index.html#places-ive-been",
    "title": "About",
    "section": "",
    "text": "Code\nd3Highlight = require(\"d3@7\")\ntopoHighlight = require(\"topojson-client@3\")\n\n// Your list of visited countries\ncountriesVisited = [\n  \"Germany\", \"France\", \"USA\", \"Spain\", \"Italy\", \"Austria\", \n  \"Switzerland\", \"Netherlands\", \"Belgium\", \"San Marino\", \n  \"Vatican\", \"Malta\", \"Monaco\", \"United Kingdom\", \"Hungary\",\n]\n\n// Load world map data with a unique variable name\nworldGeoData = {\n  const response = await fetch(\"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\");\n  return topoHighlight.feature(await response.json(), \"countries\");\n}\n\n// Function to get current theme colors\ngetThemeColors = () =&gt; {\n  const isDark = document.body.classList.contains('quarto-dark');\n\n  if (isDark) {\n    return {\n      visitedColor: \"#00a653\",\n      notVisitedColor: \"#374151\", // gray-700 equivalent\n      strokeColor: \"#6b7280\", // gray-500 equivalent\n      strokeHoverColor: \"#ffffff\",\n      tooltipBg: \"rgba(17, 24, 39, 0.95)\", // gray-900 with opacity\n      tooltipText: \"#ffffff\",\n      legendBg: \"rgba(17, 24, 39, 0.8)\",\n      legendText: \"#ffffff\",\n      controlsBg: \"rgba(17, 24, 39, 0.8)\",\n      controlsButtonBg: \"rgba(75, 85, 99, 0.8)\", // gray-600 with opacity\n      controlsButtonStroke: \"#9ca3af\" // gray-400\n    };\n  } else {\n    return {\n      visitedColor: \"#00a653\",\n      notVisitedColor: \"#e5e7eb\", // gray-200 equivalent\n      strokeColor: \"#9ca3af\", // gray-400 equivalent\n      strokeHoverColor: \"#374151\",\n      tooltipBg: \"rgba(255, 255, 255, 0.95)\",\n      tooltipText: \"#374151\",\n      legendBg: \"rgba(255, 255, 255, 0.9)\",\n      legendText: \"#374151\",\n      controlsBg: \"rgba(255, 255, 255, 0.9)\",\n      controlsButtonBg: \"rgba(243, 244, 246, 0.8)\", // gray-100 with opacity\n      controlsButtonStroke: \"#d1d5db\" // gray-300\n    };\n  }\n}\n\n// Map visualization with theme-adaptive colors\nhighlightedCountriesMap = {\n  const colors = getThemeColors();\n\n  // Set up dimensions and projection\n  const mapWidth = 900;\n  const mapHeight = 500;\n\n  // Create a projection focused on the world\n  const mapProjection = d3Highlight.geoMercator()\n    .center([10, 45])\n    .scale(150)\n    .translate([mapWidth / 2, mapHeight / 2]);\n\n  // Create path generator\n  const mapPath = d3Highlight.geoPath().projection(mapProjection);\n\n  // Create SVG with transparent background\n  const mapSvg = d3Highlight.create(\"svg\")\n    .attr(\"width\", mapWidth)\n    .attr(\"height\", mapHeight)\n    .attr(\"viewBox\", [0, 0, mapWidth, mapHeight])\n    .attr(\"style\", \"max-width: 100%; height: auto; background: none;\");\n\n  // Create a group for all map elements\n  const mapGroup = mapSvg.append(\"g\");\n\n  // Create a tooltip\n  const mapTooltip = d3Highlight.select(document.createElement(\"div\"))\n    .attr(\"class\", \"highlight-map-tooltip\")\n    .style(\"position\", \"absolute\")\n    .style(\"background\", colors.tooltipBg)\n    .style(\"color\", colors.tooltipText)\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"8px\")\n    .style(\"pointer-events\", \"none\")\n    .style(\"opacity\", 0)\n    .style(\"z-index\", 1000)\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"14px\");\n\n  document.body.appendChild(mapTooltip.node());\n\n  // Country name mapping for special cases\n  const countryNameMap = {\n    \"United States of America\": \"USA\",\n    \"United States\": \"USA\",\n    \"Holy See\": \"Vatican\",\n    \"Vatican City\": \"Vatican\",\n    \"Vatican\": \"Vatican\",\n    \"San Marino\": \"San Marino\"\n  };\n\n  // Function to update map colors based on current theme\n  function updateMapColors() {\n    const currentColors = getThemeColors();\n\n    // Update country colors\n    mapGroup.selectAll(\"path\")\n      .attr(\"fill\", d =&gt; {\n        const countryName = d.properties.name;\n        const normalizedName = countryNameMap[countryName] || countryName;\n        return countriesVisited.includes(normalizedName) ? currentColors.visitedColor : currentColors.notVisitedColor;\n      })\n      .attr(\"stroke\", currentColors.strokeColor);\n\n    // Update tooltip colors\n    mapTooltip\n      .style(\"background\", currentColors.tooltipBg)\n      .style(\"color\", currentColors.tooltipText);\n\n    // Update legend colors\n    mapLegend.select(\".legend-bg\")\n      .attr(\"fill\", currentColors.legendBg);\n\n    mapLegend.selectAll(\".legend-text\")\n      .style(\"fill\", currentColors.legendText);\n\n    // Update control colors\n    mapZoomControls.select(\".controls-bg\")\n      .attr(\"fill\", currentColors.controlsBg);\n\n    mapZoomControls.selectAll(\".control-button\")\n      .attr(\"fill\", currentColors.controlsButtonBg)\n      .attr(\"stroke\", currentColors.controlsButtonStroke);\n  }\n\n  // Draw countries\n  const countries = mapGroup.selectAll(\"path\")\n    .data(worldGeoData.features)\n    .join(\"path\")\n    .attr(\"fill\", d =&gt; {\n      const countryName = d.properties.name;\n      const normalizedName = countryNameMap[countryName] || countryName;\n      return countriesVisited.includes(normalizedName) ? colors.visitedColor : colors.notVisitedColor;\n    })\n    .attr(\"stroke\", colors.strokeColor)\n    .attr(\"stroke-width\", 0.5)\n    .attr(\"d\", mapPath)\n    .on(\"mouseover\", function(event, d) {\n      const currentColors = getThemeColors();\n      d3Highlight.select(this).attr(\"stroke-width\", 1.5).attr(\"stroke\", currentColors.strokeHoverColor);\n\n      const countryName = d.properties.name;\n      const normalizedName = countryNameMap[countryName] || countryName;\n      const isVisited = countriesVisited.includes(normalizedName);\n\n      mapTooltip\n        .style(\"opacity\", 1)\n        .html(`&lt;strong&gt;${countryName}&lt;/strong&gt;&lt;br/&gt;${isVisited ? \"✓ Visited\" : \"Not visited\"}`)\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 28) + \"px\");\n    })\n    .on(\"mouseout\", function() {\n      const currentColors = getThemeColors();\n      d3Highlight.select(this).attr(\"stroke-width\", 0.5).attr(\"stroke\", currentColors.strokeColor);\n      mapTooltip.style(\"opacity\", 0);\n    })\n    .on(\"mousemove\", function(event) {\n      mapTooltip\n        .style(\"left\", (event.pageX + 10) + \"px\")\n        .style(\"top\", (event.pageY - 28) + \"px\");\n    });\n\n  // Add a legend\n  const mapLegend = mapSvg.append(\"g\")\n    .attr(\"transform\", `translate(20, ${mapHeight - 60})`);\n\n  // Background for legend\n  mapLegend.append(\"rect\")\n    .attr(\"class\", \"legend-bg\")\n    .attr(\"x\", -5)\n    .attr(\"y\", -15)\n    .attr(\"width\", 120)\n    .attr(\"height\", 70)\n    .attr(\"fill\", colors.legendBg)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5);\n\n  // Visited countries legend\n  mapLegend.append(\"rect\")\n    .attr(\"width\", 20)\n    .attr(\"height\", 20)\n    .attr(\"fill\", colors.visitedColor);\n\n  mapLegend.append(\"text\")\n    .attr(\"class\", \"legend-text\")\n    .attr(\"x\", 30)\n    .attr(\"y\", 15)\n    .text(\"Visited\")\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"14px\")\n    .style(\"fill\", colors.legendText);\n\n  // Not visited countries legend\n  mapLegend.append(\"rect\")\n    .attr(\"width\", 20)\n    .attr(\"height\", 20)\n    .attr(\"y\", 30)\n    .attr(\"fill\", colors.notVisitedColor);\n\n  mapLegend.append(\"text\")\n    .attr(\"class\", \"legend-text\")\n    .attr(\"x\", 30)\n    .attr(\"y\", 45)\n    .text(\"Not Visited\")\n    .style(\"font-family\", \"sans-serif\")\n    .style(\"font-size\", \"14px\")\n    .style(\"fill\", colors.legendText);\n\n  // Add zoom controls\n  const mapZoomControls = mapSvg.append(\"g\")\n    .attr(\"transform\", `translate(${mapWidth - 70}, 20)`);\n\n  // Background for zoom controls\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"controls-bg\")\n    .attr(\"x\", -5)\n    .attr(\"y\", -5)\n    .attr(\"width\", 40)\n    .attr(\"height\", 120)\n    .attr(\"fill\", colors.controlsBg)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5);\n\n  // Zoom in button\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"control-button\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.controlsButtonStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; mapZoomBehavior.scaleBy(mapSvg.transition().duration(300), 1.5));\n\n  mapZoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.legendText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"+\");\n\n  // Zoom out button\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"control-button\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 40)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.controlsButtonStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", () =&gt; mapZoomBehavior.scaleBy(mapSvg.transition().duration(300), 0.75));\n\n  mapZoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 60)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.legendText)\n    .attr(\"font-size\", \"18px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"−\");\n\n  // Reset button\n  mapZoomControls.append(\"rect\")\n    .attr(\"class\", \"control-button\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 80)\n    .attr(\"width\", 30)\n    .attr(\"height\", 30)\n    .attr(\"fill\", colors.controlsButtonBg)\n    .attr(\"stroke\", colors.controlsButtonStroke)\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"cursor\", \"pointer\")\n    .on(\"click\", resetMapZoom);\n\n  mapZoomControls.append(\"text\")\n    .attr(\"x\", 15)\n    .attr(\"y\", 100)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"fill\", colors.legendText)\n    .attr(\"font-size\", \"14px\")\n    .attr(\"font-weight\", \"bold\")\n    .attr(\"pointer-events\", \"none\")\n    .text(\"R\");\n\n  // Define zoom behavior\n  const mapZoomBehavior = d3Highlight.zoom()\n    .scaleExtent([1, 8])\n    .on(\"zoom\", mapZoomed);\n\n  function mapZoomed(event) {\n    mapGroup.attr(\"transform\", event.transform);\n    const mapStrokeScale = 1 / Math.sqrt(event.transform.k);\n    mapGroup.selectAll(\"path\").attr(\"stroke-width\", 0.5 * mapStrokeScale);\n  }\n\n  function resetMapZoom() {\n    mapSvg.transition().duration(750).call(\n      mapZoomBehavior.transform,\n      d3Highlight.zoomIdentity\n    );\n  }\n\n  // Enable zoom and pan on the SVG\n  mapSvg.call(mapZoomBehavior);\n\n  // Listen for theme changes and update colors accordingly\n  const observer = new MutationObserver(() =&gt; {\n    updateMapColors();\n  });\n\n  observer.observe(document.body, {\n    attributes: true,\n    attributeFilter: ['class']\n  });\n\n  return mapSvg.node();\n}\n\n// Display the map\nhighlightedCountriesMap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI have also visited a few micro-states including: Malta, Monaco, San Marino, and the Vatican."
  },
  {
    "objectID": "blog/posts/cv_theme.html",
    "href": "blog/posts/cv_theme.html",
    "title": "Light and Dark mode PDFs for your Quarto website",
    "section": "",
    "text": "As you may be able to tell from the fact that I am writing three posts about theming different aspects of a Quarto website on the same day, I have been re-designing my site.\nAt some point yesterday I thought I was finally done making all page content adapt to the current website theme, until my glaring white CV nearly blinded me on my otherwise perfectly dark website.\nSo I set out to find a solution for this. How can I render a PDF in dark mode, and then selectively show the PDF that fits the theme the user has active?"
  },
  {
    "objectID": "blog/posts/cv_theme.html#part-1-creating-a-dark-mode-cv",
    "href": "blog/posts/cv_theme.html#part-1-creating-a-dark-mode-cv",
    "title": "Light and Dark mode PDFs for your Quarto website",
    "section": "Part 1: Creating a dark mode CV",
    "text": "Part 1: Creating a dark mode CV\nI didn’t want to have two separate files for my CV since I could potentially forget to update one of them, so my first challenge was to figure out how I can have one “Content” file inform two themed output files. Luckily this is very easy with includes.\nI simply have a cv_content.qmd file that contains all the Markdown and LaTeX I use for my CV. Then, I have two further .qmd files which use the content file as a basis and define the theme for that version in the YAML front-matter. For example, cv_lwm_dark.qmd looks like this:\n---\nformat: \n  pdf: \n    documentclass: article\n    self-contained: false\n    geometry:\n      - top=10mm\n      - left=15mm\n      - right=15mm\n      - bottom=5mm\n      - heightrounded\n    fontfamily: libertine\n    colorlinks: true\n    linkcolor: linkblue\n    urlcolor: linkblue\n    citecolor: linkblue\n    fontsize: '16'\n    include-in-header: \n      text: |\n        \\usepackage{multicol}\n        \\usepackage{tabularx}\n        \\usepackage{lipsum}\n        \\usepackage{graphicx}\n        \\usepackage{hyperref}\n        \\usepackage{libertine}\n        \\usepackage{xcolor}\n        \\usepackage{sectsty}\n        \\pagestyle{empty}\n        \\setlength{\\multicolsep}{2pt plus 1.0pt minus 0.75pt}\n        \\setlength{\\columnsep}{3em}\n        % Dark mode colors\n        \\definecolor{bgcolor}{RGB}{30,33,38}\n        \\definecolor{textcolor}{RGB}{209,213,219}\n        \\definecolor{headingcolor}{RGB}{229,231,235}\n        \\definecolor{linkblue}{RGB}{96,165,250}\n        \\pagecolor{bgcolor}\n        \\color{textcolor}\n        \\allsectionsfont{\\color{headingcolor}}\n---\n\n# {{&lt; include cv_content.qmd &gt;}} \nAs you can see, I simply define the colors via LaTeX commands, and then use HTML includes to have this file use the content file as input. Note that you have to remove the ‘#’ from the code block above for this to work. So now, one content file can be used to render two different CVs, pretty neat!"
  },
  {
    "objectID": "blog/posts/cv_theme.html#part-2-selectively-showing-the-fitting-cv",
    "href": "blog/posts/cv_theme.html#part-2-selectively-showing-the-fitting-cv",
    "title": "Light and Dark mode PDFs for your Quarto website",
    "section": "Part 2: Selectively showing the fitting CV",
    "text": "Part 2: Selectively showing the fitting CV\nNow we want to show only one of the CV’s at a time, depending on the current site theme. According to the Quarto documentation, we should be able to simply wrap some iframes in the pre-defined divs like so:\n## Academic\n\nIf you can't see the embedded PDF below, you can download it [here](cv_lwm.pdf).\n\n::: {.light-content}\n&lt;iframe src=\"cv_lwm.pdf#toolbar=0&navpanes=0&scrollbar=0&view=FitH&page=1\" style=\"width: 90%; height: 800px; border: none;\"&gt;&lt;/iframe&gt;\n:::\n\n::: {.dark-content}\n&lt;iframe src=\"cv_lwm_dark.pdf#toolbar=0&navpanes=0&scrollbar=0&view=FitH&page=1\" style=\"width: 90%; height: 800px; border: none;\"&gt;&lt;/iframe&gt;\n:::\nHowever, for some reason this is not currently enough. I suspect it doesn’t work because of the iframes.\nFor it to work properly, you actually do need to also add a bit of CSS to selectively hide one of the CVs. I just did it by embedding the following on my CV page:\n\n&lt;style&gt;\n\nbody:not(.quarto-dark) .dark-content {\n  display: none !important;\n}\n\nbody.quarto-dark .light-content {\n  display: none !important;\n}\n\n.light-content iframe,\n.dark-content iframe {\n  width: 90%;\n  height: 800px;\n  border: none;\n}\n\n/* hiding the white scroll bar in dark mode */\n\n.dark-content {\n  position: relative;\n}\n\n.dark-content iframe {\n  width: 90%;\n  height: 800px;\n  border: none;\n}\n\nbody.quarto-dark .dark-content::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  right: calc(10% + 0px); \n  width: 22px; \n  height: 800px;\n  background-color: var(--bs-body-bg, #1e2126); \n  pointer-events: none;\n  z-index: 1;\n}\n\n\n&lt;/style&gt;\nAs you can see, I added a little bit of CSS just to hide the scroll bar of the embedded PDF when on the dark mode version of the site. That is because the default PDF reader of Chromium-based browsers cannot be styled, meaning I cannot override the light mode colors of the default PDF reader. Therefore, I felt simply covering the scroll bar is the simplest solution to address this limitation.\nAnd that’s it! Enjoy :)"
  },
  {
    "objectID": "blog/posts/duolingo.html",
    "href": "blog/posts/duolingo.html",
    "title": "2000+ days of Duolingo - Worth it?",
    "section": "",
    "text": "I started using Duolingo as an undergraduate student wanting to learn a bit of Swedish all the way back in 2019. While even back then I thought the interactivity of Duolingo was compelling, so much about the app has changed since those first days I experienced. As I mentioned, my language journey started with Swedish, but I actually only stuck with that for about 2 months before figuring French would be more useful to learn. French has been the main thing I have been using the app for ever since, with a few other languages being tried out on the side. Now that I’ve been continuously using the app for over half a decade, I thought it would be interesting to reflect on the intricacies of Duolingo, so what I feel it does well, less well, and what I think about the directions the creators have been taking."
  },
  {
    "objectID": "blog/posts/duolingo.html#duolingo-in-a-nutshell",
    "href": "blog/posts/duolingo.html#duolingo-in-a-nutshell",
    "title": "2000+ days of Duolingo - Worth it?",
    "section": "Duolingo in a nutshell",
    "text": "Duolingo in a nutshell\nFor anyone not familiar, a quick description. Duolingo offers various structured language courses in which users complete a series of bite-sized lessons to progress through the course. Lessons are grouped around topics, meaning you might begin with learning greetings, before learning about the names of foods, etc. The lessons feature different types of exercises, such as translating sentences, listening to audio and typing what you hear, and matching words to their translations.\nThe app is gamified, with users earning gems (formerly “lingots”) for completing lessons, and streaks for completing lessons on consecutive days. Over the years various other features were added such as daily quests, monthly quests, quests with friends, streak rewards, leaderboards to compete on, social nudges, congratulating friends for accomplishments, and much more. The developers also have added completely different types of lessons to some courses. One of these spins is called stories, in which the learner follows some interaction between the various characters the app uses and answers questions about the story."
  },
  {
    "objectID": "blog/posts/duolingo.html#the-good",
    "href": "blog/posts/duolingo.html#the-good",
    "title": "2000+ days of Duolingo - Worth it?",
    "section": "The good!",
    "text": "The good!\nFirst, Duolingo is free to use, with all the best functionality being available for free-tier users. This is in stark contrast to other popular language learning apps, which hide most of their content behind usually quite sizeable paywalls. There are a lot of different courses available, so whatever you’re interested in is probably represented. The app is extremely popular, meaning you likely already have quite a few friends using it, which can be a great motivator.\nThe streak system is actually surprisingly effective once you have established the habit of daily practice, and is actually much more sophisticated than first meets the eye. For example, Duolingo has developed a system to help “nudge” users into practice. One of these systems is the use of notifications that are tailored to the user, pushing the notification at the time and with the message that is most likely to be effective for them. Another such system is the introduction of a dynamic app icon. Basically, the later in the day you are without having done a lesson on Duolingo, the more desperate Duo (the Duolingo owl) will look on your home-screen. Their widget, which follows a very similar design is also pretty well received. All in all, the gamification works pretty well with the different quests, the ability to “compete” with strangers, the social features and the Role-Playing-Game-esque character creator.\nI also like the stories a lot, sometimes they are surprisingly funny or have unexpected twists, far exceeding my expectations. The sheer breadth of the app is quite impressive, especially for it being free and in the context of the much more humble beginnings I experienced in 2019."
  },
  {
    "objectID": "blog/posts/duolingo.html#the-bad",
    "href": "blog/posts/duolingo.html#the-bad",
    "title": "2000+ days of Duolingo - Worth it?",
    "section": "The bad?",
    "text": "The bad?\nWhile Duolingo supports a lot of languages, the quality of the courses can vary quite a bit. Some courses are very well-developed, with a lot of content and a lot of different types of exercises. Others are much more limited, with only a few types of exercises and a much smaller amount of content. This is especially true for the less popular languages. The languages that are by far the best supported are English, Spanish, and French. The gap between French and all the other non-top-3 languages is quite large.\nAccording to Duolingo’s own classification, my French skill as someone who practiced roughly 20 minutes a day for 2000 days is currently equivalent to B1 level in the European classification framework and I will soon move to B2. I have to say that I don’t think I am anywhere near that level! My own sense is that my reading may be somewhat near that level, with my listening being much closer to A2, and my speaking and writing abilities probably still somewhere around A1. The limited transfer I am describing here is actually a pretty common criticism of Duolingo, and I think it is a fair one.\nThe app is great for getting started with a language, but their method does not really scale all that well for speaking, rather than reading. To elucidate, the difficulty progression in Duolingo when compared to the first few lessons in a course seems to be in the form of using various different tenses and grammatical forms, more complex expressions, and the much greater vocabulary. I think this is great for learning to read the language. However, Duolingo, unlike other apps, does not really focus so much on those common phrases that you’d likely fall back on when speaking prior to fluency. For example, you might learn greetings or how to order in a restaurant at one point, but you are unlikely to see these phrases again when having moved on to a different topic, despite their out-sized importance.\nAs I see it, Duolingo currently really lacks that space for you to practice generating your own prose, which is a real shame. One thing they could have done, which is what some other language apps tried (though mostly unsuccessfully), is to let users talk to each other. Of course, that would have required some content moderation system, which is probably why they didn’t do it. With LLM’s now popularized, they certainly have the opportunity to have conversational spaces, but nothing of the such is currently available at free-tier.\nThe last thing I want to mention in this part is that it feels like Duolingo is sleeping a little on a lot of opportunities to gamify their app further. I have always thought that its strange that you get lingots/gems for completing things, but without them having many uses. If you use the web-app their only use is buying “streak freezes” and “wagers”, which are trivial expenses if you are a regular user. On the mobile app there are a few other things you can buy, such as “boosts” which can be handy for the timed challenges (a feature I don’t think is worth using). I don’t really think you need to be some kind of game-design genius to realize that people may find it interesting to spend gems on customizing their profile or character, or on social features, and yet this barely exists. Some other missed opportunities are the badges for completing monthly challenges that no-one else can see, the highly limited profile statistics, the user-created character not being visible anywhere in the app outside the profile page, and probably many more. I really don’t see why features of this kind, which are often what drives people to buy subscriptions in other apps, are seemingly not being developed? I am hopeful though that the company will come to realize this eventually, as the introduction of the character creator is a fairly recent, and very welcome addition that clearly goes in this direction. Maybe they don’t have the resources to develop stuff like this all that quickly. I’ll give them the benefit of the doubt."
  },
  {
    "objectID": "blog/posts/duolingo.html#the-ugly",
    "href": "blog/posts/duolingo.html#the-ugly",
    "title": "2000+ days of Duolingo - Worth it?",
    "section": "The ugly…",
    "text": "The ugly…\nIn this section, I aim to describe some trends I have observed as a long-time user, hopefully without sounding too much like a grumpy old man.\nIn essence, Duolingo claims to be a mission-driven learning company wanting to enable learning for all, but it feels as though this noble goal is being slightly corrupted by good ol’ corporate greed. In some sense, Duolingo is increasingly following the usual Tech company recipe of “first capture the market, then aggressively monetize”. The company has been shifting away from user-centric design, which feels ironic because its more user-centric past approach is arguably what made it so successful in the first place. I’ll give you a few examples to paint the picture.\nFirstly, anyone used to be able to contribute to courses, with submissions curated by moderators. Then, this was removed in favor of professional curation for better quality control. Professionally made content sounds great, until you realize that in practice, most of the non-top-3 languages have essentially not received any meaningful updates since this change was made. Why not just keep letting people work for you for free?\nSecondly, courses used to be organized in a tree-like structure, meaning you could work on more than one topic at a time. Users liked this because cranking through 6 lessons of animal names before moving on can be a tad bit monotonous. Then Duolingo changed all courses to a “path” structure, allowing you to only do one topic at a time. The backlash in the community was very noticeable in the forums, but this change was neither reverted nor made optional.\nThirdly, you used to be able to make as many errors as you could help in a lesson, but then Duolingo introduced the “hearts” system, which limits the amount of errors you can make before you are kicked out of the lesson and have to earn more hearts through fairly monotonous revision lessons. People really hated this, with the Duolingo forums full of complaints and users vowing left, right, and center to boycott the app. This did not deter them from pushing it through, saying their internal research (not publicized) showed it improved learning. I actually can sort of see how having to manage a finite resource might improve your focus, and how the hearts system also naturally gives rise to revision of old concepts. But my god, they really should have been more careful with introducing such a drastic change, especially given the surrounding controversy!\nWhenever you made a mistake, and you didn’t understand what was wrong about your answer, you used to be able to access a little comment section, where people explained why certain answers are right/wrong. Then Duolingo removed this, probably because it was fairly hidden, and because it is something that requires moderation. Remember when I mentioned you could use LLM’s to make Duolingo more conversational? This is Duolingo’s answer to the now defunct way of asking for help, and its currently being developed as a double premium feature, meaning even premium users would have to pay extra to access it. “Duolingo Max” is a steep 14$ a month subscription, and that is when you commit to reduced-price yearly plan! I can’t say I’ve tried it, but the functionality does not seem bad at all. It’s just that it’s feels like a bit of a slap in the face to have this be what defines a second, more expensive tier of premium at the expense of a perfectly good user-driven system. Why not retain the comment system and offer the AI as part of the relatively weak premium offering, even if you have to raise the price slightly?\nAll these changes very much feel like they were made to boost the attractiveness of their paid subscriptions, since you get access to other activities making the new extra monotonous design less of a pain, and by upgrading automatically turn off that highly scientific feature that totally boosts learning. You don’t understand why a certain answer you gave was wrong? Why see what other people say for free when you could fork over 14$ a month for the privilege of asking the AI? By the way, what did Duolingo do when their forums were regularly full of people complaining about yet another extremely unpopular change? Remove the entire forum… I wish I was joking. On the other hand, if I were to steel-man their position, I can appreciate that the scale of their user-base and their comparatively small team probably drove them to find solutions that do not require a lot of moderation. Even though I want to be understanding, it’s undeniable that many people found the way these changes were implemented to be quite out of touch with their user-base. I also think that they could have tried more of a Wikipedia approach, where they could have let the community moderate itself, which would have been a lot more in line with their mission.\nWith the way this push towards additional monetization is going, I have to say I can’t wait to learn how to order a\n\nCorporateCola™\n\nat\n\nBigBurger®\n\nin Spanish as a Tier 6 ultra-max-premium user! ;)\nJokes aside, I just wish the Duolingo team would have stuck a bit more to their roots, and build systems that complement these roots rather than replace them. Of course the business has to make money to grow, but what was wrong with the ads model and the standard premium subscription prior to the addition of features that just seem to annoy? I have a feeling there’s a management consultant somewhere in the Pittsburgh, PA area that we can blame for all this…"
  },
  {
    "objectID": "blog/posts/duolingo.html#final-judgement",
    "href": "blog/posts/duolingo.html#final-judgement",
    "title": "2000+ days of Duolingo - Worth it?",
    "section": "Final Judgement",
    "text": "Final Judgement\n\nIs Duolingo a good free resource to use? Absolutely. There are few apps that can compete in terms of the amount of free content. The whole package is pretty well-designed, especially if you are learning one of the popular languages like English, Spanish, or French.\nWill you learn a language to fluency using Duolingo alone? Maybe not, but it can be a good start, and complement your language learning journey. You just have to be a bit more proactive in seeking out speaking and writing practice. I think most Duolingo critical people neglect to recognize that the power of Duolingo is not that it is a comprehensive learning experience, instead it simply makes it easy to do some learning. Think about it this way: If it hadn’t been for Duolingo, I probably wouldn’t have learned any French at all. In my books, that makes using it worth it.\nIs Duolingo a good company? All things considered, yes - although I find the push towards further monetization a bit annoying.\nWill I stop using Duolingo since I have a few gripes with it? Almost certainly not - at least not until I find something that is better and just as easy to use. I don’t have the bandwidth for more traditional methods of learning at the moment, but even once I do, I think Duolingo will still be part of my routine.\n\nAnd with that, happy learning!"
  },
  {
    "objectID": "blog/posts/essentials.html",
    "href": "blog/posts/essentials.html",
    "title": "Essential tools to make the modern web more bearable",
    "section": "",
    "text": "If you somehow found this page, you probably use the internet quite a bit in your daily life. It will not come as a shock to you then, if I remind you that most if not all the online services you like to use are largely funded by advertising, and controlled by one of approximately five companies. This model has some advantages and some disadvantages, the discussion of which is not really the focus of this post.\nBecause a lot of the internet is controlled by a very small number of companies, people have created tons of tools to make using services that lack viable competitors more bearable. Admittedly, a lot of these tools are pretty esoteric, expecting significant programming experience and knowledge of computing. However, there are a few tools that I think are pretty accessible and could make your internet experience a lot more enjoyable."
  },
  {
    "objectID": "blog/posts/essentials.html#escaping-the-ads",
    "href": "blog/posts/essentials.html#escaping-the-ads",
    "title": "Essential tools to make the modern web more bearable",
    "section": "Escaping the ads",
    "text": "Escaping the ads\nBlocking ads is good for your privacy, security, and sanity. It’s good for your privacy because most ad-blocking services also interfere with tracking technologies. It’s good for your security because fraudulent ads are a common means of distributing malware. Naturally, it’s good for your sanity because ads are abundant and usually annoying.\nMost of the time, ads are injected into websites. Basically, the ads you see come from somewhere else, and are placed on the website you are visiting. The reason for this is ad-personalization. A simplified example: Google keeps logs of your activities, then uses that information to sell the right to show you ads to companies. The website you visited, which likely uses Google’s ad services, then asks Google to show you the ad of the highest bidder. Thus, the website itself has limited control over what ads you see, because the actual ads come from Google. Various ad-blocking technologies take advantage of this arrangement to block the ads before they are shown to you. They simply block the request to Google’s ad servers.\nThe most user-friendly way to block ads on desktop is to use an ad-blocking extension in your browser. The main thing to be aware of is that some ad-blockers use monetization strategies that “soften” their ambitions (search “acceptable ads”). I would recommend uBlock Origin Lite (I assume you are using Chrome). Two additional things about ad-blocking to note: Blocking ads is generally easier on desktop than on mobile, and (at the time of writing) ad-blocking extensions are more effective on Firefox desktop than on Chrome desktop.\n“Okay but what about my phone? Apps have ads!” I hear you say. You are correct, ads are a bit more wide-spread on mobile phones than they are on PCs, so a browser extension wouldn’t cut it even if you could install one. Luckily there are more “system-wide” ad-blockers available. The idea here is very much the same, blocking requests to Ad servers before they are shown to you. “DNS-filtering” as its called, is simply passing all your internet traffic (so not just the browser’s traffic) through someone’s server that blocks the requests to Ad servers. This does mean you have to trust the provider of this filtering server with all your internet traffic. I would recommend using Mullvad DNS. Not only is it completely free and extremely easy to set up on mobile, the company is also universally praised for their privacy practices. They even have a few different options you can choose from, depending on what sorts of things you want to block. If you need something more customizable, you may want to look into NextDNS, but it is slightly more work to set up. Very occasionally, DNS filtering can cause issues with some services. In my experience, this is very rare. If something does seem broken, try switching back to the default DNS provider in the network settings of your phone and see if that fixes it. Don’t forget to turn the filtering back on afterwards!"
  },
  {
    "objectID": "blog/posts/essentials.html#peering-behind-the-paywalls",
    "href": "blog/posts/essentials.html#peering-behind-the-paywalls",
    "title": "Essential tools to make the modern web more bearable",
    "section": "Peering behind the paywalls",
    "text": "Peering behind the paywalls\nIs access to information a universal right or a privilege? Depending on your answer to this question, you may have mixed feelings about removing paywalls. I am all for paying for services that I get a lot of value from. I rarely run into a pay-wall in the first place. But when I do run into one, it’s usually because some article from an outlet I don’t frequent caught my interest and is behind a very strict pay-wall. Sorry, but I’m not about to fork over $10+ for a single article I don’t even know the quality of.\nSome pay-walls are more technically sophisticated than others, so the things I am about to mention may not even work for you. I think they are worth bookmarking even if not 100% reliable. If you are lucky, the pay-wall is essentially a bit of JavaScript code layered on top of the article, in which case using a service that shows you the page without loading this JavaScript code will do the trick. If you paste the link to your article into 12ft.io, you may be able to read the article without any issues. If your browser has a “reader mode” this may also work. Should this trick not work for you don’t lose hope quite yet.\nSome outlets will have impenetrable pay-walls - unless you are a robot, in which case they may grant you a free peek. This is because these outlets want their articles to be indexed by search engines so that they show up when people search for stuff. Search engines basically have bots “crawl” from web-page to web-page to make sense of the pages content and importance. If the article you want to read has been visited by the internet archive’s bot, you have a pretty solid chance of being able to read that article. Simply copy the link to the article and paste it into the search bar on archive.org. If the article is in the archive, you should now be able to see the full thing. If it’s not, you can request it to be archived or just try again later. Of course, very recent articles are unlikely to have been archived already. Sometimes even if the page is archived it will still show the pay wall. Sad times."
  },
  {
    "objectID": "blog/posts/essentials.html#resisting-the-addictive-design",
    "href": "blog/posts/essentials.html#resisting-the-addictive-design",
    "title": "Essential tools to make the modern web more bearable",
    "section": "Resisting the addictive design",
    "text": "Resisting the addictive design\nMany businesses whose financial viability depends on maximizing ad revenue essentially aim to keep you on their platform for as long as possible so that you will be exposed to more ads. As a result, many sites are designed to be addictive. There are many elements that contribute to this addictive design, but some are more easily resisted against than others. One key mechanism is the algorithmic curation of what you are shown. Take the example of social media. Social media sites often have a premise of social connection. However, one’s feed is usually far more than just the posts of people you chose to follow, with ads, and various forms of “recommended” content. There is nothing inherently wrong with recommending other things to check out, as it may serve onboarding of new users etc., but it may not be your taste. Personally, I prefer receiving authentic recommendations from real people. Browser extensions like SocialFocus can help you see the content you want to see, and not the content that the algorithm thinks you want to see. For example, this extension lets you turn off all sorts of things on YouTube.com from Auto-play to Shorts, and even the “Recommended” section. There are settings for several websites including Facebook, Instagram, LinkedIn, X, Reddit, and more. The same developer made an even more in-depth extension dedicated to YouTube called UnTrap. This self-imposed censorship of unwanted “features” seems essential for reducing the likelihood of badly spent time, e.g., “YouTube rabbit holes”. That being said, reducing the exposure to curation is not really an option on mobile as far as I am aware. You may start to recognize lack of control being a theme with mobile devices.\nYou can also break the addictiveness of sites by setting yourself some healthy boundaries. A tool that serves this purpose well and is completely free is the popular LeechBlockNG extension. This extension lets you block certain sites for certain periods of time. You can even set up a schedule for when you want to block certain sites. There are a lot of options for how you can set up the blocking, so you can really tailor it to your needs. The creator is a pretty interesting guy too, not the typical developer type. Instead, he’s a professor of theology?!\nFinally, I wrote a previous post about RSS feed readers you may want to check out. This is admittedly a little more niche, but it can be a great way to drastically reduce the time you spend on various sites, without missing any of the action. RSS feed readers essentially let you follow websites that publish their updates in a certain format. Imagine it like YouTube subscriptions, but across websites. For example, you can have Youtube creators, Subreddit updates, and news outlets all in the same feed. There’s a really great browser extension called Feedbro that I found since writing my RSS post. If you’re interested in checking it out, do note that Feedbro stores your list of subscriptions on your computer, so you will have to export your list and save it somewhere safe if you need to switch browsers or devices. There are also cloud-based RSS readers where feeds are not stored locally (e.g., Inoreader), but they usually come with usage limits. To identify RSS feeds, maybe use Get RSS Feed URL or some other similar extension. For more information on the how, what, and why of RSS feed readers, check out my previous RSS post."
  },
  {
    "objectID": "blog/posts/essentials.html#conclusion",
    "href": "blog/posts/essentials.html#conclusion",
    "title": "Essential tools to make the modern web more bearable",
    "section": "Conclusion",
    "text": "Conclusion\nI hope you found something here that you had not heard of before and are now curious to try. There are a lot of other things I could have written about in this post1, but this felt like a good starting point with a clear theme. If you have any suggestions for tools that you think I should try, please let me know in the comments or by email. Thanks for reading!\n\n\n1 For example, I could have written about password managers, alternative search engines, privacy focussed browser extensions, or other tools like a better PDF reader for chrome-based browsers. If you are interested in any of these topics, stay tuned for an upcoming post."
  },
  {
    "objectID": "blog/posts/fast_quarto.html",
    "href": "blog/posts/fast_quarto.html",
    "title": "How to render Quarto websites faster",
    "section": "",
    "text": "Today a quick hack for pushing website updates.\n\n\nFor this Quarto website, I basically have my _quarto.yml set up such that rendering my .qmd documents to HTML will store the HTML files in a specific directory. In this case, the directory is _site.\n\n\nproject:\n  type: website\n  output-dir: _site\n\n\nI then have a bash script that will push the files in this folder only to the repository that hosts the website, and push all source files to my public website code repository. This is fairly convenient since I just run the script to update the website. However, as my website started to have more and more pages, I realized that using quarto render indiscriminately really slows down the process.\nSo it dawned upon me the other day that I could simply only render the files that have changed. Conveniently, git already tracks file changes, meaning I could use some git commands to figure out which files to render.\nThis was surprisingly easy to achieve. Here’s the essential part:\n\n\n# Get list of changed .qmd or .md files in git working tree\nCHANGED_FILES=$(git status --porcelain --untracked-files=no | awk '{print $2}' | grep -E '\\.qmd$|\\.md$')\n\nif [ -z \"$CHANGED_FILES\" ]; then\n    echo \"No changed Quarto files to render\"\n    exit 0\nfi\n\necho \"Rendering changed files:\"\necho \"$CHANGED_FILES\"\n\n# Render changed files\nquarto render $CHANGED_FILES\n\n\nThe first line simply generates a machine-readable list of changed .qmd (and .md) files in the git working tree. Then there’s an if clause and some print statements. Finally, identified files are rendered. Dead simple!\nThis is super convenient and speeds up the process of updating my website by a factor of 100 or so.\nIn case you’re interested, here’s the full bash script I use (at the time of writing):\n\n\n#!/bin/bash\n\ngit add .\n\n# Get list of changed .qmd or .md files in git working tree\nCHANGED_FILES=$(git status --porcelain --untracked-files=no | awk '{print $2}' | grep -E '\\.qmd$|\\.md$')\n\nif [ -z \"$CHANGED_FILES\" ]; then\n    echo \"No changed Quarto files to render\"\n    exit 0\nfi\n\necho \"Rendering changed files:\"\necho \"$CHANGED_FILES\"\n\n# Render changed files\nquarto render $CHANGED_FILES\n\n# Prompt for a commit message\necho \"Enter a commit message:\"\nread commit_message\n\n# --- Push source files to the main repository (lukmayer/website.git) ---\n\n# Ensure the current directory is your main project directory (not _site)\n# Add and commit changes to the source repo\n\ngit commit -m \"$commit_message\"\n\ngit remote add origin git@github.com:lukmayer/website.git\n\n# Push changes to the main repository (lukmayer/website.git)\n# Ensure 'origin' points to the source repo (lukmayer/website.git)\ngit push -f origin master \n\n\n# --- Push rendered files to the GitHub Pages repository (lukmayer.github.io.git) ---\n\n# Navigate to the _site directory (contains the rendered files)\ncd _site\n\n# Initialize a new Git repository inside _site if it doesn't exist already\nif [ ! -d \".git\" ]; then\n    git init\n    git remote add origin git@github.com:lukmayer/lukmayer.github.io.git\nelse\n    git remote set-url origin git@github.com:lukmayer/lukmayer.github.io.git\nfi\n\n# Add and commit the rendered site files\ngit add .\ngit commit -m \"$commit_message\"\n\n# Force push the rendered files to the gh-pages branch of the GitHub Pages repo\ngit push -f origin master:gh-pages  # Ensure that 'gh-pages' is the correct branch for GitHub Pages\n\n# Navigate back to the root directory of the project\ncd ..\n\n\nIf you use this script, make sure to give it execute permissions with chmod +x update.sh1 and run it with ./update.sh. Enjoy! :)\n\n\n1 Always make sure you know what shell commands do before doing this!"
  },
  {
    "objectID": "blog/posts/free_will.html",
    "href": "blog/posts/free_will.html",
    "title": "Whether we have free will or not should be inconsequential",
    "section": "",
    "text": "I’m currently taking a class on Consciousness. Today’s topic was around some of the research evidence against free will, and whether free will is possible if true randomness exists (apparently it does).\nThe discussion was interesting and got me thinking. I noticed a lot of my peers, all PhD students, some in Bio-engineering, some in Cognitive Science, seemed to neither fully subscribe to determinism nor to free will, instead questioning or reframing how free will is defined.\nTo be honest, I was completely comfortable with (hard) determinism going into the class, so I was suprised that many tried to find a middle ground.\nAfter a bit of thought, I think I have a theory for why. People doing research in biology and Cognitive Science certainly do not think of the systems they are studying as magically operating outside the constraints of the material world. For example, a core belief in Cognitive Science is that the brain implements thought (among other things) through computation. And this computation can be reverse-engineered. It’s just that the brain is mega ultra super complicated, so we have a hard time understanding what’s going on beyond highly-controlled lab settings. So beliefs about determinism basically come with the job.\nAt the same time, academic circles almost universally hold views that would certainly reject the grim, reductive description of human experience that hard determinism implies. So I think the gut reaction is that we do not like dehumanizing ourselves and other people by denouncing free will. I suppose it’s similar to how thinking about the unavoidability of one’s own death can become seriously uncomfortable, leading one to look for a resolution with which we can sleep at night. And I think it’s awesome that we have this instinctive reaction to hold ourselves (collectively) to a high standard!\nI also don’t mean to claim to be free of this bias in the slightest. If anything, I just separated professional and personal beliefs during that discussion. That being said, there were some people in the class who very adament about there being free will rather than looking for a compromise, so my theory definitely does not apply to everyone either.\nEither way, all of this got me thinking about what we should do if one day, science were to say “Without any doubt, free will does not exist.” or maybe the inverse of that staement. Although no serious scientist would ever utter such an absolute statement, let’s entertain the possibility. Should we re-design our societies depending on which side of the question the answer falls?\nIn short, I think the answer ought to be “No”.\nSimply put, the way we treat each other should not depend on the answer to this question at all.\nI think my thinking here is influenced by my interpretation of the spirit in which the first article of the German constitution was written.\nVerbatim, the first sentence of §1 reads:\n\n“Die Würde des Menschen ist unantastbar”.\n\nIn English, this could be translated to:\n\n“The dignity of the person is inviolable”.\n\nTo me, my interpretation of this paragraph aligns with the gut reaction I described above, that we ought to treat each other with dignity and so refrain from dehumanizing each other via a reductive interpreation of human nature. So despite what some businessmen who frequent news headlines more than I appreciate seem to think, I opine that empathy is not a weakness.\nSo how should we structure the systems of our societies given that we want to treat each other with dignity? Having free will implies full accountability for one’s actions. Not having free will implies that we essentially have no control over our actions. This poses a problem when you want to figure out what dignified treatment implies, which of course is the premise of this post. While the question of how to structure society is not one I am qualified to answer, I will give my two cents.\nMy answer is inspired by the Fundamental Attribution Error, a well known effect in psychology. The Fundamental Attribution Error states that we tend to attribute the mistakes of others to their character, while we attribute our own mistakes to the circumstances we happened to find ourselves in.\nWith a similar dualism in mind, I have come to think that we ought to treat each other as if we have free will in light of accomplishments, while treating each other as if we are limited in our free will in light of mistakes.\nTo me, this resolution appears maximally compliant with my interpretation of dignified treatment. It seems to align with Christian beliefs around the forgiveness of sins. It also addresses that internal conflict I described, where we want to hold ourselves to a high standard, while also recognizing that circumstance can play a significant role in how we ultimately act.\nIn conclusion, I’m a hobby philosopher now. I hope you enjoyed."
  },
  {
    "objectID": "blog/posts/futureliving.html",
    "href": "blog/posts/futureliving.html",
    "title": "Which countries are equipped to handle a storm?",
    "section": "",
    "text": "So far, I have never felt all that attached to where I live. I think that’s a big part in why I left Germany when I was 19, having since then lived in Scotland, different places in England, and now the USA. However, I do feel like I should settle down once my studies are over, so it’s been a bit of a personal hobby of mine to think about what my location priorities would be.\nThere are a lot of factors one could possibly consider, many of which are deeply personal. For example, would you prefer to speak a certain language, live in a place that has good opportunities in your industry, do you like the nature there, the culture, the people, the food, the politics? Once you have answered all these questions, you could, at least in principle, evaluate different cities within that country according to your priorities for the local situation. Of course, life never actually works out according to these kinds of master plans, and yet it is kind of fun to think about the possibilities."
  },
  {
    "objectID": "blog/posts/futureliving.html#the-problem",
    "href": "blog/posts/futureliving.html#the-problem",
    "title": "Which countries are equipped to handle a storm?",
    "section": "The problem",
    "text": "The problem\nNot to be a debbie downer or anything, but I am in some ways kind of pessimistic about the future of humanity as a whole. Not in the nuclear fallout, skynet killer AI kind of way, but more so the “Can I reasonably expect to ever be more financially secure than my parents?” kind of way.\nWithout wanting to put my doomer hat on, I think it’s fair to say that:\n\nWe are probably past peak globalism for a good little while, meaning less economic growth, more uncertainty etc.\nInequality is rising fast, increasingly eradicating the concept of there existing a “middle class”\nPopulations are declining across the board, which poses existential risks for government financed services like public healthcare systems.\nLots of other stuff that’s out of the scope for this post\n\nSo the question is, is there anywhere that’s bucking these trends? When you start searching around a bit rather than just judging places by the vibes, you’ll quickly learn that economists come up with all sorts of whimsical indexes to compare countries to each other with.\nSo I’ve decided I’d see whether I can make somewhat sensible relative judgments of the future readiness of different countries by using these indexes other people have thought long and hard about. Given my bullet list of challenges above, I’ve picked out a few that seem relevant:\n\nEconomic Complexity Index: Because the more diverse your economy the better you can handle some recessions here and there while the rest of the world is on fire.\nSocial Mobility Index: As an indicator of relatively low inequality\nGini index: Specifically the trend in Gini over time, since that would be indicative of the change in inequality during recent years.\nGovernment debt as percent of GDP: Because if you’re going through a bit of a rough patch, like a demographic crisis, you need to be able to have the cash at hand to be able to push through those hard times.\n\nI’ve also picked out a few ones that just feel like they’d be somewhat indicative of living a nicer life:\n\nGDP per capita (Purchasing Power Parity): Cuz money makes the world go round.\nSocial Progress Index: As it seems to reflect provision of and access to high quality public services.\nGlobal innovation Index: Probably useful as a very high-level indicator of future economic opportunities."
  },
  {
    "objectID": "blog/posts/futureliving.html#method",
    "href": "blog/posts/futureliving.html#method",
    "title": "Which countries are equipped to handle a storm?",
    "section": "Method",
    "text": "Method\nI grabbed most of the data from Wikipedia by using the Wikitable2csv website. Only the Gini by year data I had to grab from the website of the United Nations.\nI basically cleaned up each dataset separately, with the intention of eventually doing a complete-cases analysis. For the Gini time-series data, I decided I would fit linear regression models to each country that had at least 10 data points between 1980 and 2025. So the slope estimate is indicative of the trend. This is definitely not statistically sound, but it is decidedly convenient. I decided 1980 should be the cut-off point for the time trends based on my impression that this is around where many developed countries started to take a turn for the worse in terms of inequality. For the GDP estimates, I used the ones provided by the WorldBank.\nMany countries did not meet all my data requirements. Of course, most of these are developing countries where accurate information is hard to find. That being said, these countries are pretty unlikely to have topped the charts of my analysis anyway. Some smaller, developed countries lacked at least one of my metrics. For example, Iceland and Luxembourg are not included in the Economic Complexity Index, and New Zealand and Singapore did not have enough Gini data for my time trend estimations. Dropping these from the data is a real shame, since I would expect them to rank fairly highly if the information had been available. So when you look at my results later, keep in mind that some noteworthy contenders are not included.\nWith all of this out the way, I merged all the data together and only retained countries that have all the records I wanted. 62 countries pass all the checks. I decided to rank countries by a composite score derived from the variables I’ve prepared. Ultimately, I used the Z-score of each variable and simply calculate the row sum for each country. Z-scores are pretty neat as they standardize all variables to the scale of standard deviations from the mean, meaning that not only are all variables now in the same unit, differences between countries are still accurately retained (unlike rank-scoring). For the row sum of my Z-scored variables to be valid, I needed to ensure that all variables follow a similar distribution, so I used the Box-Cox method to automatically find the optimal transformation that makes my values normally distributed. The Box-Cox transform is only valid for positive values, meaning I additionally had to add the minimum of a variable to its values, if that variable featured negative values. Of course, I inverted the Z-scores for debt as percent of GDP and Gini time trend, since less debt is better, and decreasing Gini is better. Note that my composite score thus implicitly applies equal weights to all variables included."
  },
  {
    "objectID": "blog/posts/futureliving.html#results",
    "href": "blog/posts/futureliving.html#results",
    "title": "Which countries are equipped to handle a storm?",
    "section": "Results",
    "text": "Results\nSo that’s how I arrived at this table:\n\n\n\n\n\n\n\n\nMy results are obviously biased in the sense that they critically depend on what metrics are included in the analysis. If you do not care about GDP for example, then your ranking will probably end up looking very different from this one. I hope my reasoning for what is included was somewhat convincing though.\nIreland is often a bit painful (especially with economic data) since their figures are extremely distorted due to huge multinational companies using tax loopholes there. Here, Ireland still ranks pretty high despite my transformations, so I’d wager you should still be a bit cautious with interpreting its rank. However, you don’t quite get all the usual chart toppers.\nThe big winner of my ranking is Switzerland, which is actually not surprising at all. The Swiss do pretty well in any metric you throw at them, and they don’t even seem to be experiencing large changes in inequality like some of their neighbors. Ranks 2 and 3 (Sweden and Denmark) have experienced steeply rising inequality in recent decades. Especially Germany (Rank 7) gets a lot of flak for this, with my impression of the domestic sentiment being that politics in Germany has not been this tense in a long time. Perhaps the resilience of the German economy and it’s relatively strong public institutions ought to inspire more hope for a good future than what the vibes suggest? Ranks 4, 11 and 15 (Estonia, Czech Republic, and Slovenia) seem pretty interesting to me, given that these are countries most people sleep on. They seem to be doing pretty well, at least according to the metrics.\nSince Z-scores are always calculated based on the distribution of data points in the sample, it’s worth noting that the expected value in my composite score is 0. Cyprus appears to be the most average country in this regard. Therefore, any country with a positive score can be said to be doing above average, with a score below zero indicating the inverse."
  },
  {
    "objectID": "blog/posts/futureliving.html#conclusion",
    "href": "blog/posts/futureliving.html#conclusion",
    "title": "Which countries are equipped to handle a storm?",
    "section": "Conclusion",
    "text": "Conclusion\nPlease do not take my results too seriously. Despite the fact that I am basing my analyses on some metrics, it should not be forgotten that many of my analysis decisions were done on the basis of impressions. My approach is not exactly rigorous, and you may very well arrive at quite different results. Furthermore, a famous quote that is apparently traceable to the Danes tells us: “Making predictions is hard, especially about the future”.\nNevertheless, I thought it was pretty fun to just throw something together that appears to be a useful description of some of the preferences I hold for what a good place to life constitutes. You can download the table above as CSV, though the variables in that table are still in the original scale for better interpretability, meaning that to replicate my results, you’d have to calculate the Z-Scores yourself. My code is below.\nSo will I be moving to Switzerland? Well, maybe, though I can trace that interest to at least 2019, meaning this ranking had little to do with it. It’s close to home, (partly) German-speaking, has excellent infrastructure and beautiful nature, what’s not to like? At the end of the day, we make these kinds of decisions based on our subjective values rather than some score. And with that, I hope this was interesting to you!"
  },
  {
    "objectID": "blog/posts/futureliving.html#appendix",
    "href": "blog/posts/futureliving.html#appendix",
    "title": "Which countries are equipped to handle a storm?",
    "section": "Appendix",
    "text": "Appendix\n\nCode\nlibrary(tidyverse)\nlibrary(DT) # for table\nlibrary(forecast) # for box-cox\n\ndebt &lt;- read_csv(\"./assets/data/debt_gdp.csv\")\ncolnames(debt) &lt;- c(\"Country\", \"Gross_2024\", \"Gross_2022\", \"Net_2021\")\ndebt &lt;- debt %&gt;% select(c(Country, Gross_2024))\ndebt$Gross_2024 &lt;- as.numeric(debt$Gross_2024)\ndebt &lt;- debt %&gt;% filter(!is.na(Gross_2024))\ndebt$Country &lt;- recode(debt$Country,\n  \"Brunei Darussalam\" = \"Brunei\",\n  \"Democratic Republic of the Congo\" = \"DR Congo\",\n  \"Republic of the Congo\" = \"Congo\",\n  \"Côte d'Ivoire\" = \"Ivory Coast\",\n  \"Georgia (country)\" = \"Georgia\",\n  \"Hong Kong SAR\" = \"Hong Kong\",\n  \"Kyrgyz Republic\" = \"Kyrgyzstan\"\n)\n\nec &lt;- read_csv(\"./assets/data/economic_complexity.csv\")\ncolnames(ec) &lt;- c(\"Rank\", \"Country\", \"EC_2018\", \"Change_13to18\", \"Change_08to18\")\nec &lt;- ec %&gt;% select(c(Country, EC_2018))\nec$EC_2018 &lt;- as.numeric(ec$EC_2018)\nec &lt;- ec %&gt;% filter(!is.na(EC_2018))\n\ngdp &lt;- read_csv(\"./assets/data/gdp_pc_ppp.csv\")\ncolnames(gdp) &lt;- c(\"Country\", \"IMF\", \"IMF_year\", \"WB\", \"WB_year\", \"CIA\", \"CIA_year\")\ngdp &lt;- gdp %&gt;% select(c(Country, WB))\ngdp &lt;- gdp[2:nrow(gdp),] # drop first row (not a country)\ngdp$Country &lt;- gsub(\"*\", \"\", gdp$Country, fixed=T) #strip * from Country\ngdp$WB &lt;- gsub(\",\", \"\", gdp$WB, fixed=T) #strip , from WB\ngdp$WB &lt;- as.numeric(gdp$WB)\ngdp &lt;- gdp %&gt;% filter(!is.na(WB))\ngdp$Country &lt;- gsub(\"\\u202F\", \"\", gdp$Country)\n\ninnov &lt;- read_csv(\"./assets/data/innovation.csv\")\ncolnames(innov) &lt;- c(\"Rank\", \"Country\", \"Score\", \"Group\")\ninnov &lt;- innov %&gt;% select(Country, Score)\ninnov$Score &lt;- as.numeric(innov$Score)\ninnov &lt;- innov %&gt;% filter(!is.na(Score))\n\nmob &lt;- read_csv(\"./assets/data/social_mobility.csv\")\ncolnames(mob) &lt;- c(\"Rank\", \"Country\", \"Score\")\nmob &lt;- mob %&gt;% select(Country, Score)\nmob$Score &lt;- as.numeric(mob$Score)\nmob &lt;- mob %&gt;% filter(!is.na(Score))\n\nprog &lt;- read_csv(\"./assets/data/social_progress.csv\")\nprog &lt;- prog %&gt;% select(c(Country, `Social Progress Score`))\ncolnames(prog) &lt;- c(\"Country\", \"Score\")\nprog$Score &lt;- as.numeric(prog$Score)\nprog &lt;- prog %&gt;% filter(!is.na(Score))\nprog$Country &lt;- recode(prog$Country,\n  \"Korea, Republic of\" = \"South Korea\",\n  \"Czechia\" = \"Czech Republic\",\n  \"Republic of North Macedonia\" = \"North Macedonia\",\n  \"Cabo Verde\" = \"Cape Verde\",\n  \"West Bank and Gaza\" = \"Palestine\",\n  \"Gambia, The\" = \"Gambia\",\n  \"Côte d'Ivoire\" = \"Ivory Coast\",\n  \"Congo, Republic of\" = \"Congo\",\n  \"Congo, Democratic Republic of\" = \"DR Congo\"\n)\n\ngini &lt;- read_csv(\"./assets/data/gini.csv\")\ncolnames(gini) &lt;- c(\"Country\", \"Year\", \"Gini\", \"Footnote\")\ngini &lt;- gini %&gt;% filter(Year &gt;= 1980)\ngini &lt;- gini %&gt;%\n  group_by(Country) %&gt;%\n  filter(sum(!is.na(Gini)) &gt;= 10) %&gt;%\n  ungroup()\ngini_trend &lt;- gini %&gt;%\n  group_by(Country) %&gt;%\n  summarise(\n    gini_trend = coef(lm(Gini ~ Year))[2],\n    .groups = \"drop\"\n  )\ngini_trend$Country &lt;- recode(gini_trend$Country,\n  \"Czechia\" = \"Czech Republic\",\n  \"CÃ´te d'Ivoire\" = \"Ivory Coast\",\n  \"Korea\" = \"South Korea\",\n  \"Kyrgyz Republic\" = \"Kyrgyzstan\",\n  \"Slovak Republic\" = \"Slovakia\",\n  \"Viet Nam\" = \"Vietnam\"\n)\n\n# country name check\ndf_list &lt;- list(debt, ec, gdp, gini_trend, innov, mob, prog)\ncountries_by_df &lt;- lapply(df_list, function(df) unique(df$Country))\ncommon_countries &lt;- Reduce(intersect, countries_by_df)\nall_countries &lt;- unique(unlist(countries_by_df))\nnot_shared &lt;- setdiff(all_countries, common_countries)\ncountry_presence &lt;- sapply(all_countries, function(country) {\n  sapply(countries_by_df, function(df_countries) country %in% df_countries)\n})\nnon_shared_matrix &lt;- country_presence[, not_shared, drop = FALSE]\nprint(non_shared_matrix)\n\n# merging data\ncolnames(debt) &lt;- c(\"c\", \"debt\")\ncolnames(ec) &lt;- c(\"c\", \"ec\")\ncolnames(gdp) &lt;- c(\"c\", \"gdp\")\ncolnames(gini_trend) &lt;- c(\"c\", \"gini\")\ncolnames(innov) &lt;- c(\"c\", \"innov\")\ncolnames(mob) &lt;- c(\"c\", \"mob\")\ncolnames(prog) &lt;- c(\"c\", \"prog\")\nmerged_df &lt;- debt %&gt;%\n  inner_join(ec, by = \"c\") %&gt;%\n  inner_join(gdp, by = \"c\") %&gt;%\n  inner_join(gini_trend, by = \"c\") %&gt;%\n  inner_join(innov, by = \"c\") %&gt;%\n  inner_join(mob, by = \"c\") %&gt;%\n  inner_join(prog, by = \"c\")\n\n# box-cox\nvars &lt;- c(\"debt\", \"ec\", \"gdp\", \"gini\", \"innov\", \"mob\", \"prog\")\nfor(var in vars) {\n  min_val &lt;- min(merged_df[[var]], na.rm = TRUE)\n  if(min_val &lt;= 0) {\n    constant &lt;- abs(min_val) \n    merged_df[[paste0(var, \"_pos\")]] &lt;- merged_df[[var]] + constant\n    cat(var, \"shifted by\", constant, \"\\n\")\n  } else {\n    merged_df[[paste0(var, \"_pos\")]] &lt;- merged_df[[var]]\n  }\n  lambda &lt;- BoxCox.lambda(merged_df[[paste0(var, \"_pos\")]])\n  merged_df[[paste0(var, \"_bc\")]] &lt;- BoxCox(merged_df[[paste0(var, \"_pos\")]], lambda)\n  cat(var, \"optimal lambda:\", round(lambda, 3), \"\\n\")\n}\n\n# z-scoring\ndf_z &lt;- merged_df %&gt;%\n  mutate(across(ends_with(\"_bc\"), ~ scale(.)[,1]))\ndf_z &lt;- df_z %&gt;% select(c, ends_with(\"_bc\"))\ndf_z$gini_bc &lt;- df_z$gini_bc * (-1) # lower gini = better\ndf_z$debt_bc &lt;- df_z$debt_bc * (-1) # lower debt = better\ndf_z$score &lt;- rowSums(df_z[, -1])\ndf_z$rank &lt;- rank(-df_z$score)\n\n# final table\nfinal &lt;- merge(merged_df, df_z[, c(\"c\", \"score\", \"rank\")], by = \"c\", all.x = TRUE)\nfinal &lt;- final %&gt;% select(c(\"c\", \"debt\", \"ec\", \"gdp\", \"gini\", \"innov\", \"mob\", \"prog\", \"score\", \"rank\"))\nfinal$score &lt;- round(final$score, 2)\nfinal$gini &lt;- round(final$gini, 2)\ncolnames(final) &lt;- c(\"Country\", \"Debt.Percent.GDP\", \"Economic.Complexity.Index\", \"GDP.perCapita.PPP\", \"GINI.Trend.1980.onwards\", \"Global.Innovation.Index\", \"Global.Social.Mobility.Index\", \"Social.Progress.Index\", \"Composite.Score\", \"Rank\")\nfinal &lt;- final[, c(\"Rank\", \"Country\", \"Composite.Score\", \"Economic.Complexity.Index\", \"GINI.Trend.1980.onwards\", \"Global.Innovation.Index\", \"Global.Social.Mobility.Index\", \"Social.Progress.Index\", \"Debt.Percent.GDP\", \"GDP.perCapita.PPP\")]\n\n\n\n\nData\n\nDebt as share of GDP\nEconomic Complexity Index\nGDP per Capita (PPP)\nInnovation Index\nSocial Mobility Index\nSocial Progress Index\nGini index by country and year\n\n\n\n\n\nSessionInfo\nOther information that will be helpful for reproducibility\n\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-conda-linux-gnu (64-bit)\nRunning under: Fedora Linux 42 (Toolbx Container Image)\n\nMatrix products: default\nBLAS/LAPACK: /var/home/lm/miniconda3/lib/libopenblasp-r0.3.29.so;  LAPACK version 3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/New_York\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] forecast_8.21.1 DT_0.30         lubridate_1.9.3 forcats_1.0.0  \n [5] stringr_1.5.0   dplyr_1.1.3     purrr_1.0.2     readr_2.1.4    \n [9] tidyr_1.3.0     tibble_3.2.1    ggplot2_3.4.4   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.4      xfun_0.40         bslib_0.5.1       htmlwidgets_1.6.2\n [5] lattice_0.22-5    tzdb_0.4.0        quadprog_1.5-8    vctrs_0.6.4      \n [9] tools_4.3.1       crosstalk_1.2.0   generics_0.1.3    curl_5.1.0       \n[13] parallel_4.3.1    fansi_1.0.5       xts_0.13.1        pkgconfig_2.0.3  \n[17] lifecycle_1.0.3   compiler_4.3.1    munsell_0.5.0     htmltools_0.5.6.1\n[21] sass_0.4.7        yaml_2.3.7        jquerylib_0.1.4   pillar_1.9.0     \n[25] crayon_1.5.2      ellipsis_0.3.2    cachem_1.0.8      nlme_3.1-163     \n[29] fracdiff_1.5-2    tidyselect_1.2.0  digest_0.6.33     stringi_1.7.12   \n[33] tseries_0.10-54   fastmap_1.1.1     grid_4.3.1        colorspace_2.1-0 \n[37] cli_3.6.1         magrittr_2.0.3    utf8_1.2.4        withr_2.5.1      \n[41] scales_1.2.1      bit64_4.0.5       timechange_0.2.0  TTR_0.24.3       \n[45] rmarkdown_2.25    quantmod_0.4.25   bit_4.0.5         nnet_7.3-19      \n[49] timeDate_4022.108 zoo_1.8-12        hms_1.1.3         urca_1.3-3       \n[53] evaluate_0.22     knitr_1.44        lmtest_0.9-40     rlang_1.1.1      \n[57] Rcpp_1.0.11       glue_1.6.2        rstudioapi_0.15.0 vroom_1.6.4      \n[61] jsonlite_1.8.7    R6_2.5.1"
  },
  {
    "objectID": "blog/posts/habit.html",
    "href": "blog/posts/habit.html",
    "title": "Habit tracking with Habitica - a quick tour",
    "section": "",
    "text": "Hello internet!\nToday I want to briefly introduce you to the concept of habit trackers. I got into habit tracking some time during my undergraduate degree to help me log my fruit and vegetable intake, and have applied it to many aspects of my life from there. For someone like me back then, who had little in the way of a structured approach to achieving goals, habit tracking has really helped me make lifestyle changes that would have been pretty hard otherwise. For example, I doubt I would have been able to keep up my roughly 2000 day Duolingo streak if it had not been for habit tracking apps."
  },
  {
    "objectID": "blog/posts/habit.html#the-what-and-why-of-habit-tracking",
    "href": "blog/posts/habit.html#the-what-and-why-of-habit-tracking",
    "title": "Habit tracking with Habitica - a quick tour",
    "section": "The what and why of habit tracking",
    "text": "The what and why of habit tracking\nHabit tracking is the practice of regularly logging the outcome of tasks that you are wanting to incorporate in your routine. These tasks can be part of a daily ritual to get into the habit of something like exercise, or part of a commitment to break a bad habit like spending too much time on your phone. Tracking your success in establishing these goal behaviors helps you hold yourself accountable. This is helpful since when you notice that you are lagging behind your goals, you can make a more intentional effort to address whatever is stopping you from being consistent.\nHabit trackers as a piece of software are similar in concept to recurring tasks on a to-do list application, but differ in their feature-set. Habit trackers offer specific features tailored for measuring how well you are doing, in the form of streaks, habit strength metrics, rewards, social features and other so-called “commitment devices” to help you stay on track. Besides, having personal-life stuff like habits be separated from work tasks just gives you that little extra bit of mental peace, so I’d recommend against just using recurring tasks on your productivity apps for this purpose."
  },
  {
    "objectID": "blog/posts/habit.html#habitica-gamify-your-life",
    "href": "blog/posts/habit.html#habitica-gamify-your-life",
    "title": "Habit tracking with Habitica - a quick tour",
    "section": "Habitica: gamify your life",
    "text": "Habitica: gamify your life\nI used the “Loop Habit Tracker” for the longest time. I liked the simple UI, the fact that it was free of ads and paid features, and the “sticky reminder” setting it has. In case you don’t know, sticky reminders are notifications on your phone that cannot just be swiped away - they persist until you interact with them. This is nice because you can’t accidentally dismiss them, helping you ensure you don’t forget about that thing you meant to do.\nAfter some years of this, I was looking for a way to track habits that did not require a mobile phone app. Somewhat to my dismay, there really aren’t many fully-featured habit tracking apps on the market at the moment that support a web interface. Habitica was the only one I could find that seemed to actually still be operating, but I thought the Role-playing game plus habit tracking app concept was too gimmicky for me - I just wanted something simple after all. But I could not have been more wrong. I reluctantly tried the app, just to very quickly realize that turning habit tracking into a video game is a match made in heaven.\nHere’s how Habitica works in a nutshell. You create a character to your liking and then this basic character will grow with you as you complete tasks. There are a ridiculous amount of things you can collect for your character, including hundreds of pets, mounts, and pieces of equipment. Your character can go on quests with other people that grant additional/special rewards and introduce a social component. Your character gets stronger as you level up and gain better equipment, allowing you to gain basic rewards more easily. This means you have long-term progression in-game, as you may be grinding away for that special mount or that cool armor set, which keeps you super motivated to do all that boring real-life stuff you set out to. Since this wasn’t already enough depth, you eventually get to select a class for your character, each of which have different abilities that help you do certain type of things more easily in-game, for example by granting you the ability to keep a streak you are about to break at the cost of some resource.\n\n\n\n\n\n\nMy Habitica home-screen\n\n\n\n\n\nHabitica has tons of features that interact with this basic game play loop which I feel improve your success for establishing habits. Obviously there are the rewards and social accountability aspect. Then there’s all the basic habit tracker features you would expect such as streaks and different recurring schedules. But here’s where it gets really cool: Habitica distinguishes between different types of tasks: There are dailies, which are tasks you are looking to complete every day. Then, there are habits, which are tasks that you want to reward yourself for doing, but follow no particular schedule. Finally, there’s To-Do’s which are one-off tasks, say a mini project, like writing a blog post about habit tracking ;).\nThe gamified nature does not stop at rewards. If you miss Dailies, your character will take damage and can die, which might result in you losing some of those rewards you worked so hard for. I think having both the carrot and the stick really improves your accountability in this case. There are extra rewards for maintaining streaks, and you can also set how difficult the task is you’re looking to do, which will actually modify the size of the reward. Moreover, the strength of the habit also changes how big the reward is. Basically, if you set up a difficult task that you have been pushing away, Habitica will lure you into finally doing it as you’ll learn that it will absolutely shower you with rewards if you finally go through with it!\nSo if you’re wanting behavior change on steroids, I’d say Habitica is the way to do it!"
  },
  {
    "objectID": "blog/posts/habit.html#some-simple-tips-for-getting-started",
    "href": "blog/posts/habit.html#some-simple-tips-for-getting-started",
    "title": "Habit tracking with Habitica - a quick tour",
    "section": "Some simple tips for getting started",
    "text": "Some simple tips for getting started\nIf you’re just getting started with habit-tracking, the key is to keep it simple. Habitica users are known for having a ridiculous amount of tasks that they do on a regular basis to maximize rewards, but you really should not be doing more than one or two habits in the first couple of months. As these initial tasks become more routine to you, you can add more :) Just make sure you don’t bite off more than you can chew! It’s better to do few things well than do many things half-heartedly.\nThe second general tip I’d give that beginners often get wrong is that you want to make sure your goals are well-defined. A simple guideline here is to make S.M.A.R.T. goals, that is Specific, Measurable, Achievable, Relevant, and Time-bound. In other words, try to make your goal as quantifiable as possible, how will you know you completed the task? By when?"
  },
  {
    "objectID": "blog/posts/habit.html#further-reading",
    "href": "blog/posts/habit.html#further-reading",
    "title": "Habit tracking with Habitica - a quick tour",
    "section": "Further reading",
    "text": "Further reading\nThere are tons of books on behavior change that will go much more in depth on all the different techniques that help you achieve the lifestyle change you’re looking for.\nA highly popular one is “Atomic habits” by James Clear, but if you’re looking for a more science-informed text, “How to change” by Katy Milkman is a really great one.\n\n\nHope you’ll give these recommendations a shot, and thanks for reading! :)"
  },
  {
    "objectID": "blog/posts/kagi.html",
    "href": "blog/posts/kagi.html",
    "title": "My new favorite search engine",
    "section": "",
    "text": "I’ve been using privacy-friendly web search engines ever since I concluded that willingly giving a private company (whose business is making me click on ads) a full record of my every thought is questionable at best. In my previous search engines post I compared what I saw as the main free search engines, and noted some of the more quirky things select ones tried that stuck with me. Namely “bangs”, “lenses”, maps, and some AI features. Given my affinity for these features, it really is just the natural progression that I would end up using Kagi, a premium search engine that has all of these features and more.\nThe way Kagi works is simple: you pay a monthly fee, and in return you get a search engine that serves you well. No ads, no tracking. Since the company has to perpetually convince you that their service is worth your hard-earned cash every month, they have to make it good. And they do. While some people are almost cultish about the perceived quality of the search index itself, I think some of the real value for me comes from all the little additional features that Kagi has compared to other search engines. So today I’m going to give you a glimpse into Kagi and explain how they convinced me to pay for a service that is usually provided for “free”."
  },
  {
    "objectID": "blog/posts/kagi.html#the-search-index-itself",
    "href": "blog/posts/kagi.html#the-search-index-itself",
    "title": "My new favorite search engine",
    "section": "The search index itself",
    "text": "The search index itself\nKagi does some interesting things to surface more “organic content” than their competitors.\n\nThey compile search results from multiple sources, such as the other big providers and their own crawlers\nThey down-rank sites with many ads and trackers\nThey up-rank sites that are on a list of non-commercial sites\n\nThese changes already lead to much more pleasant results as hyper-SEO sites are more likely to be pushed down. There are obviously also no “sponsored” results. If this is not enough for you, Kagi makes it easy for you tailor your search experience.\n\n\n\nPersonalized search results\n\nKagi let’s you manually up or down-rank sites. For example, you could banish Pinterest from all your web searches with only 2 clicks. Or make sure that relevant Wikipedia pages are always at the top of the results page.\n\n\n\n\n\n\nThe context menu with which Kagi allows you to adjust how sites rank\n\n\n\n\n\nSnaps let you filter results for a specific site, for example @r best laptop would only return results from Reddit. Be honest, you are already doing this because of all the SEO spam sites, just in the more verbose “Best laptop reddit”. This feature saves you those few extra keystrokes.\nBangs search a specific site for your query, for example !yt cats would take you straight to the YouTube search page for “cats”. You can set custom bangs, and create bangs for other Kagi features like lenses or custom AI assistants (more on this later).\nLenses can be thought of as specialized search engines that only search a specific set of sites. For example, Kagi provides a “Forums” lens that only returns results from forum sites. You can also create your own lenses, should the default set not suit your needs.\n\n\n\n\n\n\nA screenshot of my drop down menu for lenses.\n\n\n\n\n\n\nUser-friendly features\n\nThere is a wide variety of filters you can apply to your search results. Kagi does images (including reverse image search), videos, podcasts, news, maps, date ranges, countries, file types, etc. You can even have it filter out image results that are likely to be AI-generated.\n\n\n\n\n\n\nKagi can help you avoid/find AI-generated images with this filter option.\n\n\n\n\n\nKagi has a built-in archive feature that lets you view archived versions of sites. This is especially useful for sites that have paywalls or are otherwise inaccessible. You can also interact with sites and documents through an LLM from the same context menu.\n\n\n\n\n\n\nThe context menu with which Kagi allows you to interact with sites and documents, including looking them up in the web archive.\n\n\n\n\n\nKagi provides many useful widgets and can feel really “smart”. For example you can trigger AI summaries of results by including ‘?’ in your query, or trigger their translation services from natural language queries1.\n\n1 Natural language queries currently seem to work best when asking to translate from English to something else. Doing the reverse requires more explicit queries like “translate ‘Kopfschmerzen’ from German to English”.\n\n\n\n\nAn example of triggering Kagi’s translation service with a natural language query.\n\n\n\n\n\nKagi has keyboard shortcuts for everything. ‘i’ for images, ‘v’ for videos, ‘q’ for quick answers, etc. It’s a very nice touch if you are a keyboard person."
  },
  {
    "objectID": "blog/posts/kagi.html#auxillary-services",
    "href": "blog/posts/kagi.html#auxillary-services",
    "title": "My new favorite search engine",
    "section": "Auxillary services",
    "text": "Auxillary services\n\n\nAI features\nKagi does AI pretty well, in my opinion. That is, they always make it optional and use it to make specific enhancements. I already mentioned the context menu for interacting with sites/docs, getting quick answers from results, and triggering translation widgets. Kagi provides more fully-featured AI stuff as well.\n\n“Kagi Assistant” is simply a chat interface to a variety of LLMs. There are a lot of models to choose from and you can switch between models within the same thread. This is only available to “Ultimate” subscribers at 25$ a month. Given that a single LLM subscription costs 20-25$ a month, an Ultimate tier Kagi subscription is kind of a no-brainer if you are already paying for LLMs. Threads can be saved and you can provide custom general instructions or create custom assistants (specific model + custom instructions). You can also set a bang for your custom assistants, or reach the assistant interface directly by typing something like !ai explain bayesian non-parametrics to me like I'm 5 into your browser.\n“Universal summarizer” lets you summarize any document or page (works on podcasts too). All you do is !sum podcast.mp3and voilà, you get a summary.\n“Kagi translate” can be accessed as a fully featured translation service. It can translate documents, offer alternative interpretations, and voice output. Nice.\n\n\n\n\n\n\nKagi’s full featured translation service.\n\n\n\n\n\n\nOther niceties\nIn my original search engine post, I lamented that online mapping services are few and far in-between, with Google and Apple being the only main providers. If the gap between Google maps and Apple seems stark, the gap between Apple maps and any independent service is starker. This is why I’m excited that Kagi is building their own mapping service, even if it is still very early days.\n\n\n\n\n\nThe Kagi maps interface.\n\n\n\n\nKagi also has a “Small Web” feature, which essentially is a collection of personal blogs. The interface basically shows you a random post from one of these sites that was published within the last week. You can like posts, and filter for the posts that other Small web users liked. This is pretty nice for finding content to follow, and in my opinion a little less brain-dead than scrolling through spammy social media feeds. My blog here got approved to this list, so maybe you are reading this post from the Small Web interface right now?\nLastly, Kagi develops Orion Browser, which is pretty unique since it is built on WebKit. For example it allows you to use both Chrome and Firefox extensions, and is reportedly super resource efficient. They recently announced that a Linux version is coming this year (currently MacOs only) and the excitement in the broader Linux community is pretty noticeable. The more purist Linux nerds seem to broadly lament both Mozilla as a company, and that everything non-Firefox is built on Chromium, so Orion seems to tick all the nerd boxes if it will indeed be released as open-source software.\n\n\nSome interesting things about Kagi as a company are that they are very active on their forums, and already profitable with zero VC funding. Their subscriber base has almost doubled since I started using them late last year. It’s nice to see a less-than-extremely-evil company do well."
  },
  {
    "objectID": "blog/posts/kagi.html#conclusion",
    "href": "blog/posts/kagi.html#conclusion",
    "title": "My new favorite search engine",
    "section": "Conclusion",
    "text": "Conclusion\nSo there you have it, paying for Kagi delivers serious results. It is pretty polished, user-friendly, and has a lot of features that make it stand out from the competition. I think they have a bright future ahead of them, and I’m excited to see where they take things!"
  },
  {
    "objectID": "blog/posts/mastodon.html",
    "href": "blog/posts/mastodon.html",
    "title": "Why Mastodon is the only social network I use",
    "section": "",
    "text": "A lot of the online platforms we have come accustomed to over the last decade or so are changing in ways we might not always appreciate. Some places have seen increasingly aggressive forms of advertising, others questionable changes in company policy, and yet others have either new or existing owners that increasingly show their true, not so nice, colors.\nDoes it really need to be like this?"
  },
  {
    "objectID": "blog/posts/mastodon.html#the-life-cycle-of-many-tech-companies",
    "href": "blog/posts/mastodon.html#the-life-cycle-of-many-tech-companies",
    "title": "Why Mastodon is the only social network I use",
    "section": "The life cycle of many tech companies",
    "text": "The life cycle of many tech companies\nThere is a noticeable pattern that once-beloved, now-bemoaned services have in common. Namely, they all start with a huge pile of cash (“Venture Capital”) that they use to firmly establish themselves with. Sometimes it’s well-done marketing, other times it’s selling at a loss, or just straight up breaking laws that gets them ahead of competitors. Most often, it’s a mix of all three and more. Only once firmly established do these companies actually start monetizing with ads or price hikes in a way that can recoup their vast, initial costs. Typically, it’s hard for users to switch services, sometimes deliberately so. For example, social networks typically rely on you not being able to convince most of your friends to go somewhere else. Once this transition to profitability takes place, you often see outcries of users lamenting the changes that come with it."
  },
  {
    "objectID": "blog/posts/mastodon.html#the-alternative-path-the-fediverse",
    "href": "blog/posts/mastodon.html#the-alternative-path-the-fediverse",
    "title": "Why Mastodon is the only social network I use",
    "section": "The alternative path: the Fediverse",
    "text": "The alternative path: the Fediverse\nIf you’re not loving the tech-company life cycle, I have good news for you.\nIn 2018 the people who decide the standards for the internet released ActivityPub, which is in essence a standardized format for social media platforms. Importantly, this means that any platforms that have the ActivityPub format in common can talk to each other.\nThanks to this development, users are able to freely move between platforms that use ActivityPub. Not only does this mean that you are not locked in to a single platform, but it also means that if you come up with a better platform, you can just start it and people can join without needing a new account. This network of interconnected platforms is called the Fediverse (Federated + Universe). What I’ve just described probably seems like a weird concept to anyone less-technologically inclined, but what’s important here is that this allows for a social network that is not controlled by any single entity. A common comparison people draw upon is e-mail, which has a similar structure of independently run services (mail providers) that interface with each other.\n\n\n\n\n\n\n\n\n\nA great visualization of how the Fediverse is a network of servers with different methods of formatting the ActivityPub protocol information. Source\n\n\n\n\n\nWhat’s Mastodon?\nMastodon is currently the most popular platform based on ActivityPub, with many different people hosting copies (“Instances”) of Mastodon. Think of each instance as a different community. All these instances can talk to each other, and you can follow people from other instances. As per the ActivityPub standard, you can also follow people from other platforms that use ActivityPub, like PeerTube (think: Youtube) or Pixelfed (think: Instagram). Mastodon looks similar to X/Twitter/Threads/Bluesky.\n\n\n\n\n\n\n\n\n\nA screenshot of my Mastodon feed.\n\n\n\n\n\n\nWhy does this Fediverse stuff matter?\nThere are two big reasons.\n1) If any Fediverse platform turns crappy, you are free to migrate your account somewhere else.\n2) If you migrate your account somewhere else, you retain your follows and followers.\nThese two attributes directly protect you from the tech-company life cycle I described above.\nMy take is that this makes Fediverse platforms much more sustainable than the more traditional social media platforms. Creators especially should be paying attention to this, because it’s fairly hard (and risky) to convince your following to move from one traditional platform to another one. A creator’s career can take a serious hit if they are forced to switch platforms. That being said, the Fediverse is not big enough yet to be of serious interest for creators looking to make their living on social media.\nBesides some of the very big servers, the Fediverse is more or less just people hosting these “instances” on their hardware because they want to1 . As such, there are no Ads, no AI-generated content, no algorithm shenanigans, no being subject to censorship you do not agree with. Platforms like Mastodon guarantee freedom in its truest form, far more than any corporate owned social media platform ever could. If you so wish you could create your own instance where no-one can censor you, and all your followers would still be able to see your postings, even if their accounts are registered somewhere else.\n1 Mainstream platforms have a tough choice: either become more like the Fediverse, or risk inducing migration from their platform to the Fediverse. I think this explains why Threads and Tumblr are embracing ActivityPub; to not appear crappy enough that it would inspire their users to switch.At the same time, you also do not need to subject yourself to spam, or content that you find deeply undesirable. Both of these things can be true at the same time for the simple reason that there is no algorithm in your main feed, just the people you follow.\nEven though other platforms leveraging ActivityPub are much less popular than Mastodon, my sense is that they will inevitably grow. This is because every time a big-tech platform does something crappy, some people permanently join the extremely diversified Fediverse. Every time the Fediverse grows it becomes better (more users, more content), and more attractive for others. Eventually, it could hit critical mass where most people will agree that the switch is worth it. This is all to say that since the Fediverse is B.S. proof by design it benefits from the mistakes of others2.\n2 Mainstream platforms have a tough choice: either become more like the Fediverse, or risk inducing migration from their platform to the Fediverse. I think this explains why Threads and Tumblr are embracing ActivityPub; to not appear crappy enough that it would inspire their users to switch.\n\n\n\nIs Bluesky part of the Fediverse?\nSadly, not really.\nWhile Bluesky is currently getting a lot of attention from X/Twitter refugees, it is also:\n\nFunded by Venture Capital, a large part of which comes from Crypto Companies3.\nNot currently federated, you can only join the server that Bluesky owns.\nUsing an in-house protocol4, not ActivityPub, meaning you cannot directly interface with the Fediverse5 .\nNot controllable by the users because their protocol requires more centralization for moderation and content distribution. In essence, only companies and rich people can run a server6.\n\n3 Do I even need to explain why this is a massive red flag?4 Questionable at best given that ActivityPub is the officially recommended protocol.5 While annoying, definitely solvable with some compatibility code.6 This is a slight upgrade to being locked in to the platform of one billionaire I guess?Personally, I strongly recognize parts of the tech-company playbook here that I described in the beginning. To me, it seems almost inevitable that Bluesky, once popular, will also make a turn for the worse. I am open to being proven wrong, but I am not holding my breath.\nMastodon may not have as good of a marketing team as Bluesky, and may also have some rough edges in the onboarding experience. However, it’s already heavily diversified, with individuals empowered to make meaningful contributions, and the development effort is moving to a non-profit model to ensure the project stays mission-driven. So yes, compared to Bluesky, I am pretty bullish on Mastodon not going rogue."
  },
  {
    "objectID": "blog/posts/mastodon.html#how-to-join-mastodon",
    "href": "blog/posts/mastodon.html#how-to-join-mastodon",
    "title": "Why Mastodon is the only social network I use",
    "section": "How to join Mastodon?",
    "text": "How to join Mastodon?\n\nhttps://joinmastodon.org\nmastodon.social is the server that the developers of Mastodon own. Either join this one, or click on another server. Which specific one does not matter much, you can change it later, but you should pay attention to the rules of the server you are joining. Servers differ in what types of content is allowed.\nFollow some people. For recommendations on how to curate your feed in the absence of algorithms, check out fedi.tips"
  },
  {
    "objectID": "blog/posts/nature.html",
    "href": "blog/posts/nature.html",
    "title": "Why is nature so disturbing?",
    "section": "",
    "text": "Why is it that I find the more gruesome scenes in nature documentaries so hard to watch, when I myself am an animal? A meat-eating animal at that. Why do I notice a reaction that seems to implicitly reject the axioms of natural selection, a system I cannot opt out of? This internal hypocrisy has been puzzling me a bit recently, and in this post, I want to dissect my intuitions a bit.\nOne convenient and intuitive explanation for the reaction I observed within myself comes from the fact that my brain can’t help but feel the pain of the prey animal featured in the documentary. But I actually think that there is more to it than just empathy.\nSomething that came to mind is that perhaps part of that reaction stems from the fact that we operate in rules-based systems and so live largely removed from mortal violence. Society has devised pretty elaborate procedures to ensure relatively fair outcomes for everyone (it’s definitely still work in progress). Just as a quick refresher, consider the fact that the animal kingdom does not have courts, insurance, healthcare, or institutionalized social safety. These are all human inventions because we do not like the alternative. So I think part of the gut reaction arises from the unexpected reminder that the default system in nature is one free of safety, justice, and any sense of certainty.\nOf course, we also choose to be ignorant about the “struggle for survival”. When was the last time you had to provision your own meat? Few of us can say to have ever gone through the full process. The anonymous meat package from the supermarket removes us wholly from the fact that we still operate within the sometimes brutal bounds of nature, whether we like it or not. Maybe one day we can all successfully do without animals for food, but for now we still largely live like predators so sophisticated that they have forgotten how to hunt.\nThe question I want to ask though, is whether this rejection of where we come from is an asset or a risk? I currently hold that it’s a bit of both.\nArguing against human ignorance is easy-pickings. Of course we should not forget that when it really comes down to it, we are just like any other animal fighting for survival. We are not special and our societies are not special either. History tells us that the rules we like so much are actually very fragile, and can be undone in a heartbeat. We should never forget that we are not above nature, simply part of it. The relative stability many of use live in today requires constant maintenance, and should not be taken for granted.\nOn the other hand, I think it’s interesting that we collectively seem to have this internal drive to create societies with special properties that deemed desirable. Ones where altruistic behaviors extends far beyond kinship, or any sort of personal relationship. For example, the nameless bureaucrat signing off your insurance claim has no interest in you whatsoever, probably has never met you, and yet they are technically doing you a significant favor. Over millenia, people have, whether intentionally or not, tinkered on how to organize large groups of people in a way that allows living together in relative peace and prosperity. So in a really weird way, the fact that you do not really know where your supermarket meat came from shows that you are part of a system that has offered you the luxury of not having to know. And just maybe, being so pampered allows us to think about where to take things next? After all, we never feel that our societies have arrived at an optimal state.\nSo in sum, what I conclude from this thought experiment of sorts is that nature documentary have a real knack for reminding us what the default setting for life is like. Perhaps more philosophically, this might reinforce that resisting a return to these unstructured circumstances requires constant and continuous effort thanks to our self-destructive tendencies. At the same time, we’re never happy and always want things to be better so it’s not like we can stop tinkering either. Maybe with all of this in mind, I will be better able to appreciate the reaction from within me the next time I see a lion approaching an unsuspecting gazelle…"
  },
  {
    "objectID": "blog/posts/quarto.html",
    "href": "blog/posts/quarto.html",
    "title": "How to easily make a website for free",
    "section": "",
    "text": "Disclaimer (dated 2024-11-03)\n\n\n\n\nWhile all the code in this post still works, I consider this post “outdated”.\nI have learned a lot more about Quarto since writing this post, and would structure this guide differently today.\nFor example, I would reconsider the whole “hosting” section, as it’s not very beginner-friendly.\nCheck out my updated guide here\nSince I am not much of a social media user (never have been), I have come to think about personal websites as a useful way to still have a presence on the internet, either as a way to share what I’m up to or as a sort of virtual business card. However, I am also neither a professional web developer nor willing to spend money to make something as simple as a ‘static’ webpage. Luckily, I did not have to, and you should not have to either.\nAs it turns out, there are multiple frameworks you can use to quite easily make a website, using almost zero actual web development code (think: HTML, CSS, JavaScript), although knowing these certainly helps. Some popular open-source ones include Jekyll, and Hugo, but today I want to talk about Quarto, which is particularly useful if you use \\(\\LaTeX\\) or want to show off some code/computations.\nQuarto, which is an open-source project developed by Posit, the company behind the popular IDE called “RStudio” is actually much more than just a framework for creating websites. This project really was intended to unify a series of different R-markdown extensions people wrote over the years. This means you can use Quarto not just for websites, blogs, and code notebooks, but also data dashboards, books, presentations, and who knows what else.\nIf you’re not familiar with R-markdown, it’s essentially how people who code in R prefer to have code and text in one file (like a Jupyter notebook, if you know that). If you don’t know any R, don’t worry. Despite the historic links to R, Quarto is actually completely language and IDE agnostic. The only languages required for setting up a website with Quarto are Markdown, which can be learned by anyone with 5 minutes to spare, and YAML, which also can be learned as you go along.\nIf you want to use the code and files I will be sharing, some knowledge of Git (version control software) will be valuable. Bash (the language that terminals on Linux and macOS use) will also be helpful. If you don’t know anything about git and terminals don’t worry too much, as I’ll try to make it as approachable as possible here by showing you how I did it. If in doubt, I encourage you to search for the relevant information you need, or perhaps use the AI model of your trust. I personally think that Git is the hardest part about copying my set-up as it’s something people who don’t write a lot of code are unlikely to know very well. Luckily, the commands we will be using are quite basic, so it should not be too hard to find the information you need if you get stuck.\nSo let’s get started, shall we? We can use Quarto to render Quarto markdown (.qmd) files into HTML which will be hosted on a GitHub server, enabling us to have a publicly available website. The files have to be hosted on a server connected to the internet if you want other people to be able to see the website. If you want to host your code somewhere other than GitHub, my incoming blabbering about Git and GitHub might not be terribly relevant to you. Instead, you should probably check out this site once you’re ready to show off that shiny new site."
  },
  {
    "objectID": "blog/posts/quarto.html#installation-and-setup",
    "href": "blog/posts/quarto.html#installation-and-setup",
    "title": "How to easily make a website for free",
    "section": "Installation and setup",
    "text": "Installation and setup\nFirst, you’ll need to install Quarto and Git. For Git, there must be endless tutorials, just search “How to install git on [your operating system]”. For Quarto I’d encourage you to just follow their guide on their website for this, as there really is nothing much I can add to this part of the process. Then, for actually setting up the website project, their guide is perfectly comprehensive. It’s only after this step where you would have to dig deeper in the documentation (which you should definitely be reading after giving my suggestions a shot) and experiment yourself to figure out how to achieve the website of your dreams, so hopefully this is where sharing my process will actually start to be helpful."
  },
  {
    "objectID": "blog/posts/quarto.html#key-files-and-commands",
    "href": "blog/posts/quarto.html#key-files-and-commands",
    "title": "How to easily make a website for free",
    "section": "Key files and commands",
    "text": "Key files and commands\nNow with your project initialized. Let’s quickly highlight some important files and concepts. The most important file is the _quarto.yml file, which basically controls the high-level structure of the website and some global settings. I’ll assume you have figured out how to render and preview the files you currently have in place from the guide on how to create the project. As you should be able to see with the default files, each page is a .qmd file.\nIf you haven’t yet, just render the files to get a first feel for what the final product looks like. Rendering and then previewing should open your browser, with the site your files give rise to displayed. If not, you are probably overdue some bug hunting. Keep in mind that our preview showing in the browser does NOT mean that the website is public!\n\nThe _quarto.yml\nHere’s what my .yml file looks like:\n\nproject:\n  type: website\n  output-dir: _site\n\nwebsite:\n  favicon: \"assets/favicons/favicon.ico\" \n  page-footer: \"Powered by &lt;a href='https://quarto.org' target='_blank'&gt;Quarto&lt;/a&gt;\"  \n  open-graph: true\n  site-url: \"https://lukmayer.github.io\"\n  title: \"&lt;img src='assets/favicons/favicon.ico' alt='Logo' style='height:40px; vertical-align:middle;'&gt;\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: \"Home\"\n      - href: research.qmd\n        text: \"Research\"\n      - href: cv.qmd\n        text: \"CV\"\n      - href: blog_index.qmd\n        text: \"Blog\"\n      - href: about.qmd\n        text: \"About\"\n    right:\n      - icon: rss\n        href: blog_index.xml\n      - icon: envelope\n        href: mailto:willuk@vivaldi.net\n        aria-label: E-Mail\n  \n\n\nformat:\n  html:\n    theme:\n      dark: [darkly, theme-dark.scss]\n      light: [flatly, theme-light.scss]\n    css: styles.css\n    toc: true\n\nextensions:\n  - copy-button\nLet’s go over what each section does. In the project header, one important thing to note is the output-dir. Here, I specify that I want Quarto to render the files we will host later into the directory called _site. This will be a subdirectory in your project folder and can have any name. The reason we are not rendering to the root project directory is that GitHub really does not like this, and may fail to host your site as a result.\nIn the website header, I have the field “favicon”. If you don’t yet know, a favicon is the little image that websites feature on your browser tab, most commonly their logo. In the field, I simply specify the relative directory (relative in the sense of within my project files) in which the image I would like to use sits. I made my favicon using favicon.io.\nThe “page-footer” field displays a message of your choice at the bottom of each page in your site. In this case, I embedded a link into the string with HTML. In case you don’t know HTML, it is the stuff between .\nThe “href” field specifies the link, “target = ‘_blank’” will ensure that clicking the link opens a new tab, and finally, the text between &gt; and &lt; specifies the text that I want to embed this link in. If you’re confused by that have a look at the rendered version. The open-graph tag is for link previews, which some websites use. So if someone shares a link to your website on a site that allows link previews, it’ll show a nice pretty preview with a picture. You can configure exactly what the link preview will show, but I didn’t bother with this.\nThe “site-url” field specifies the domain your website will be on. I needed this for some links to work correctly on the finished page. It’s not necessary to have this before you have deployed your site I don’t think.\nMy “title” field uses HTML to link to my favicon and render it at a certain size, which I felt looked quite stylish. This can just be text if you prefer. The “navbar” field controls what my navigation menu looks like. In this case, I use a bar at the top of the website.\nOn the left side of the bar, I link to different pages (my markdown files) and control the text that will be displayed on these links. On the right, I use some icons and add links to things, such as my RSS feed (this is to follow my blog, don’t worry about this for now), as well as for authoring an email to me. There are tons of icons available that are built-in to Quarto, which you can find here.\nIn the “format” section, I basically specify the themes of my website, one dark theme and one light theme. The built-in themes can be found here. If you specify one dark and one light theme, Quarto will add a toggle for people to switch between them in the navbar. The order of the fields determines which one is active by default. So in my case, the page is dark by default. In the dark and light fields I also add some .scss files that basically just change the color of the navbar and the font. This can get a little more technical so don’t worry too much about it if you like one of the built-in themes.\nFinally, in the “extensions” field I add the copy-button extension which allows people to copy the code from any code chunks I am embedding in one click. There are actually tons of cool extensions you can use, which are linked here."
  },
  {
    "objectID": "blog/posts/quarto.html#setting-up-a-blog-within-the-website",
    "href": "blog/posts/quarto.html#setting-up-a-blog-within-the-website",
    "title": "How to easily make a website for free",
    "section": "Setting up a blog within the website",
    "text": "Setting up a blog within the website\nA blog is a nice place to share things in posts. In Quarto, that basically means having a list of pages on a blog index page. The pages listed on this index all sit inside a folder inside your project directory. In case you didn’t realize yet, every quarto Markdown document has a so-called “YAML header” which is indicated by the three hyphens that denote the beginning and ending of this header. The header specifies fields and settings for that page alone. Here’s what the header looks like for my blog index.\n---\ntitle: \"Blog\"\nlisting:\n  type: grid\n  fields: [image, date, title, description, reading-time]\n  contents: posts\n  sort: \"date desc\"\n  sort-ui: [title, date]\n  filter-ui: [title, date]\n  categories: true\n  feed: true\n---\nSo in my case, I give my blog_index.qmd a title, choose a layout for my blog (there are a couple of options here), some fields that will be shown in my blog such as how long it takes to read the post (again, there is a list of things you can easily put here). The contents field specifies the folder that features all the pages I want to be listed on blog_index.qmd.\nThe next couple fields add UI for sorting/filtering and the categories field allows you to add category tags to posts which can be nice. I’ll show you how to add categories to posts in a second. The feed field enables RSS feed generation, meaning people will be able to follow updates to your blog with RSS. I plan on making a post about RSS at some point, so look out for that if that caught your interest.\nWith this in place, here is what the header of a given blog post looks like for me:\n\n---\ntitle: \"My first DIY web-app\"\ndescription: \"Just a quick post to test the blog and brielfy talk about my first ventures into JavaScript\"\nauthor: \"Luke\"\ndate: \"07/21/2024\"\ncategories:\n  - webdev\nimage: \"images/luke-23.jpg\"\ncomments:\n    utterances:\n      repo: lukmayer/site_comments\n      theme: github-dark\n      issue-term: url\n---\nThe only thing that might be unexpected here is the comments field, where I configure a piece of software that allows people to comment on posts with their GitHub accounts. I will not be covering how to set this up, but if you’re interested in having this also be part of your website look here.\nHopefully, you have a decent idea of how to achieve a blog on your webpage now!"
  },
  {
    "objectID": "blog/posts/quarto.html#about-pages",
    "href": "blog/posts/quarto.html#about-pages",
    "title": "How to easily make a website for free",
    "section": "About pages",
    "text": "About pages\nQuarto provides some templates for easily configuring a rather stylish “About the author” page. Here is how I set up mine:\n---\ntitle: \"Lukas W. Mayer\"\nabout:\n template: jolla\n image: assets/luke-23.jpg\n links:\n   - icon: github\n     text: Github\n     href: https://github.com/lukmayer\n   - icon: medium\n     text: Medium\n     href: https://medium.com/@willuk\n   - icon: envelope\n     text: Email\n     href: mailto:willuk@vivaldi.net\n---\nThe documentation for these is super easy to understand and can be found here. There are a couple templates to select from and at the bottom I add some links to other things related to me. This YAML stuff should start to look familiar at this point ;)."
  },
  {
    "objectID": "blog/posts/quarto.html#hosting-my-shell-script-for-pushing-updates-to-github",
    "href": "blog/posts/quarto.html#hosting-my-shell-script-for-pushing-updates-to-github",
    "title": "How to easily make a website for free",
    "section": "Hosting + My shell script for pushing updates to GitHub",
    "text": "Hosting + My shell script for pushing updates to GitHub\nIf you want to host your finished site on GitHub, you need to initialize a local git repository in the directory that holds the rendered files. In my case that is the _site folder. Then you push these files to a GitHub repository that you named [yourgithubusername].github.io. Then, on the settings page of this GitHub repository you enable pages. If you struggle with this step, AI tools might be more helpful than the average search for this kind of debugging.\nBecause I have my website source files on a different repository on GitHub, I created a little shell script that I can push updates to both repositories with:\n#!/bin/bash\n\n# --- Build the site with Quarto ---\nquarto render\n\n# Prompt for a commit message\necho \"Enter a commit message:\"\nread commit_message\n\n# --- Push source files to the main repository (lukmayer/website.git) ---\n\n# Ensure the current directory is your main project directory (not _site)\n# Add and commit changes to the source repo\ngit add .\ngit commit -m \"$commit_message\"\n\ngit remote add origin git@github.com:lukmayer/website.git\n\n# Push changes to the main repository (lukmayer/website.git)\n# Ensure 'origin' points to the source repo (lukmayer/website.git)\ngit push -f origin master \n\n\n# --- Push rendered files to the GitHub Pages repository (lukmayer.github.io.git) ---\n\n# Navigate to the _site directory (contains the rendered files)\ncd _site\n\n# Initialize a new Git repository inside _site if it doesn't exist already\nif [ ! -d \".git\" ]; then\n    git init\n    git remote add origin git@github.com:lukmayer/lukmayer.github.io.git\nelse\n    git remote set-url origin git@github.com:lukmayer/lukmayer.github.io.git\nfi\n\n# Add and commit the rendered site files\ngit add .\ngit commit -m \"$commit_message\"\n\n# Force push the rendered files to the gh-pages branch of the GitHub Pages repo\ngit push -f origin master:gh-pages  # Ensure that 'gh-pages' is the correct branch for GitHub Pages\n\n# Navigate back to the root directory of the project\ncd ..\nThe script essentially just runs a couple standard commands. First, I render my website and push the source files to their repository. After this, I change to the folder with the rendered files and force push these to the repositories that hosts the website. To use this, make sure that _site has been added to the .gitignore file in the main project directory.\nWith this script my workflow basically just becomes: 1) Make changes, 2) open terminal, 3) go to source directory, 4) run deploy.sh (the shell script). If you plan on using this script, keep in mind that your repository will be a different one than mine, which is further complicated by the fact that I use SSH, which will require a tutorial to set up if you are not familiar (search: “how to set up SSH with GitHub”)."
  },
  {
    "objectID": "blog/posts/quarto.html#conclusion",
    "href": "blog/posts/quarto.html#conclusion",
    "title": "How to easily make a website for free",
    "section": "Conclusion",
    "text": "Conclusion\nSo that’s it! I hope you have a good idea of how to configure a website using my approach. There are a few tricks my website uses that I didn’t cover here, but I encourage you to just check my source files if you see something that catches your interest. My source repository is public, meaning that even if you found this all still a little much, with some git skills you could just grab my source code and use it as a template to get started with!\nFrom here, you should definitely also check the Quarto documentation mentioned above. It’s currently not always extremely detailed for all possible configurations and setups, but it gives you a pretty good idea of what is possible.\nFind my source file repository here.\nIf you make a website based on my files I’d love to see it!\nThanks for reading!"
  },
  {
    "objectID": "blog/posts/r_vscode.html",
    "href": "blog/posts/r_vscode.html",
    "title": "How to use R in Visual Studio Code - The Essentials",
    "section": "",
    "text": "Have you ever wanted to use R in an IDE that is not RStudio? I’m sure many of you are already using the immensely popular Visual Studio Code for other programming languages or programming related tasks. Perhaps you have even gone so far and installed the R extension in VS Code, just to learn that it offers no way near the power and convenience of RStudio?\nBut worry not, I’m here to share with you the gospel of R in VS Code! I have been fiddling with my setup for a little while now, searching far and wide for the best resources to make R in VS Code a pleasant experience. And I think I have gotten to the point where I don’t really need RStudio anymore.\nYou actually only need to install a few things to reproduce a good base workflow. I don’t know what kind of obscure Rstudio features you consider essential, so I can’t promise to cover anything and everything. But this should be a good starting point, and is in fact enough for me to do all my work with only negligible inconveniences.\nSo let’s get started."
  },
  {
    "objectID": "blog/posts/r_vscode.html#setup",
    "href": "blog/posts/r_vscode.html#setup",
    "title": "How to use R in Visual Studio Code - The Essentials",
    "section": "Setup",
    "text": "Setup\nFirst things first, you need to install the R extension for Visual Studio Code from the extension marketplace. This will give you syntax highlighting, code completion, and a few other essentials like the variable manager.\n\n\n\nRadian\nUnfortunately, using an R terminal in VS Code is not as nice as it is in RStudio. One thing I really missed was being able to visually tell whether the terminal was busy or not. Thankfully, we can install Radian, which is a python package that provides an R terminal that’s even nicer than the one Rstudio has. You can install it with the following command:\n\n\npip install radian\n\n\nOnce installed, you can set it as the R terminal in VSCode. To do this, press Ctrl + , to start searching the settings and start typing:\n\n\n\"r.rterm.linux\": \"/home/usr/.local/bin/radian\",\n\n\nDo note that this command is specific to Linux, so you will need to change it if you are on Windows or macOS. The exact path may vary depending on your system, but you can find it by running which radian in the terminal (this command may also be Unix-specific).\nWhat’s nice about Radian is that it has a few features that the default R terminal in VS Code doesn’t have, like syntax highlighting. I find the console prompt is sufficiently informative, as it gives you a visual indication for when R is busy.\nHowever, there is still one more tweak we need to make Radian work properly in VS Code. That is, we need to enable bracketed paste mode in the settings.json file. This will make it so that when you paste code into the terminal, it will be pasted as a single block, rather than line by line (which would cause a lot of error messages if you don’t write code like a savage). To open settings.json press Ctrl + Shift + P and start typing Settings. You should see the following option come up: Preferences: Open User Settings (JSON). Open this and add the following line to the settings.json file:\n\n\n\"r.bracketedPaste\": true,\n\n\n\n\nPlots (Optional)\nBy default, plots will pop up in a separate window. I find this very annoying, and would much rather have my plots be in a tab in the editor. This can be done by adding the following line to the settings.json file:\n\n\n\"r.session.viewers.viewColumn\": { \n  \"plot\": \"Active\",\n  \"viewer\": \"Active\",\n  \"view\": \"Active\",\n  \"helpPanel\": \"Active\" \n},\n\n\nAnother nicety is to switch to the httpgd backend for plotting. This will make it so that plots are rendered in a browser (inside VSCode), which allows you to interact with them more. This can be done by adding the following line to the settings.json file:\n\n\n\"r.plot.useHttpgd\": true,\n\n\n\n\nQuarto (for Rmarkdown users)\nIf you love Rmarkdown, you will miss it sorely in VS Code, as configuring it to work properly is pretty involved. Thankfully, the folks at Posit have revamped Rmarkdown into a new package called Quarto. It’s almost identical to Rmarkdown, but with a more unified development effort. Most importantly, it is designed to be IDE agnostic, so it works great in VS Code.\nTo install Quarto, simply head to Quarto’s website and follow the instructions there. You will also need to install the Quarto extension for VS Code from the marketplace.\nI really love Quarto, and I use it for pretty much everything now, including this website. However, it’s still a new extension, so there are some bugs and missing features. For example, the preview window can be a bit more buggy than it is in Rstudio. I find that it works best when you set it to open in an external browser, and then kill and restart the preview server every now and then because it will get stuck. If you are working on a project with a lot of computation, you may want to consider enabling caching, as otherwise restarting the preview server will be time-consuming. Caching should be done with care though, as I’ve found it can sometimes cause issues with downstream code. You can make quarto open the preview in your browser by adding the following line to the settings.json file:\n\n\n\"quarto.render.previewType\": \"external\",\n\n\nBy the way, you might want to double-check the keyboard shortcuts Quarto uses, as they are not always identical to the ones in Rstudio.\n\n\n\n\nMake sure R is attached\nSometimes the R extension will not automatically “attach” R to the session. This means the environment will not be shared between the terminal and the editor, and thus you won’t see anything in the variable manager. You can fix this by clicking the button in the bottom right corner of the status bar that says “R: not attached”. This will paste a terminal command that will attach R to the session."
  },
  {
    "objectID": "blog/posts/r_vscode.html#conclusion",
    "href": "blog/posts/r_vscode.html#conclusion",
    "title": "How to use R in Visual Studio Code - The Essentials",
    "section": "Conclusion",
    "text": "Conclusion\nAnd that’s it! You should now have a functioning variable manager, terminal, plotting panel, and markdown setup. If you found any other tricks that you think I missed, do let me know in the comments!"
  },
  {
    "objectID": "blog/posts/rss.html",
    "href": "blog/posts/rss.html",
    "title": "Why ‘Doom-scroll’, when there is RSS?",
    "section": "",
    "text": "Hello once again!\nToday I want to quickly introduce you to a piece of ingenious technology that you might never have heard about if you are less than 30 years old at the time this post goes out. If you are above that age, you may have forgotten this existed. I don’t blame you. I am of course talking about a special something called RSS.\nWay before social media existed, people had to constantly check websites they were interested in (e.g., personal blogs, news sites) for updates. Of course, this was quite tedious to do. Luckily, in the late 90s some people at a former big-tech company called Netscape finally succeeded in popularizing a standardized format for websites to publish their updates in. Importantly, this format could be automatically accessed by other computers. They managed to pull this off because back then people commonly used “web portals” (think a browser start page that a corporation controls). The general idea was to help new internet users navigate the internet by showing them what sort of information is available on the mysterious inter-webs. Netscape’s portal was quite popular at the time and of course companies wanted their content to be featured on users pages, so they quickly adopted the “Really Simple Syndication” format. This wide adoption of the format in turn allowed people to later customize their portals with whatever content they wanted to follow.\nSince then, we seem to have shifted away from this decentralized, user-centric approach to content procurement. In its place we adopted more centralized services, like social media platforms, which focus on algorithm-centric content delivery. I am speculating here, but intuitively this may have happened for two big reasons. Firstly, finding and accumulating feeds of interest is effortful and time-consuming for the user. Social media feeds do this for you, and they actually try to both the following and the exploring at the same time. They achieve this mixing things you’re not following but might like into your feed. Secondly, I suspect single corporations could not make as much money with RSS feeds as social media companies. As a centralized service, you are in complete control of what your users see, meaning you can get many more advertisers to pay for the privilege of accessing your user base.\nWhile I am sure many people have greatly benefitted from the existence of these centralized services, for example by being able to gain much more interest in their person or business thanks to the more centralized structure of these networks, I also can’t help but feel that the average user bears a lot of costs from this arrangement. This is because these services still struggle to contain dubious information, and otherwise extreme content, while also using very aggressive methods of advertising. Besides the obvious benefits of having access to content recommendation systems, there may also be a slightly sinister social dimension to this. I suspect many people feel compelled to use these services because everyone else is, and/or don’t know that there are alternatives with which you can remove some of these drawbacks (if they annoy you). Using RSS is one alternative, because it allows you to just follow the content you want, across sites. Many sites including YouTube, Reddit, almost all news sites, podcasts, and academic journals still use RSS feeds, meaning you totally can get the content without any “algorithm” shenanigans. And guess what, even when sites no longer support RSS, there are tools like Politepol, which let you easily generate an RSS feed for any website. RSS is therefore a bit of an escape from platforms that you would like to stop using, but are not quite ready to leave the feeds behind.\nSo if you are interested in taking back a bit of control, here is what I would recommend that I feel is pragmatic:\n\nTo address the feeling of being locked in because everyone else is using [service], try using a unified messenger app like Beeper, which lets you retain all those DMs that are being left on read, across services.\nTry out some RSS reader service. Inoreader has a very generous free offering, and is super easy to use because you can just paste in the name or URL of the page you want to follow. The RSS feed reader built-into the Vivaldi browser is also pretty nice because it has no usage limits and Vivaldi helps you locate the RSS feed on websites. There are also lots of Free Open-Source (FOSS) alternatives that people like. Naturally, there’s an Emacs package that does it.\n\nIn case you didn’t realize, my page (like most blogs) has an RSS feed, so if you’re feeling crazy, why not give that new RSS reader a test drive?"
  },
  {
    "objectID": "blog/posts/simple_blog.html",
    "href": "blog/posts/simple_blog.html",
    "title": "Simplifying my site",
    "section": "",
    "text": "I noticed that I don’t post as regularly as I used to. I think this is due to me turning a lot of the blog posts into mini-projects. Believe it or not, but I usually spend the better part of a day on one post. Sometimes it takes up the whole weekend. I seem to have reached a point where I have an idea but don’t feel it’s big enough to warrant a full post. Then there’s also some of the file management stuff that I don’t particularly enjoy, like collecting the images and setting up the post in my site directories. It’s all just a bit too much friction. So I decided to take inspiration from many of the blogs I read, which is to just keep it dead simple.\nI’ve cut out a lot of the “Schnick-Schnack” and just kept the old content as is. I’ve also created a little shell script to help me create new posts more easily. All of this so that I can move on to more casual writing, where I’ll post whatever popped into my mind without worrying about its grandeur. I think I’ll also create a Now page. I like how they contrast the static and more curated feel of a personal website.\nHere goes the first post in this new format!"
  },
  {
    "objectID": "blog/posts/stats1.html",
    "href": "blog/posts/stats1.html",
    "title": "Math-Stats: Properties of Expectation, Variance, and Covariance",
    "section": "",
    "text": "Ever since learning about research methods as an undergrad, I was curious about how the statistics we do in our research actually worked. So in 2018, I decided to take an additional statistics course from the math department. Unfortunately, I did not necessarily learn what I had hoped for. The courses the department offered were fairly applied, meaning that we spent a lot of time learning about which formula to select when, what the degrees of freedom were for the test statistic, how to perform the computation, and how to interpret the result. This certainly helped me be more confident in my data analysis, but I still did not feel like I actually deeply understood what was going on, relying mostly on verbal rules and formulas I was taught to make decisions about my data.\nSimilarly, in my Master’s I was taking a lot of computer science courses, but again the teaching was pretty applied besides a bit of a math crash course that was meant to catch us up to the pure CS students. Sure, I know how decision trees, and KNN and co. work in algorithmic terms, but why they work in mathematical terms? I could only tell you the very basics. I decided then, especially because I was planning to do computational cognitive science research, that I should start teaching myself math.\nOver the last 3 years, I worked through the basics of most topics you’d cover in a high-school or general education curriculum at college mostly with the help of KhanAcademy, Coursera, and some textbooks. I basically just tried to do whatever I could at the end of my work day, even if it is just a few exercises on KhanAcademy. I made this my daily ritual, and stuck with it fairly strongly until very recently. I can’t claim that this has turned me into a math wizard, I definitely have knowledge gaps, and I’m neither as fast nor as precise as I’d like to be… but I’m starting to see why the nerds like this stuff… ;)\nNow that I started my PhD, I’m in the interesting position where I actually just happen to have the option to take graduate level mathematical statistics courses from a fully fledged statistics department. Taking advantage of this is actually pretty attractive, as those willing to persist with it can totally earn an M.Sc. in Stats as part of their PhD in another department. Little first-year me, just having landed in the US, signed up for the first course. First reaction: “Wow, this is pretty different to what I’ve seen before”. I did not know how to do any of the derivations that my first homework asked me for, so I panicked and dropped the course. I took a step back, I needed a better plan to be able to pull this off. After all, I was lacking years of experience compared to the average person in a Stats PhD program.\nI learned that in the US, it’s expected that you consult with the lecturer when you don’t understand things. This was perhaps a bit of a culture shock moment for me, as in the UK (where I studied before) you’d typically have little to no interaction with your lecturers outside of class. So maybe my approach was a less than optimal one from the very beginning. I started asking lecturers and students who had done the M.Sc. for tips on how to prepare. I studied a bit more Calculus, and started learning a bit more about how you actually prove and derive things. I also learned that the course actually still has a considerable applied component, so I should be able to get through it even if I don’t perfectly know everything. I decided to give it another shot.\nSo here we are, I’ve started my second year and committed to actually taking and finishing the first mathematical statistics course in the stats program. With all the new things I’ve learned in the last year, I was actually surprised to find that I can keep up okay? Proofs are still really, really hard as I still lack the intuition and experience (sometimes the necessary knowledge) to do them myself rather than just passively consume them on the whiteboard. Thankfully, for the homework problems we get, I can consult mathematical statistics books which often feature similar problems. Or even better, I can beg my mathy peers for help. Maybe it’s like this by design? My main bottleneck is definitely that I have not fully internalized all the rules and quantities I’ve been learning about and still lack some practice in doing derivations. I’ll definitely have to work a bit harder than the average student in my course to stay afloat. At the same time, wow is it satisfying to actually come up with a correct proof after a bit of struggle?!\nSo this is where I start talking about the thing this post is meant to be about. I thought, what better way to do some revision for my midterm and keep my blog alive in this busy time than to write up some of the things I’m learning as little stats blog posts? I’ll probably keep these short and sweet (except this one), limited to information I am confident is correct."
  },
  {
    "objectID": "blog/posts/stats1.html#expectation",
    "href": "blog/posts/stats1.html#expectation",
    "title": "Math-Stats: Properties of Expectation, Variance, and Covariance",
    "section": "Expectation",
    "text": "Expectation\nI’ll skip the definition of expectation and Random Variables for now, and just go to the properties.\n\n\nLet \\(c\\) be a constant, let \\(g(Y)\\) be a function of the continuous random variable \\(Y\\):\n\n\\(E[c] = c\\)\n\\(E[cY] = cE[Y]\\)\n\\(E[g_1(Y) + g_2(Y)] = E[g_1(Y)] + E[g_2(Y)]\\)\n\n\n\nIn statistics, we often want \\(E[g(Y)]\\) where \\(g(Y) = (Y - \\mu)^2\\). In this case:\n\\[Var(Y) = E[(Y - \\mu)^2]\\]\nThis also implies:\n\\[Var(Y) = E[Y^2] - \\mu^2\\]"
  },
  {
    "objectID": "blog/posts/stats1.html#variance",
    "href": "blog/posts/stats1.html#variance",
    "title": "Math-Stats: Properties of Expectation, Variance, and Covariance",
    "section": "Variance",
    "text": "Variance\nDefinition of Variance: \\[ Var(Y) = E[(Y - E(Y))^2] = E(Y^2) - (E(Y))^2 = \\sigma^2_Y \\]\n\nVariance is always non-negative: \\(Var(Y) \\geq 0\\)\nConstants have zero variance: \\(Var(c) = 0\\)\nVariance scales with constants: \\(Var(cY) = c^2 Var(Y)\\) 1\n\n1 This is easily forgotten. The reason you square is because the deviations are squared in the definition of variance.The general case for the variance of a sum of random variables is:\n\\[Var(Y_1 + Y_2) = Var(Y_1) + Var(Y_2) + 2Cov(Y_1, Y_2)\\]\nWhere \\(Cov(Y_1, Y_2)\\) is the covariance of \\(Y_1\\) and \\(Y_2\\).\nI’ll cover covariance in a bit, so hold on tight!\nWhen summing independent random variables, the general case simplifies to:\n\\[Var(Y_1 + Y_2) = Var(Y_1) + Var(Y_2)\\]\nSimilarly, when deriving the variance of a difference:\n\\[Var(Y_1 - Y_2) = Var(Y_1) + Var(Y_2) - 2Cov(Y_1, Y_2)\\]\nAnd for independent random variables:\n\\[Var(Y_1 - Y_2) = Var(Y_1) + Var(Y_2)\\] 2\n2 Note the plus!Another thing good to know with sums and variance is:\n\\[Var(\\sum_{i=1}^{n} Y_i) = \\sum_{i=1}^{n} Var(Y_i)\\]"
  },
  {
    "objectID": "blog/posts/stats1.html#covariance",
    "href": "blog/posts/stats1.html#covariance",
    "title": "Math-Stats: Properties of Expectation, Variance, and Covariance",
    "section": "Covariance",
    "text": "Covariance\nDefinition of Covariance:\n\\[Cov(Y_1, Y_2) = E[(Y_1 - E(Y_1))(Y_2 - E(Y_2))]\\]\n\\[ = E(Y_1Y_2) - E(Y_1)E(Y_2)\\]\nLet \\(a\\), \\(b\\), \\(c\\) be constants:\n\nCovariance is symmetric: \\(Cov(Y_1, Y_2) = Cov(Y_2, Y_1)\\)\nCovariance is linear: \\(Cov(aY_1 + bY_2) = abCov(Y_1, Y_2)\\)\nConstants are dropped: \\(Cov(Y_1+c, Y_2+c) = Cov(Y_1, Y_2)\\)\nRelationship to variance: \\(Cov(Y, Y) = Var(Y)\\)\n\nMuch like before, sums can be pulled out:\n\\[Cov(\\sum_{i=1}^{n} Y_i, \\sum_{j=1}^{m} Z_j) = \\sum_{i=1}^{n} \\sum_{j=1}^{m} Cov(Y_i, Z_j)\\]\n\n\nHopefully, this is helpful to someone out there who is also trying to get a handle on their MathStats crash course…\nLet’s hope I can start ‘thriving’ rather than ‘surviving’ in due time :)\nWish me luck!"
  },
  {
    "objectID": "blog/posts/stats3.html",
    "href": "blog/posts/stats3.html",
    "title": "Math-Stats: Multiple Linear Regression",
    "section": "",
    "text": "Note: I omitted ANOVA stuff from this presentation because I already used the general notation in the presentation for Simple Linear Regression"
  },
  {
    "objectID": "blog/posts/switcher.html",
    "href": "blog/posts/switcher.html",
    "title": "Customizing the theme icon for Quarto websites",
    "section": "",
    "text": "In Quarto websites you can specify more than one theme, like so:\nformat:\n  html:\n    theme:  \n      dark: darkly\n      light: morph\nIf you define your light and dark theme in this way, the rendered website will have a switch icon in the navbar.\nThe icon this theme toggle uses by default is too abstract for my taste.\n\n\n\nThe default theme switcher icon\n\n\nI definitely prefer the more commonly used sun and moon icons, so I set out to find a way to replace this icon.\nNaturally, I first tried to find other people who wanted to replace this. I found one GitHub Issue thread where people were discussing different ways of going about it, but it didn’t seem like anyone had a complete solution quite yet.\nAfter a lot of experimenting, I found a way that works for me. Funnily, it’s pretty similar to what was discussed in the thread, as what I arrived on is basically a mix of two of the pre-existing answers.\n.quarto-color-scheme-toggle {\n  margin-right: 8px !important;\n}\n\n.quarto-color-scheme-toggle:not(.alternate) .bi::before {\n  background-image: url('data:image/svg+xml,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"%234a5568\" class=\"bi bi-moon-stars-fill\" viewBox=\"0 0 16 16\"&gt;&lt;path d=\"M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z\"/&gt;&lt;path d=\"M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.734 1.734 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.734 1.734 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.734 1.734 0 0 0 1.097-1.097l.387-1.162zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L13.863.1z\"/&gt;&lt;/svg&gt;') !important;\n}\n\nbody.quarto-dark .quarto-color-scheme-toggle &gt; .bi::before {\n  background-image: url('data:image/svg+xml,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"%23d1d5db\" class=\"bi bi-sun-fill\" viewBox=\"0 0 16 16\"&gt;&lt;path d=\"M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.414a.5.5 0 1 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707z\"/&gt;&lt;/svg&gt;') !important;\n}\nI’m basically just loading icons from the built-in bootstrap icon set, filling them with a color from each of my themes, and targeting the CSS of the toggle. I also added a bit of space so that the icon is not right next to the search button.\nThe part that took me some trial and error was that the dark mode icon is selected slightly differently than the light mode one. Also, in both cases I use the before pseudo-element so that I can inject these elements without modifying the HTML.\nThis works pretty well as I hope you can see from this site!\nSo in case you were also looking to change the icon, feel free to use/modify the above. Should it be broken by the time you read this, you can always check my source files :)"
  },
  {
    "objectID": "blog/posts/utterance_theme.html",
    "href": "blog/posts/utterance_theme.html",
    "title": "How to have theme-adaptive comment sections in Quarto websites",
    "section": "",
    "text": "Quarto sites can very easily have comment sections thanks to some pretty creative uses of GitHub Issues.\nIf you wanted to add a comment section to a page on your Quarto website usually you’d use something like this in your YAML front-matter:\ncomments:\n  utterances:\n    repo: username/reponame\n    theme: github-dark\nThe problem with this is that you are locked into one theme. So if someone is browsing your site in light mode they might have to stare at an uncomfortably dark comment section. Or alternatively, some basement dweller’s eyes are burnt to a crisp by your glaringly white comment section.\nUtterances itself has an option where you can set the theme to adapt to the user’s system theme, but this option does not appear to be implemented in Quarto.\nGiven that Utterances clearly already has the capability to change theme, I figured it could not be all too difficult to work around the fact that this particular setting is not currently functional in Quarto.\nIndeed, I managed to get it working fairly quickly with simple HTML includes. What made this tricky is that in my initial solution, the theme would be set on page load. This meant that you could still experience a mismatch if you switched the theme while on the current page. Resolving this took a bit of JavaScript to ensure that theme changes are detected at the right times:\n&lt;div id=\"utterances-container\"&gt;&lt;/div&gt;\n\n&lt;div id=\"utterances-container\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\nclass UtterancesThemeManager {\n  constructor() {\n    this.container = document.getElementById('utterances-container');\n    this.loaded = false;\n    this.init();\n  }\n\n  getTheme() {\n    const checks = [\n      () =&gt; document.body.classList.contains('quarto-dark'),\n      () =&gt; document.documentElement.classList.contains('quarto-dark'),\n      () =&gt; document.body.getAttribute('data-bs-theme') === 'dark',\n      () =&gt; document.documentElement.getAttribute('data-bs-theme') === 'dark',\n      () =&gt; document.body.classList.contains('dark'),\n      () =&gt; document.documentElement.classList.contains('dark')\n    ];\n\n    return checks.some(check =&gt; {\n      try { return check(); } catch { return false; }\n    }) ? 'dark' : 'light';\n  }\n\n  async waitForPageReady() {\n    return new Promise((resolve) =&gt; {\n      const checkReady = () =&gt; {\n        const conditions = [\n          document.readyState === 'complete',\n          document.body.offsetHeight &gt; 0, \n          window.getComputedStyle(document.body).backgroundColor !== '', \n          !document.querySelector('link[rel=\"stylesheet\"]:not([media=\"print\"])') || \n          Array.from(document.querySelectorAll('link[rel=\"stylesheet\"]:not([media=\"print\"])')).every(link =&gt; link.sheet)\n        ];\n\n        if (conditions.every(Boolean)) {\n          setTimeout(resolve, 200);\n        } else {\n          setTimeout(checkReady, 50);\n        }\n      };\n\n      checkReady();\n    });\n  }\n\n  async loadUtterances() {\n    if (this.loaded) return;\n\n    try {\n      await this.waitForPageReady();\n\n      let theme = this.getTheme();\n      await new Promise(resolve =&gt; setTimeout(resolve, 100));\n\n      const stableTheme = this.getTheme();\n      if (theme !== stableTheme) {\n        theme = stableTheme;\n        await new Promise(resolve =&gt; setTimeout(resolve, 100));\n      }\n\n      console.log('Loading Utterances with theme:', theme);\n\n      this.container.innerHTML = '';\n\n      const script = document.createElement('script');\n      script.src = 'https://utteranc.es/client.js';\n      script.setAttribute('repo', 'lukmayer/site_comments');\n      script.setAttribute('issue-term', 'pathname');\n      script.setAttribute('theme', theme === 'dark' ? 'github-dark' : 'github-light');\n      script.setAttribute('crossorigin', 'anonymous');\n      script.setAttribute('async', '');\n\n      script.onload = () =&gt; {\n        this.loaded = true;\n        console.log('Utterances successfully loaded');\n      };\n\n      this.container.appendChild(script);\n\n    } catch (error) {\n      console.error('Error loading Utterances:', error);\n    }\n  }\n\n  updateTheme() {\n    const iframe = document.querySelector('.utterances-frame');\n    if (iframe) {\n      const theme = this.getTheme();\n      const utterancesTheme = theme === 'dark' ? 'github-dark' : 'github-light';\n\n      try {\n        iframe.contentWindow.postMessage(\n          { type: 'set-theme', theme: utterancesTheme },\n          'https://utteranc.es'\n        );\n        console.log('Updated Utterances theme to:', theme);\n      } catch (e) {\n        console.warn('Failed to update Utterances theme:', e);\n      }\n    }\n  }\n\n  setupObservers() {\n    let updateTimeout;\n    const debouncedUpdate = () =&gt; {\n      clearTimeout(updateTimeout);\n      updateTimeout = setTimeout(() =&gt; this.updateTheme(), 150);\n    };\n\n    const observerConfig = {\n      attributes: true,\n      attributeFilter: ['class', 'data-bs-theme']\n    };\n\n    [document.body, document.documentElement].forEach(element =&gt; {\n      const observer = new MutationObserver(debouncedUpdate);\n      observer.observe(element, observerConfig);\n    });\n  }\n\n  init() {\n    this.setupObservers();\n\n    if (document.readyState === 'loading') {\n      window.addEventListener('load', () =&gt; {\n        setTimeout(() =&gt; this.loadUtterances(), 300);\n      });\n    } else {\n      setTimeout(() =&gt; this.loadUtterances(), 500);\n    }\n  }\n}\n\nnew UtterancesThemeManager();\n&lt;/script&gt;\n\nUsing this more complicated include requires the following setup for the page meant to include the comment section:\nformat:\n  html:\n    include-after-body: ../../_includes/utterances.html\nWhich means that the big chunk above should be saved to a file that’s accessed in the include-after-body setting. In case you don’t know, this uses relative paths, where ./ would be your project’s root directory and ../ simply means navigating up one directory from the source file location.\nHope this helps! If something is unclear, leave a comment in the theme-adaptive comment section below and I’ll try to clarify."
  },
  {
    "objectID": "blog/posts/vivaldi2.html",
    "href": "blog/posts/vivaldi2.html",
    "title": "Vivaldi is a strange browser",
    "section": "",
    "text": "Vivaldi is by-far my favorite browser thanks to its unique and extensive feature set, which I touched on in my first Vivaldi post. However, as a power-user of two years going strong, I have noticed a thing or two about it that seem a little odd! Here is a collection of all those little things that to me were unexpected, frustrating, or desperately needed in Vivaldi. I’ll be talking from the perspective of someone who uses the flatpak version of Vivaldi, assuming that the quirks are the same across platforms."
  },
  {
    "objectID": "blog/posts/vivaldi2.html#what-is-up-with-sync",
    "href": "blog/posts/vivaldi2.html#what-is-up-with-sync",
    "title": "Vivaldi is a strange browser",
    "section": "What is up with Sync?",
    "text": "What is up with Sync?\nVivaldi offers a feature that allows you to sync things like your bookmarks and your settings to their server (encrypted), so that you can easily recreate your configuration on a different machine. This is of course a great feature, and I’m glad it’s there. However, what’s really frustrating about it is that it doesn’t sync everything. For example, notes and reading list contents are synced, but the list of RSS feeds you follow is not. Settings are synced, except the keyboard shortcuts (very annoying). Your theme is not synced, and neither is your configuration of the UI. Your calendar and mail accounts need to be added anew every time as well. From the user’s perspective, this feels like a mess. Isn’t my list of feeds literally just a list of links? Why would that not be sync-able? Same with the keyboard shortcuts etc. It’s just really confusing, and I hope they expand sync soon to include basically everything."
  },
  {
    "objectID": "blog/posts/vivaldi2.html#calendar-is-weird-on-android-its-even-weirder",
    "href": "blog/posts/vivaldi2.html#calendar-is-weird-on-android-its-even-weirder",
    "title": "Vivaldi is a strange browser",
    "section": "Calendar is weird; on Android it’s even weirder!",
    "text": "Calendar is weird; on Android it’s even weirder!\nThe built-in calendar is amazing, and currently it’s the main way I organize my schedule and To-Do’s. However, it’s not without its quirks. For example, if you use the To-Do list, you can’t create multiple different lists. Or can you? Actually, you can, but it’s unintuitive to the point I only learned about it a few months ago. Basically, you have to create a new calendar, and then you can create a new To-Do and assign it to that calendar. To view one list at a time, modify the list of calendars being shown. If you use the ‘Tasks’ panel you would never know this, because it doesn’t show the list of calendars. You only come to appreciate the existence of this “naturally” if you use the internal calendar page rather than the panel.\nUsing calendar on mobile devices is even stranger. Unlike the Desktop client, the mobile app does not have the calendar built-in. This is surprising in itself, as it does seem like something that mobile users of Vivaldi would really want, especially given that other “productivity features”, e.g., notes, are available on mobile. What’s weird is that this does not imply you can’t use the calendar on mobile. Of course if you use a popular calendar that you set up with Vivaldi like Google Calendar, you can access it on your phone using Google’s app. But what if you use Vivaldi Webmail as the calendar provider, like me? After all, there is no Vivaldi Webmail app, so how to do it? It turns out you can use a third-party app that supports CalDAV, like DAVx5, to sync your Vivaldi calendar to your phone. This is a bit of a hassle, and it’s not clear to me why Vivaldi doesn’t just integrate the calendar and everything else into the mobile app.\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you want to use DAVx5, be sure to download it from F-droid, where it’s free, rather than the Play Store where it costs money."
  },
  {
    "objectID": "blog/posts/vivaldi2.html#panels-and-pop-outs-should-have-feature-parity-with-internal-pages",
    "href": "blog/posts/vivaldi2.html#panels-and-pop-outs-should-have-feature-parity-with-internal-pages",
    "title": "Vivaldi is a strange browser",
    "section": "Panels (and Pop-outs) should have feature parity with internal pages",
    "text": "Panels (and Pop-outs) should have feature parity with internal pages\nAs I mentioned in the calendar section, using the panel version of a feature is often inferior to the non-panel implementation. This is pretty strange when considering that the default configuration of Vivaldi heavily nudges you towards using the panels since it’s part of the default UI. This is very unfortunate as in the past it has led me (and therefore probably also others) to initially write off features as not mature enough for my use-case, when actually they were, just not their panel implementation. Given this situation, the Vivaldi team should strive to ensure that the features are identical across the different instantiations, so that users have the flexibility to pick and choose the version that suits them better, without compromising on functionality.\nFeature parity also implies that there should be an internal page version, a panel version and a pop-out version of every major feature. This is not the case for most features! I think Downloads is the only one to have all three versions close to parity. An option to configure a keyboard shortcut to activate each version is also a must!"
  },
  {
    "objectID": "blog/posts/vivaldi2.html#the-unwritten-rules-of-ui-customization",
    "href": "blog/posts/vivaldi2.html#the-unwritten-rules-of-ui-customization",
    "title": "Vivaldi is a strange browser",
    "section": "The unwritten rules of UI customization",
    "text": "The unwritten rules of UI customization\nVivaldi lets you add/remove buttons from the UI, as well as move them around. You can also hide/show the bars on which these buttons sit. Basically there is the Window Title bar, the Tab bar, the Address bar, the Panel bar, and the Status bar. There are quite a few non-obvious rules about this customization. For example, you can put icons (e.g. panels) on the status bar, hide the status bar, and still use the panel so long as you hit the keyboard shortcut to activate it! You do not get this same behavior if you put panel icons on a hidden address bar, for example. However, every time you hide the panel bar, the panel will unload, which means opening panels when this bar is hidden takes a lot longer than it should. If you activate a panel while the panel bar is hidden, the bar will become unhidden even if the panel button is not actually on the panel bar. Personally, I find this automatic displaying of the panel bar and its associated unloading behavior pretty annoying, and I wish this could be changed.\nThe address bar needs to contain an address field if you wish to use the keyboard shortcuts to focus the address bar. What’s strange is that you can hide the address bar and the keyboard short-cut will still work, with a field opening so that you can see what you are typing. This is awesome! What’s less good however is that it’s not really feasible to hide the address bar, especially if you use the built-in mail client. This is because the mail client uses the address bar to show mail UI, and some of it cannot be replaced with keyboard shortcuts. This forces you to either manually hide/show the address bar or just live with one more bar than you would like. If you commit to hiding the address bar and do not have tabs on top, Vivaldi will replace it with a window title bar instead of just having nothing at the top like you asked. This is not a big deal, but it’s a little annoying.\nLastly, you can’t put anything anywhere, which is a little disappointing. For example, you can have only some very specific things on the window title bar, and only the workspace switcher on the tab bar. I would like to see more flexibility in this regard."
  },
  {
    "objectID": "blog/posts/vivaldi2.html#what-i-want-for-christmas",
    "href": "blog/posts/vivaldi2.html#what-i-want-for-christmas",
    "title": "Vivaldi is a strange browser",
    "section": "What I want for Christmas",
    "text": "What I want for Christmas\nAll the little annoyances aside, I really love Vivaldi and I think it’s the best browser out there. However, there are a few features that I would really like to see added. One such feature is the introduction of a Firefox-style overflow menu. I’d like it to basically be an icon you can add to the UI which acts as a folder for other icons. Let’s say you have some panels for work, some for personal stuff, and some for fun. You could put all the work panels in the work overflow menu, and all the personal panels in the personal overflow menu. This would make the UI a lot cleaner (especially if you use lots of panels) and more organized.\nWorkspace specific UI is related to the first point. Basically, let’s again think about you having a work workspace and a personal workspace. You could have a different set of panels, buttons, and bars for each workspace. This would be really cool, and would make it easier to separate work and personal stuff. This should probably be optional though, in case you only use workspaces for tab separation.\nThe ability to have a “One line” configuration is something I’d love to see. I have seen this in custom Firefox CSS, where basically the tab bar and the address bar are combined into one. This would be great for people who want to maximize screen real estate, or those who crave minimalistic configurations.\nAnother minimalism craving I have would be an option to automatically hide menu bars when not in use. Brave browser has this, where if you hover your cursor over the vertical tab bar, it will expand, while only showing you the favicons when not in use. This is a great feature and I would love to see an expanded version of this idea that applies to most, maybe all menu bars in Vivaldi.\nThere is a dark mode for all websites option for Vivaldi, but it’s a bit annoying to use. I would like to have it on by default and only toggle it off for specific websites. Unfortunately, the way it currently works you need to restart the browser each time you toggle. This is quite the hassle, and is the only reason I still rely on extensions for my dark mode needs. I wish there was a little button you could press to easily switch between light and dark mode, without needing to restart the browser. If I remember correctly, that is how it used to work in Opera, which I quite enjoyed.\nLastly, since Vivaldi is all about customization, I would love to see what other people are doing with it. Therefore, it would be amazing to export the entire setup you have for Vivaldi (minus your personal data of course) and share it with others. Kind of like how you can share themes, but with the entire configuration. This would be a great way to learn about how other people use Vivaldi, which could serve as an inspiration for your own setup.\n\n\n\nThat’s all I have right now! Are there any quirks I missed? Or any features you’re dying to see? If so, I’d be interested to hear about them in the comments :)"
  },
  {
    "objectID": "blog/posts/vivaldi4.html",
    "href": "blog/posts/vivaldi4.html",
    "title": "Vivaldi features: Personal Best-of",
    "section": "",
    "text": "I’ve written quite a bit about Vivaldi by now [1], [2], [3] but so far I’ve never really gone into detail about what I like about it.\nIn this post, I’ll highlight all the features I like that together make Vivaldi my favorite browser by far."
  },
  {
    "objectID": "blog/posts/vivaldi4.html#customization",
    "href": "blog/posts/vivaldi4.html#customization",
    "title": "Vivaldi features: Personal Best-of",
    "section": "Customization",
    "text": "Customization\nVivaldi is famous for its flexibility. By default, the Vivaldi UI is quite busy, probably to give new users a good impression of just how extensive the feature set is. But if you are like me and prefer a more minimalistic look, then you will be happy to know that you can customize the UI to your heart’s content. In principle, you can arbitrarily hide and/or rearrange every button you want, though there are some (unwritten) rules to what is possible. This is similar to what you can do in Firefox, but on steroids.\n\n\n\n\nMy minimal Vivaldi setup\n\n\n\nVivaldi does not force you into a particular workflow, instead consistently giving users multiple options to choose from. As a small example, you can set the tab bar to whichever edge of the window you prefer, use a “panel” to manage tabs instead or not have any tab UI at all. Users can opt in to Vivaldi’s “productivity features” or keep using their own preferred methods. You can configure mouse gestures if that is of interest to you. You can set custom keyboard shortcuts for almost anything. The list goes on, but basically, Vivaldi is not invested in getting you to use anything in particular, instead it gives you tools and a platform to craft your own workflow in a way that is accessible to most people (in other words, low/no-code).\nIf that wasn’t enough for you, you can also very easily install mods (CSS and JS code) to further tweak Vivaldi, something I make use of to add polish to some rough edges I ran into for my particular setup.\nFinally, themes are easily created, shared, installed, and tweaked. I’ve even made a few myself."
  },
  {
    "objectID": "blog/posts/vivaldi4.html#mail-calendar-rss-feed-reader-integration",
    "href": "blog/posts/vivaldi4.html#mail-calendar-rss-feed-reader-integration",
    "title": "Vivaldi features: Personal Best-of",
    "section": "Mail, Calendar, RSS feed reader integration",
    "text": "Mail, Calendar, RSS feed reader integration\nVivaldi has full integration for E-mail, Calendars, and RSS feeds. In this particular aspect, Vivaldi is entirely unique among contemporary browsers.\nThe mail and calendar client is a full-featured client that can handle multiple accounts, and has a very nice UI that adapts to your theme. Mail has a lot of features that you would expect from a desktop client, like filters, labels, and search. Composing a mail opens a tab. It’s more powerful than Outlook or Gmail web-clients since neither can handle multiple accounts without compromises, though Outlook probably has some niche features that Vivaldi doesn’t have. I also find it better designed than Thunderbird, with common tasks being easier to do.\n\n\n\n\nA screenshot of Vivaldi’s mail client\n\n\n\nCalendar supports tasks, keyboard shortcuts, multiple views. It also allows you to create templates for event categories. Again, it’s pretty powerful and yet super easy to use.\n\n\n\n\nMy calendar in Vivaldi\n\n\n\nI’ve previously written about RSS feeds and why it’s a good idea to make use of them. I actually never knew RSS was a thing before using Vivaldi and quickly discovered how useful it is for keeping up with scientific publications. Since then, I have greatly expanded my use of RSS readers. Vivaldi offers a built-in RSS feed reader that’s super easy to use, since Vivaldi helps you find RSS feeds on websites. It has no usage limits, stores data locally, and feeds can be exported if you decide to switch. I use the Feed reader to keep up with blogs, scientific publications, and YouTube channels. It’s a great way to stay up to date without having to visit dozens of websites.\n\n\n\n\nThe RSS feed reader in Vivaldi\n\n\n\nI also like that Vivaldi offers these things for free to make their browser more attractive, rather than trying to generate ad-revenue from them like other companies. More on Vivaldi’s business model here."
  },
  {
    "objectID": "blog/posts/vivaldi4.html#tab-switcher-command-palette-tab-tiling",
    "href": "blog/posts/vivaldi4.html#tab-switcher-command-palette-tab-tiling",
    "title": "Vivaldi features: Personal Best-of",
    "section": "Tab switcher, Command palette, Tab-tiling",
    "text": "Tab switcher, Command palette, Tab-tiling\nNow I want to highlight some smaller features that just make life easier.\nFirst up is the tab switcher. If you use keyboard shortcuts to switch tabs, you’ll love this feature. It’s similar to what many coding IDE’s have. That is, if you hit Ctrl + Tab you get a preview of all your tabs and can navigate which tab you want to switch to by repeatedly hitting Tab. There’s even a little preview image of the tab you’re about to switch to. It’s nice because you don’t have to flip through every tab until you get to the one you wanted. It’s definitely a small touch, but wow does it feel good.\n\n\n\n\nTab switcher: A feature I never knew I needed\n\n\n\nNext up, the command palette. By default, you can open the command palette with Ctrl + E. This opens a little pop-out that has many uses. It lets you change settings on the fly, has access to tools like a calculator, can be used to open a bookmark, or perform an internet search in a new tab. I use this all the time to quickly open a new tab and search for something, or crunch some numbers. I really miss this whenever I have to use another browser.\n\n\n\n\nCommand palette: Really hard to go without once you’re used to it\n\n\n\nFinally, tab-tiling. Tab-tiling is a feature that increasingly many browsers have, but Vivaldi’s had this for many years, and it’s really well implemented. Using keyboard shortcuts or a UI button, you can tile tabs in a grid, horizontally, or vertically. This splits the window into multiple panes, each showing a different tab. This is great for multitasking, say if you want to watch a video and take notes.\n\n\n\n\nTab tiling: Perfect for multitasking"
  },
  {
    "objectID": "blog/posts/vivaldi4.html#other-niceties",
    "href": "blog/posts/vivaldi4.html#other-niceties",
    "title": "Vivaldi features: Personal Best-of",
    "section": "Other niceties",
    "text": "Other niceties\nNow some features I use in Vivaldi that are nice but not as flashy or unique as the ones mentioned previously.\n\nCustom search engines: Set as many search engines as you want, and give them a keyword to quickly search with them.\nReading list: Save pages for later reading. I use this for saving journal articles that caught my eye, but I don’t have time to read right now.\nWeb panels: A view that can open a partition of the window to show an internal page of Vivaldi (e.g. Mail), or some arbitrary website. For example, I use Vivaldi’s “Window” panel to manage my tabs, which is a bit like “Tree Style Tabs” in Firefox.\nWork spaces: Workspaces are like having multiple browser windows open at once, but in one window. You can have different tabs open in different workspaces, and switch between them easily via the UI or a keyboard shortcut. I use this to keep my work tabs separate from my personal tabs.\n\n\n\n\n\nThe window panel: A different take on vertical tabs"
  },
  {
    "objectID": "blog/posts/vivaldi4.html#theres-way-more",
    "href": "blog/posts/vivaldi4.html#theres-way-more",
    "title": "Vivaldi features: Personal Best-of",
    "section": "There’s way more",
    "text": "There’s way more\nI’m really just scratching the surface here, since I focussed on what I use. For example, Vivaldi recently added a feature that lets you add widgets to the new tab page. Widgets can be things like a clock, a weather forecast, your RSS feed, or some arbitrary website. It’s cool but doesn’t fit my minimalistic setup. Then there are niche features like tab groups (kind of similar to work spaces), mouse gestures (configuring commands to mouse movements), and sessions (saving a collection of tabs to open later). There’s also a built-in markdown-based note-taking client I didn’t even touch upon. I also didn’t really mention all the little settings you can tweak, for example that there are 2 different styles to choose from for the tab switcher.\nThe point is, Vivaldi is a user-friendly canvas for browsing the internet, and you can paint it however you like with a rich set of brushes. It may be overwhelming at first, but once you get the hang of it, it’s really hard to use anything else."
  },
  {
    "objectID": "blog/posts/wifi.html",
    "href": "blog/posts/wifi.html",
    "title": "Quick Fix for Public WiFi on Linux",
    "section": "",
    "text": "As of the time of writing, I run Debian with KDE on my little Lenovo laptop. Before that, I was using Debian server… In other words, I installed everything from scratch. The reason for this bare-bones approach was mostly to see what it’s like to live without a desktop environment. This had some niceties, like being extremely lightweight and fully embracing the power of my window manager at the time (Qtile). However, it also had plenty of downsides, such as constantly being caught out when having to spontaneously connect to a device I hadn’t connected before. I simply didn’t (and still don’t) have the necessary experience that would allow me to solve these issues on the fly without some research. In my life as a PhD student these off-guard moments happened quite often, for example when giving any sort of presentation. That’s why I ended up returning to the Desktop Environment world - to benefit from the convenience of someone else having thought of all the little things that I might run into in my daily life. Sometimes, “bloat” is the price you pay for convenience.\nDespite using a desktop environment again, which is probably what 90% of Linux users do, there are still odd occurrences that seem to catch the pre-configured settings off guard. One that I frequently experience recently is some failure when connecting to many public Wi-Fi networks. From what I understand, these issues arise because the captive portal (the login page for the public Wi-Fi) is sometimes separate from the network that you connect to, and sometimes the network doesn’t automatically redirect you to the captive portal. This is a problem because the network manager doesn’t know that you need to log in, so it just sits there trying to connect to the internet, but you’re never actually getting online. Even more confusingly, some public Wi-Fis are set up differently than others, so even when you found a solution for one public Wi-Fi giving you headaches, it does NOT mean that the same solution will work for all other public Wi-Fis. If you’re in a situation where the frequently recommended solution does not work, it can be pretty frustrating. This is why I’m writing this post - to document the solutions that I’ve found for the public Wi-Fis that I’ve encountered. I think these are worth documenting locally on your device for quick reference when in a pinch. I actually only have three tricks up my sleeve, but have yet to encounter a network that I couldn’t connect to with one of these. I hope they help you too!"
  },
  {
    "objectID": "blog/posts/wifi.html#public-wi-fi-woes",
    "href": "blog/posts/wifi.html#public-wi-fi-woes",
    "title": "Quick Fix for Public WiFi on Linux",
    "section": "",
    "text": "As of the time of writing, I run Debian with KDE on my little Lenovo laptop. Before that, I was using Debian server… In other words, I installed everything from scratch. The reason for this bare-bones approach was mostly to see what it’s like to live without a desktop environment. This had some niceties, like being extremely lightweight and fully embracing the power of my window manager at the time (Qtile). However, it also had plenty of downsides, such as constantly being caught out when having to spontaneously connect to a device I hadn’t connected before. I simply didn’t (and still don’t) have the necessary experience that would allow me to solve these issues on the fly without some research. In my life as a PhD student these off-guard moments happened quite often, for example when giving any sort of presentation. That’s why I ended up returning to the Desktop Environment world - to benefit from the convenience of someone else having thought of all the little things that I might run into in my daily life. Sometimes, “bloat” is the price you pay for convenience.\nDespite using a desktop environment again, which is probably what 90% of Linux users do, there are still odd occurrences that seem to catch the pre-configured settings off guard. One that I frequently experience recently is some failure when connecting to many public Wi-Fi networks. From what I understand, these issues arise because the captive portal (the login page for the public Wi-Fi) is sometimes separate from the network that you connect to, and sometimes the network doesn’t automatically redirect you to the captive portal. This is a problem because the network manager doesn’t know that you need to log in, so it just sits there trying to connect to the internet, but you’re never actually getting online. Even more confusingly, some public Wi-Fis are set up differently than others, so even when you found a solution for one public Wi-Fi giving you headaches, it does NOT mean that the same solution will work for all other public Wi-Fis. If you’re in a situation where the frequently recommended solution does not work, it can be pretty frustrating. This is why I’m writing this post - to document the solutions that I’ve found for the public Wi-Fis that I’ve encountered. I think these are worth documenting locally on your device for quick reference when in a pinch. I actually only have three tricks up my sleeve, but have yet to encounter a network that I couldn’t connect to with one of these. I hope they help you too!"
  },
  {
    "objectID": "blog/posts/wifi.html#ip-route",
    "href": "blog/posts/wifi.html#ip-route",
    "title": "Quick Fix for Public WiFi on Linux",
    "section": "ip route",
    "text": "ip route\nThe command ip route is a command that shows the routing table of the device. This is useful for a number of reasons, but in this case, it’s useful because it can show you the IP address of the network that you’re connected to. FYI, IP addresses are the unique identifiers for devices on a network, and are formatted as a series of numbers separated by periods. The routing table is useful because sometimes the network manager will say that you’re connected to the network, but you’re not actually connected to the internet. Again, this is because the network manager doesn’t know that you need to log in, so it just happily sits there. If you run ip route and see that you’re connected to the network, but you’re not connected to the internet, then you know that you need to log in. This is the first step to solving the problem. One of the IP addresses listed will be the IP address you are connected to, while the others will be other IP addresses you can connect to in the network. The trick is simply to pick one of the addresses listed, open a browser, and paste in the IP address as the URL. If you picked the right address, this should redirect you to the captive portal, where you can log in. If you’re not redirected, try another IP address from the list. If you’re still not redirected, then you might have to try one of the other tricks. FYI, to copy from the terminal, you can use Ctrl+Shift+C. What’s nice about this command is that ip route is a standard command that comes with most Linux distributions, so you don’t have to install anything to use it. Additionally, you do not need to be root to run this command.\n\n\nExample output of ip route:\ndefault via 192.168.1.1 dev eth0 proto dhcp metric 100 \n192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.100 metric 100"
  },
  {
    "objectID": "blog/posts/wifi.html#route--n",
    "href": "blog/posts/wifi.html#route--n",
    "title": "Quick Fix for Public WiFi on Linux",
    "section": "route -n",
    "text": "route -n\nroute -n is very similar to ip route, but it’s a bit more user-friendly. The approach is the same as before, connecting to IP addresses in your browser with the hope of triggering the captive portal. The output will look something like this:\n\n\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         192.168.1.1     0.0.0.0         UG    100    0        0 eth0\n192.168.1.0     0.0.0.0         255.255.255.0   U     100    0        0 eth0\n\n\nFor some reason I don’t know, when ip route fails this command sometimes can save you because what you need to redirect to is not the IP addresses in the Destination column, but one listed in one of the other columns. I don’t know why this is the case, but it’s worth a shot if ip route didn’t work. Again, you don’t need to be root to run this command, which is nice, but this one is less likely to come pre-installed on your machine. If you don’t have it, maybe try hot-spotting from your phone to download it when in a pinch, or pre-emptively install it before you’re likely to need it."
  },
  {
    "objectID": "blog/posts/wifi.html#outdated-websites",
    "href": "blog/posts/wifi.html#outdated-websites",
    "title": "Quick Fix for Public WiFi on Linux",
    "section": "Outdated websites ?!",
    "text": "Outdated websites ?!\nThis last trick I figured out while stuck at an airport in the US. For some reason, both ip route and route -n failed me, and I was getting pretty desperate. I was browsing obscure Linux forums on my phone, ready to just take the hit. Some dude somewhere in the depths of this forum essentially just suggested connecting to an outdated website. For some reason I don’t know (as no explanation was offered), this actually solved my problem. So the trick is very simple - bookmark a website you trust that hasn’t switched to HTTPS yet (and optimally is not intending to switch), and try to connect to it. If you’re lucky, this will redirect you to the captive portal. I want to emphasize that you should only do this as a last resort, as your connection will NOT be encrypted.\nSome websites that can be used for this purpose include:\n\nhttp://neverssl.com\nhttp://httpforever.com\nhttp://http.rip"
  },
  {
    "objectID": "blog/posts/wifi.html#conclusion",
    "href": "blog/posts/wifi.html#conclusion",
    "title": "Quick Fix for Public WiFi on Linux",
    "section": "Conclusion",
    "text": "Conclusion\nI hope this was helpful to you! If I missed anything, or you actually know the more detail about why these tricks work, please let me know in the comments."
  },
  {
    "objectID": "cv/index.html",
    "href": "cv/index.html",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "Curriculum Vitae\n\nAcademicIndustry\n\n\nIf you can’t see the embedded PDF below, you can download it here.\n\n\n\n\n\n\n\n\n\n\nTo be added soon."
  },
  {
    "objectID": "now/index.html",
    "href": "now/index.html",
    "title": "Now",
    "section": "",
    "text": "Back from Europe! Pretty excited to keep plugging away at my ‘Annoying AI’ project, for which I will be presenting a poster at this year’s CogSci conference! I will also be attending ACM’s Collective Intelligence conference since San Diego is close-by :)\n\n\n\n\nI’m currently in the midst of re-designing my site. Until very recently, I was using dark mode very religiously, but I have now seen the light. Therefore, a redesign. Also, to simplify my CSS a bunch.\nI’ve booked all my travel: a weekend in London, 10 days in Germany, a month of Asia involving Japan and Taiwan. This would be my first time outside “the West”!\nNot entirely sure how that last stretch of travel will play out given some of the political turbulences at the moment. Hoping for the best!\n\n\n\n\nFirst post!\nCurrently piloting a study that’s all about giving rise to AI assistants that are not annoying to people. I have an experiment going that’s meant to inform a cognitive model which in turn will inform a POMDP model. It’s really exciting!\nThe experiment is written in Pygame, which it turns out can be web-hosted with some extra steps. You can inject Javascript too! It’s pretty neat because I can now just work with a language I know and love.\nThe other thing maybe worth mentioning is that I’m taking a Stats course on Longitudinal Data Analysis.\nIn a few weeks time, I’ll take a Data analysis exam, which forms part of the Stats MS I want to do alongside this PhD…\nFinally, currently trying to figure out what to do with my summer! I’ll be heading to Japan (and Taiwan) towards the end of the break but should also really show my face in UK again and see my family in Germany."
  },
  {
    "objectID": "now/index.html#section",
    "href": "now/index.html#section",
    "title": "Now",
    "section": "",
    "text": "Back from Europe! Pretty excited to keep plugging away at my ‘Annoying AI’ project, for which I will be presenting a poster at this year’s CogSci conference! I will also be attending ACM’s Collective Intelligence conference since San Diego is close-by :)\n\n\n\n\nI’m currently in the midst of re-designing my site. Until very recently, I was using dark mode very religiously, but I have now seen the light. Therefore, a redesign. Also, to simplify my CSS a bunch.\nI’ve booked all my travel: a weekend in London, 10 days in Germany, a month of Asia involving Japan and Taiwan. This would be my first time outside “the West”!\nNot entirely sure how that last stretch of travel will play out given some of the political turbulences at the moment. Hoping for the best!\n\n\n\n\nFirst post!\nCurrently piloting a study that’s all about giving rise to AI assistants that are not annoying to people. I have an experiment going that’s meant to inform a cognitive model which in turn will inform a POMDP model. It’s really exciting!\nThe experiment is written in Pygame, which it turns out can be web-hosted with some extra steps. You can inject Javascript too! It’s pretty neat because I can now just work with a language I know and love.\nThe other thing maybe worth mentioning is that I’m taking a Stats course on Longitudinal Data Analysis.\nIn a few weeks time, I’ll take a Data analysis exam, which forms part of the Stats MS I want to do alongside this PhD…\nFinally, currently trying to figure out what to do with my summer! I’ll be heading to Japan (and Taiwan) towards the end of the break but should also really show my face in UK again and see my family in Germany."
  },
  {
    "objectID": "presentations/s210_midterm2.html#anova-table",
    "href": "presentations/s210_midterm2.html#anova-table",
    "title": "Supplementary notes for Simple Linear Regression",
    "section": "ANOVA table",
    "text": "ANOVA table\n\n\n\n\n\n\n\n\n\n\nSource\nSum of Squares\nDegrees of Freedom\nMean Square\nF\n\n\n\n\nRegression\n\\(SSReg = \\sum^n_{i=1}(\\hat{y}_i - \\bar{y})^2\\)\n\\(k\\)\n\\(MSReg = \\frac{SSReg}{k}\\)\n\\(F = \\frac{MSReg}{MSE}\\)\n\n\nResidual\n\\(SSE = \\sum^n_{i=1}(y_i-\\hat{y}_i)^2\\)\n\\(n - k - 1\\)\n\\(MSE = \\frac{SSE}{n - k - 1} = s^2\\)\n\n\n\nTotal\n\\(SST = \\sum^n_{i=1}(y_i - \\bar{y})^2\\)\n\\(n - 1\\)\n\n\n\n\n\nNote: For simple linear regression, \\(k = 1\\)"
  },
  {
    "objectID": "presentations/s210_midterm2.html#f-test",
    "href": "presentations/s210_midterm2.html#f-test",
    "title": "Supplementary notes for Simple Linear Regression",
    "section": "F-test",
    "text": "F-test\n\nWhy does ANOVA use the F-statistic?\n\\(\\frac{\\sum_{i=1}^n (y_i - \\bar{y})^2}{\\sigma^2} \\sim \\chi^2_{n-1}\\)\nIn other words, for \\(H_0\\): \\(\\frac{SST}{\\sigma^2} \\sim \\chi^2_{n-1}\\)\nWe also know that for \\(H_0\\): \\(\\frac{(n-2)MSE}{\\sigma^2} \\sim \\chi^2_{n-2}\\)\nSince SSE and SSReg are independent, the ratio of \\(\\frac{MSReg}{MSE}\\) follows an F-distribution with \\(k\\) and \\(n-k-1\\) degrees of freedom"
  },
  {
    "objectID": "presentations/s210_midterm2.html#f-test-for-slr",
    "href": "presentations/s210_midterm2.html#f-test-for-slr",
    "title": "Supplementary notes for Simple Linear Regression",
    "section": "F-test for SLR",
    "text": "F-test for SLR\n\n\\(SSReg = \\beta_1^2 S_{xx}\\)\n\\(E[\\hat{\\beta_1^2}] = \\frac{\\sigma^2}{S_{xx}} + \\beta_1^2\\)\n\\(E(MSReg) = E(SSReg) = E(\\beta_1^2 S_{xx}) = \\sigma^2 + \\beta_1^2 S_{xx}\\)\n\\(E(MSE) = \\sigma^2\\)\nWhen \\(\\beta_1 = 0\\), \\(E(MSReg) = E(MSE)\\) -&gt; same means, F = 1\nWhen \\(\\beta_1 \\neq 0\\), \\(E(MSReg) &gt; E(MSE)\\) -&gt; F &gt; 1"
  },
  {
    "objectID": "presentations/s210_midterm2.html#f-test-for-slr-cont.",
    "href": "presentations/s210_midterm2.html#f-test-for-slr-cont.",
    "title": "Supplementary notes for Simple Linear Regression",
    "section": "F-test for SLR (cont.)",
    "text": "F-test for SLR (cont.)\n\nReject \\(H_0\\) if \\(F &gt; F_{1-\\alpha; 1, n-2}\\)\nDo not reject \\(H_0\\) if \\(F \\leq F_{1-\\alpha; 1, n-2}\\)\nNote that \\(F = t^2\\) for simple linear regression"
  },
  {
    "objectID": "presentations/s210_midterm2.html#leverage-points-cont.",
    "href": "presentations/s210_midterm2.html#leverage-points-cont.",
    "title": "Supplementary notes for Simple Linear Regression",
    "section": "Leverage points (cont.)",
    "text": "Leverage points (cont.)\n\nWe can show that \\(\\hat{y}_i = \\sum_{j=1}^n h_{ij} y_j\\)\nwith \\(h_{ij} = \\frac{1}{n} + \\frac{(x_i - \\bar{x})(x_j - \\bar{x})}{\\sum_{j=1}^n (x_j - \\bar{x})^2}\\)\nWe can also show that \\(\\sum_{i=1}^n h_{ij} = 1\\)\nThus, \\(\\hat{y}_i = h_{ii}y_i + \\sum_{j \\neq i} h_{ij} y_j\\)\n\\(h_{ii}\\) is the leverage of the \\(i\\)th observation and shows how \\(y_i\\) influences \\(\\hat{y}_i\\)"
  },
  {
    "objectID": "presentations/s210_midterm2.html#leverage-points-cont.-1",
    "href": "presentations/s210_midterm2.html#leverage-points-cont.-1",
    "title": "Supplementary notes for Simple Linear Regression",
    "section": "Leverage points (cont.)",
    "text": "Leverage points (cont.)\n\nFor SLR, \\(Average(h_{ii}) = \\frac{2}{n}\\)\nWe classify \\(x_i\\) as a leverage point if \\[h_{ii} &gt; 2 \\times Average(h_{ii}) = \\frac{4}{n}\\]"
  },
  {
    "objectID": "presentations/s210_midterm2.html#log-transformation-of-y-only",
    "href": "presentations/s210_midterm2.html#log-transformation-of-y-only",
    "title": "Supplementary notes for Simple Linear Regression",
    "section": "Log transformation of y only",
    "text": "Log transformation of y only\n\nwhen our model is \\(log(y) = \\beta_0 + \\beta_1 x + \\epsilon\\) we need to take care with the interpretation of \\(\\beta_1\\)\n\\(\\beta_1\\) is the percentage change in the median of \\(y\\) for a one-unit change in \\(exp(x)\\)"
  },
  {
    "objectID": "presentations/s210_midterm2.html#further-notes-on-residuals",
    "href": "presentations/s210_midterm2.html#further-notes-on-residuals",
    "title": "Supplementary notes for Simple Linear Regression",
    "section": "Further notes on Residuals",
    "text": "Further notes on Residuals\n\n\\(e_i\\) are estimates of \\(\\epsilon_i\\)\n\\(\\epsilon_i\\) have constant variance \\(\\sigma^2\\)\nBUT: \\(e_i\\) do not necessarily have constant variance\nThat is why we should always perform our checks with the standardized residuals \\(\\frac{e_i}{s\\sqrt{1-h_{ii}}}\\)"
  },
  {
    "objectID": "presentations/stats210_1.html#slr-equations",
    "href": "presentations/stats210_1.html#slr-equations",
    "title": "Math Stats: Simple Linear Regression",
    "section": "SLR equations",
    "text": "SLR equations\n\n\\(\\hat{\\beta_1} = \\frac{S_{xy}}{S_{xx}}\\)\n\\(\\hat{\\beta_0} = \\bar{y} - \\hat{\\beta_1}\\bar{x}\\)"
  },
  {
    "objectID": "presentations/stats210_1.html#properties-of-regression-line",
    "href": "presentations/stats210_1.html#properties-of-regression-line",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Properties of regression line",
    "text": "Properties of regression line\n\n\\(\\sum_{i=1}^n e_i = 0\\)\n\\(\\sum_{i=1}^n e_i^2\\) is a minimum\n\\(\\sum_{i=1}^n y_i = \\sum_{i=1}^n \\hat{y_i}\\)\n\\(\\sum_{i=1}^n x_ie_i = 0\\)\n\\(\\sum_{i=1}^n \\hat{y_i}e_i = 0\\)"
  },
  {
    "objectID": "presentations/stats210_1.html#confidence-intervals-for-beta_0-and-beta_1",
    "href": "presentations/stats210_1.html#confidence-intervals-for-beta_0-and-beta_1",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Confidence intervals for \\(\\beta_0\\) and \\(\\beta_1\\)",
    "text": "Confidence intervals for \\(\\beta_0\\) and \\(\\beta_1\\)\n\n\\(\\hat{\\beta_0}\\) = estimate when \\(x = 0\\)\n\\(\\hat{\\beta_1}\\) = change in \\(\\hat{y}\\) for a 1 unit change in \\(x\\)\nWe need to know \\(E(\\hat{\\beta_k})\\) and \\(Var(\\hat{\\beta_k})\\) to construct CIs where \\(k = 0, 1\\)\nTo derive the distribution, we rely on \\(\\epsilon \\overset{i.i.d.}{\\sim} N(0, \\sigma^2)\\)"
  },
  {
    "objectID": "presentations/stats210_1.html#distribution-and-ci-of-hatbeta_1-given-sigma2",
    "href": "presentations/stats210_1.html#distribution-and-ci-of-hatbeta_1-given-sigma2",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Distribution and CI of \\(\\hat{\\beta_1}\\), given \\(\\sigma^2\\)",
    "text": "Distribution and CI of \\(\\hat{\\beta_1}\\), given \\(\\sigma^2\\)\n\n\\[\\frac{\\hat{\\beta_1} - \\beta_1}{\\sqrt{Var(\\hat{\\beta_1})}} = \\frac{\\hat{\\beta_1} - \\beta_1}{\\sqrt{\\frac{\\sigma^2}{S_{xx}}}} \\sim N(0,1)\\]\nTherefore the 100(1-\\(\\alpha\\))% CI for \\(\\beta_1\\) is \\[\\hat{\\beta_1} \\pm z_{1-\\alpha/2}\\frac{\\sigma}{\\sqrt{\\sum_i^N (x_i - \\bar{x})^2}} \\]"
  },
  {
    "objectID": "presentations/stats210_1.html#distribution-and-ci-of-hatbeta_1-when-sigma2-is-unknown",
    "href": "presentations/stats210_1.html#distribution-and-ci-of-hatbeta_1-when-sigma2-is-unknown",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Distribution and CI of \\(\\hat{\\beta_1}\\) when \\(\\sigma^2\\) is unknown",
    "text": "Distribution and CI of \\(\\hat{\\beta_1}\\) when \\(\\sigma^2\\) is unknown\n\nIt can be shown that the when \\(\\sigma^2\\) is unknown (and needs to be estimated with \\(s^2\\)), the distribution of \\(\\hat{\\beta_1}\\) is a t-distribution with \\(n-2\\) degrees of freedom\nThe 100(1-\\(\\alpha\\))% CI for \\(\\beta_1\\) thus is \\[\\hat{\\beta_1} \\pm t_{1-\\alpha/2; n-2}\\frac{s}{\\sqrt{\\sum_i^N (x_i - \\bar{x})^2}} \\]"
  },
  {
    "objectID": "presentations/stats210_1.html#distribution-and-ci-of-hatbeta_0-given-sigma2",
    "href": "presentations/stats210_1.html#distribution-and-ci-of-hatbeta_0-given-sigma2",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Distribution and CI of \\(\\hat{\\beta_0}\\), given \\(\\sigma^2\\)",
    "text": "Distribution and CI of \\(\\hat{\\beta_0}\\), given \\(\\sigma^2\\)\n\n\\[\\hat{\\beta_0} \\sim N(\\beta_0, \\sigma^2\\left[\\frac{1}{n} + \\frac{\\bar{x}^2}{S_{xx}}\\right])\\]\nThe 100(1-\\(\\alpha\\))% CI for \\(\\beta_0\\) is \\[\\hat{\\beta_0} \\pm z_{1-\\alpha/2}\\times \\sigma\\sqrt{\\left[\\frac{1}{n} + \\frac{\\bar{x}^2}{S_{xx}}\\right]}\\]"
  },
  {
    "objectID": "presentations/stats210_1.html#distribution-and-ci-of-hatbeta_0-when-sigma2-is-unknown",
    "href": "presentations/stats210_1.html#distribution-and-ci-of-hatbeta_0-when-sigma2-is-unknown",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Distribution and CI of \\(\\hat{\\beta_0}\\) when \\(\\sigma^2\\) is unknown",
    "text": "Distribution and CI of \\(\\hat{\\beta_0}\\) when \\(\\sigma^2\\) is unknown\n\nIt can be shown that the when \\(\\sigma^2\\) is unknown (and needs to be estimated with \\(s^2\\)), the distribution of \\(\\hat{\\beta_0}\\) is a t-distribution with \\(n-2\\) degrees of freedom\nThe 100(1-\\(\\alpha\\))% CI for \\(\\beta_0\\) thus is \\[\\hat{\\beta_0} \\pm t_{1-\\alpha/2; n-2}\\times s\\sqrt{\\left[\\frac{1}{n} + \\frac{\\bar{x}^2}{S_{xx}}\\right]}\\]"
  },
  {
    "objectID": "presentations/stats210_1.html#example-two-sided-test-for-beta_1",
    "href": "presentations/stats210_1.html#example-two-sided-test-for-beta_1",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Example: Two-sided test for \\(\\beta_1\\)",
    "text": "Example: Two-sided test for \\(\\beta_1\\)\n\n\\(H_0: \\beta_1 = 0\\)\n\\(H_1: \\beta_1 \\neq 0\\)\nTest statistic: \\(t = \\frac{\\hat{\\beta_1} - \\hat{\\beta_{1}}_{(under H_0)}}{\\sqrt{\\widehat{Var(\\hat{\\beta_1})}}}\\)\nThe distribution of the test statistic is \\(t_{n-2}\\)\nCritical region: \\(|t| &gt; t_{1-\\alpha/2; n-2}\\) - Reject if \\(t\\) falls in the critical region\nP-value: \\(2P(t_{n-2} &gt; |t|)\\) - Reject if p-value &lt; \\(\\alpha\\)"
  },
  {
    "objectID": "presentations/stats210_1.html#mean-response-prediction",
    "href": "presentations/stats210_1.html#mean-response-prediction",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Mean response prediction",
    "text": "Mean response prediction\n\nPredicting where the mean of “many” points will be at a given \\(x_0\\)\nwhen \\(\\sigma^2\\) is known:\n\\(\\hat{\\mu}_{y|x_0} \\sim N\\left(E(y|x_0), s^2[\\frac{1}{n}+\\frac{(x_0 - \\bar{x})^2}{S_{xx}}]\\right)\\)\nwhen \\(\\sigma^2\\) is unknown:\n\\[\\hat{\\mu}_{y|x_0} \\sim t_{n-2}\\left(E(y|x_0), s^2[\\frac{1}{n}+\\frac{(x_0 - \\bar{x})^2}{S_{xx}}]\\right)\\]"
  },
  {
    "objectID": "presentations/stats210_1.html#confidence-interval-for-mean-response",
    "href": "presentations/stats210_1.html#confidence-interval-for-mean-response",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Confidence interval for mean response",
    "text": "Confidence interval for mean response\n\nThe range in which the mean of “many” points will lie at a given \\(x_0\\)\nGiven \\(x_0\\) and unknown variance, the 100(1-\\(\\alpha\\))% CI for \\(E(y|x_0)\\) is\n\\[\\hat{\\mu}_{y|x_0} \\pm t_{1-\\alpha/2; n-2}\\times s\\sqrt{\\left[\\frac{1}{n} + \\frac{(x_0 - \\bar{x})^2}{S_{xx}}\\right]}\\]"
  },
  {
    "objectID": "presentations/stats210_1.html#prediction-interval",
    "href": "presentations/stats210_1.html#prediction-interval",
    "title": "Math Stats: Simple Linear Regression",
    "section": "Prediction interval",
    "text": "Prediction interval\n\nThe range in which a single point will lie at a given \\(x_0\\)\nGiven \\(x_0\\) and unknown variance, the 100(1-\\(\\alpha\\))% PI for \\(\\hat{y}_0\\) is\n\\[\\hat{y}_0 \\pm t_{1-\\alpha/2; n-2}\\times s\\sqrt{1 + \\frac{1}{n} + \\frac{(x_0 - \\bar{x})^2}{S_{xx}}}\\]\nNote that the PI is wider than the CI because it accounts for the uncertainty in the error term\nThe PI gets wider with the distance from \\(\\bar{x}\\)"
  },
  {
    "objectID": "blog/posts/dashboard.html",
    "href": "blog/posts/dashboard.html",
    "title": "Country dashboard",
    "section": "",
    "text": "I decided I’d make the ranking table I created in my last post into an interactive display so that you can play around with what’s included and how it’s weighted yourself.\nThe dashboard (below) can be pretty slow to load. If it doesn’t load after 30s your browser is probably blocking it, so you may want to check the browser console.\nI made this using the Shinylive package and extension for Quarto. It’s far from optimal to be honest, but I’m happy I eventually got this to work.\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 1200\n\nlibrary(shiny)\nlibrary(DT)\n\ndf_z &lt;- structure(list(Country = c(\"Albania\", \"Argentina\", \"Armenia\", \n\"Australia\", \"Austria\", \"Bangladesh\", \"Belgium\", \"Brazil\", \"Bulgaria\", \n\"Canada\", \"Chile\", \"China\", \"Colombia\", \"Costa Rica\", \"Ivory Coast\", \n\"Croatia\", \"Cyprus\", \"Czech Republic\", \"Denmark\", \"Ecuador\", \n\"Egypt\", \"El Salvador\", \"Estonia\", \"Finland\", \"France\", \"Georgia\", \n\"Germany\", \"Greece\", \"Honduras\", \"Hungary\", \"India\", \"Indonesia\", \n\"Ireland\", \"Israel\", \"Italy\", \"Kazakhstan\", \"Latvia\", \"Lithuania\", \n\"Malaysia\", \"Mexico\", \"Moldova\", \"Netherlands\", \"Norway\", \"Pakistan\", \n\"Panama\", \"Paraguay\", \"Peru\", \"Poland\", \"Portugal\", \"Romania\", \n\"Serbia\", \"Slovakia\", \"Slovenia\", \"Spain\", \"Sweden\", \"Switzerland\", \n\"Thailand\", \"Ukraine\", \"United Kingdom\", \"United States\", \"Uruguay\", \n\"Vietnam\"), Debt.percent.GDP.Z = c(-0.124629294124465, -0.881652686284333, \n0.0732425727324507, 0.234333820614628, -0.648071817139399, 0.698717587016083, \n-1.189808193211, -0.891279357075537, 2.59589451107479, -1.18562458139787, \n0.759139114985335, -0.927030348729619, 0.0178488559365616, -0.218659431299363, \n-0.113325293231668, -0.1797159471746, -0.528068192422933, 0.471712089085369, \n1.77230728199557, -0.0671086636699418, -1.06132881976772, -0.846209476478951, \n2.66530947703202, -0.784241325720259, -1.27705968940722, 0.87962217146127, \n-0.322322976182618, -1.71882947547772, 0.500542665863607, -0.601105362317265, \n-0.807400085518897, 0.843282550619476, 0.711953810760354, -0.432603905999444, \n-1.54478159249432, 2.46284427702149, 0.584223230705835, 1.08199849496694, \n-0.405972040242114, -0.0313552549403581, 0.993501598495438, 0.329990120902357, \n0.939422947318687, -0.557328887549805, 0.0304344065041883, 0.590373916494153, \n1.3671434214963, -0.0110712590395305, -1.03363857344817, 0.0775975502594567, \n0.258906061457534, -0.172505766040318, -0.43844141127366, -1.20770878775751, \n1.09857333974231, 1.04122309403835, -0.347717499373564, -1.04840064431428, \n-1.14412403298648, -1.38742970756526, -0.263187286942041, 1.31959869801759\n), Economic.Complexity.Index.Z = c(-1.04740010189708, -0.959787575953646, \n-1.10021074875286, -1.19896552417594, 1.65395957971693, -1.40579737753144, \n0.634266312200659, -0.573278372048231, -0.200040818680771, -0.0799889953555568, \n-0.934912327518399, 0.875673735720604, -0.682471048237961, -0.447713134997391, \n-1.44503876598365, 0.200566623626427, -0.603618711537085, 1.63632602191341, \n0.503729341336268, -1.44973373347937, -0.83120739283612, -0.653251746501829, \n0.321855273316014, 1.21066716186829, 0.922268816601674, -0.813269292206998, \n2.16666255913533, -0.672777990968793, -1.28856488757909, 1.39436054412452, \n-0.211789100076818, -0.758333944980252, 0.906690414654383, 0.663788321885541, \n1.03262546221369, -1.23848632618539, -0.0182114891420542, 0.18732365122894, \n0.418806581297545, 0.798949434489707, -0.934912327518399, 0.34932210335748, \n-0.326702899255083, -1.29461450563253, -0.984242429231461, -1.21232597024296, \n-1.36900876790313, 0.518046614899514, 0.108846704023971, 0.875673735720604, \n-0.0554181202716872, 0.985049507346337, 1.32690903772762, 0.147874987440912, \n1.46255937870615, 2.31987502983337, 0.619575370122622, -0.404363346611779, \n1.14527081123511, 1.21066716186829, -0.758333944980252, -0.643418559337893\n), GDP.PC.PPP.Z = c(-0.578667969479209, -0.118697105136812, -0.466045655225293, \n0.923409660963611, 0.991864131045693, -2.07560611746282, 0.943813486068404, \n-0.637926841076349, 0.247334432561972, 0.798322240846842, 0.0514972081511996, \n-0.372848777319968, -0.567817002128468, -0.187306357268071, -2.38313828212365, \n0.459334215083589, 0.714009137923153, 0.646528321491845, 1.03238900277504, \n-1.0555174676038, -0.778296145048397, -1.46312260085509, 0.536975954072058, \n0.858441053205361, 0.790674347012461, -0.365552753858487, 0.926838361173849, \n0.326114834872618, -2.54569504297012, 0.46017504777571, -1.8506345887589, \n-1.08285649973564, 1.51891118971596, 0.638308637641741, 0.746105976041282, \n0.268243356529517, 0.36510918213971, 0.604083691891451, 0.198748322887712, \n-0.312389335256651, -0.905419626845786, 1.05266630879902, 1.33659487452438, \n-2.87011160848619, 0.279819401728855, -0.897780846910471, -0.969354902742662, \n0.548303295805111, 0.531331603917783, 0.510288898105396, -0.215357416726921, \n0.425604963572419, 0.670361910662876, 0.624071621015143, 0.940063388699492, \n1.22536621020093, -0.442507615305548, -0.848441456160931, 0.748977361996666, \n1.09700572898117, 0.082117610439579, -1.12871295583376), Gini.Trend.Since.1980.Z = c(-0.972728762307106, \n0.235661284719612, 0.807289419806078, -0.751795055249311, -0.541952384841444, \n-1.28590248700461, -0.47757320406769, 0.519460378035315, -2.90579061741576, \n-0.580839236047094, 1.32391656291119, -0.943517953562895, -0.113396990343457, \n-0.977579788120396, -0.110513365069525, 1.07555192684504, -0.837591225467581, \n-0.547633532490872, -1.10444688370133, 0.958189630444226, -0.399329079090007, \n1.73208135283011, 0.424333933034159, -1.02755175406314, -0.338475925232408, \n0.349294378348429, -1.01522269898644, -0.192613797020086, 0.428382484535192, \n-0.479488366985406, -0.722332669474446, -1.3884974770747, 0.409714046813524, \n-0.574157893236359, -0.882378704686931, 1.24091761183821, 0.327316356336889, \n-0.823345895266208, 0.56832979485888, 0.71099636327897, 2.18026196918706, \n-0.181951170444919, -0.62783056629162, 0.0673943434219194, 1.02128358818071, \n0.87967773182586, 1.89885833159475, 1.49785597280742, 0.804996869073585, \n0.546806173102294, 2.68562715882983, 0.515724944437757, -0.377236741009073, \n-0.497430774529734, -1.29008018012335, -0.158135188867061, 0.937139266747765, \n0.962410936735222, -0.625900533822269, -0.962683524356137, 0.010890770045687, \n-0.404459154376347), Innovation.Index.Z = c(-1.10322330882057, \n-0.935968336173481, -0.713955610326503, 0.741138019360247, 0.893866965234242, \n-1.60640884664837, 0.713101142066744, -0.40999951704838, 0.042634817811248, \n1.07129727204808, -0.418046117493808, 1.2986534534547, -0.69718127228074, \n-0.772996888586645, -1.76502471536097, -0.125951616056125, 0.528749831459027, \n0.449607907205552, 1.35142291375694, -1.58692470886517, -1.17503582566858, \n-1.46200292206743, 1.0306358699988, 1.50167291443738, 1.23896393479529, \n-0.59738991083039, 1.41701184255429, -0.133700762958127, -1.84628449835865, \n0.125623119839705, 0.0274547879346658, -0.580897035510583, 0.873184066889493, \n1.05776201457149, 0.543064234784961, -0.997067607196436, -0.118210153084921, \n0.16307010447158, 0.192906757080406, -0.59738991083039, -0.739195452365693, \n1.46268237378246, 0.810865461937928, -1.33060671956614, -1.08540282979067, \n-1.3398902951567, -0.909961919811973, -0.071921143623544, 0.427900540036248, \n-0.353919267294999, -0.442239430757734, -0.282434085697966, 0.170539277259389, \n0.514412549706624, 1.82756324902192, 2.01492305972094, -0.0796170992285524, \n-0.672097129845375, 1.60496073368948, 1.6945397369331, -0.705563251579159, \n-0.133700762958127), Social.Mobility.Index.Z = c(-0.706105386379428, \n-0.585641243282725, -0.822942004812496, 0.893527020218731, 1.38056875813782, \n-1.63209565951418, 1.38056875813782, -0.942697479653827, -0.0915921450259129, \n0.988425032276404, -0.364208334683061, -0.272472087192733, -1.05838609019865, \n-0.264745812563682, -1.89934949521022, 0.145937967477542, 0.376575866110667, \n0.855919262995838, 1.90967808262855, -0.822942004812496, -1.38668071061443, \n-1.23621904621619, 0.744300955584676, 1.74016855022671, 1.04596632070911, \n-0.706105386379428, 1.25091923046369, -0.401898315065783, -1.45872956398218, \n0.0710920606438463, -1.50201293357616, -1.12090024948761, 0.884106253356048, \n0.264385775549944, 0.204854352281649, -0.0108776343313731, 0.341829906108948, \n0.473162777503202, -0.233715195153473, -0.909840011156656, -0.416886443795997, \n1.6151450695718, 1.74016855022671, -1.80103155544201, -0.988170749389749, \n-1.27169409847818, -1.0835423790243, 0.350497568438204, 0.60731979549657, \n-0.147345467074108, -0.0915921450259129, 0.298679871236411, 1.01713919390481, \n0.42907135941336, 1.72968089300841, 1.58417161065282, -0.720039150890423, \n-0.295575599718776, 0.827845238004091, 0.464319390354575, 0.179529162219292, \n-0.549520254806064), Social.Progress.Index.Z = c(-0.428475360063824, \n0.0414886876042136, -0.361586155556238, 1.08276311464403, 1.10909919005662, \n-2.02871021453541, 1.01008493768704, -0.711476953266137, -0.152134692312932, \n1.12349208975159, 0.273693774269224, -1.22620730070184, -0.84880253287263, \n0.259410021031203, -2.18229569620937, 0.444651638107071, 0.541526337932193, \n0.771868863086631, 1.41176816060903, -0.663781035239767, -1.82009726121552, \n-1.34315004834607, 0.884996475327265, 1.4019126407544, 0.874446196917741, \n-0.397131547235487, 1.18971034024235, 0.458108602317123, -1.6209687111755, \n-0.00441722919450905, -1.70192037310337, -1.14239167468768, 1.06603809514852, \n0.540394102980479, 0.776508601641629, -0.716325507733983, 0.460353335318132, \n0.601729573086324, -0.432510194770465, -0.752099047001046, -0.421409158795353, \n1.2199456608804, 1.4364450726259, -2.37515169280453, -0.438558363298878, \n-0.930988399538346, -0.765586386592023, 0.206869284152824, 0.720975477786726, \n-0.143765564343391, -0.257045674777279, 0.329952179603639, 0.656583204051582, \n0.790440884468391, 1.2745836204472, 1.37731195350324, -0.851653679189645, \n-0.423428754032018, 0.881478490811943, 0.709445550714834, 0.217789408795679, \n-1.00379635776192)), row.names = c(NA, -62L), class = \"data.frame\")\n\nscore_cols &lt;- names(df_z)[grepl(\"\\\\.Z$\", names(df_z))]\n\nui &lt;- fluidPage(\n  # Add custom CSS for theming\n  tags$head(\n    tags$style(HTML(\"\n      :root {\n        --bg-color: #ffffff;\n        --text-color: #000000;\n        --sidebar-bg: #f5f5f5;\n        --sidebar-border: #e3e3e3;\n        --btn-primary-bg: #337ab7;\n        --btn-primary-border: #2e6da4;\n        --form-bg: #ffffff;\n        --form-border: #cccccc;\n        --table-bg: #ffffff;\n        --table-header-bg: #f5f5f5;\n      }\n\n      body.dark-theme {\n        --bg-color: #2b2b2b;\n        --text-color: #ffffff;\n        --sidebar-bg: #3c3c3c;\n        --sidebar-border: #555555;\n        --btn-primary-bg: #5bc0de;\n        --btn-primary-border: #46b8da;\n        --form-bg: #4a4a4a;\n        --form-border: #666666;\n        --table-bg: #2b2b2b;\n        --table-header-bg: #3c3c3c;\n      }\n\n      body {\n        background-color: var(--bg-color) !important;\n        color: var(--text-color) !important;\n        transition: all 0.3s ease;\n      }\n\n      .well {\n        background-color: var(--sidebar-bg) !important;\n        border: 1px solid var(--sidebar-border) !important;\n        color: var(--text-color) !important;\n      }\n\n      .btn-primary {\n        background-color: var(--btn-primary-bg) !important;\n        border-color: var(--btn-primary-border) !important;\n      }\n\n      .form-control {\n        background-color: var(--form-bg) !important;\n        border-color: var(--form-border) !important;\n        color: var(--text-color) !important;\n      }\n\n      .checkbox label, h4, h3, h2, h1 {\n        color: var(--text-color) !important;\n      }\n\n      .theme-toggle {\n        position: absolute;\n        top: 10px;\n        right: 20px;\n        z-index: 1000;\n      }\n\n      /* DataTable theming */\n      .dataTables_wrapper {\n        background-color: var(--bg-color) !important;\n        color: var(--text-color) !important;\n      }\n\n      .dataTables_wrapper table.dataTable thead th {\n        background-color: var(--table-header-bg) !important;\n        color: var(--text-color) !important;\n        border-bottom: 1px solid var(--sidebar-border) !important;\n      }\n\n      .dataTables_wrapper table.dataTable tbody td {\n        background-color: var(--table-bg) !important;\n        color: var(--text-color) !important;\n        border-top: 1px solid var(--sidebar-border) !important;\n      }\n\n      .dataTables_info, .dataTables_paginate {\n        color: var(--text-color) !important;\n      }\n\n      .paginate_button {\n        background-color: var(--form-bg) !important;\n        color: var(--text-color) !important;\n        border: 1px solid var(--form-border) !important;\n      }\n    \")),\n\n    tags$script(HTML(\"\n      function toggleTheme() {\n        document.body.classList.toggle('dark-theme');\n\n        var btn = document.getElementById('theme_toggle');\n        if (document.body.classList.contains('dark-theme')) {\n          btn.innerHTML = '☀️ Light Mode';\n          btn.className = 'btn btn-sm btn-outline-light action-button';\n        } else {\n          btn.innerHTML = '🌙 Dark Mode';\n          btn.className = 'btn btn-sm btn-outline-secondary action-button';\n        }\n      }\n    \"))\n  ),\n\n  # Theme toggle button with onclick\n  div(class = \"theme-toggle\",\n      tags$button(id = \"theme_toggle\", \n                 class = \"btn btn-sm btn-outline-secondary\",\n                 onclick = \"toggleTheme()\",\n                 \"🌙 Dark Mode\")),\n\n  titlePanel(\"Country Dashboard\"),\n\n  sidebarLayout(\n    sidebarPanel(\n      width = 3,\n      h4(\"Select Indicators:\"),\n      checkboxGroupInput(\"selected_cols\", \n                         \"\",\n                         choices = setNames(score_cols, c(\n                           \"Debt % of GDP\",\n                           \"Economic Complexity Index\", \n                           \"GDP per Capita (PPP)\",\n                           \"Gini Trend Since 1980\",\n                           \"Innovation Index\",\n                           \"Social Mobility Index\",\n                           \"Social Progress Index\"\n                         )),\n                         selected = score_cols),\n\n      hr(),\n\n      conditionalPanel(\n        condition = \"input.selected_cols.length &gt; 0\",\n        h4(\"Indicator Weights:\"),\n        uiOutput(\"weight_inputs\")\n      ),\n\n      br(),\n      actionButton(\"calculate\", \"Update Rankings\", \n                   class = \"btn-primary btn-block\"),\n\n      br(),\n      div(\n        style = \"font-size: 12px; color: #666;\",\n      )\n    ),\n\n    mainPanel(\n      width = 9,\n      h4(\"Country Rankings\"),\n      DT::dataTableOutput(\"result_table\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n\n  output$weight_inputs &lt;- renderUI({\n    req(input$selected_cols)\n\n    indicator_names &lt;- c(\n      \"Debt.percent.GDP.Z\" = \"Debt % of GDP\",\n      \"Economic.Complexity.Index.Z\" = \"Economic Complexity\", \n      \"GDP.PC.PPP.Z\" = \"GDP per Capita\",\n      \"Gini.Trend.Since.1980.Z\" = \"Gini Trend\",\n      \"Innovation.Index.Z\" = \"Innovation Index\",\n      \"Social.Mobility.Index.Z\" = \"Social Mobility\",\n      \"Social.Progress.Index.Z\" = \"Social Progress\"\n    )\n\n    weight_inputs &lt;- lapply(input$selected_cols, function(col) {\n      display_name &lt;- indicator_names[col]\n\n      div(\n        style = \"margin-bottom: 15px;\",\n        strong(display_name),\n        br(),\n        selectInput(paste0(\"weight_\", col),\n                   label = NULL,\n                   choices = c(\"1.0\" = 1.0, \"1.25\" = 1.25, \"1.5\" = 1.5, \"2.0\" = 2.0),\n                   selected = \"1.0\",\n                   width = \"100%\")\n      )\n    })\n\n    do.call(tagList, weight_inputs)\n  })\n\n  scored_data &lt;- eventReactive(input$calculate, {\n    req(input$selected_cols)\n\n    weights &lt;- sapply(input$selected_cols, function(col) {\n      weight_input &lt;- input[[paste0(\"weight_\", col)]]\n      if(is.null(weight_input)) 1.0 else as.numeric(weight_input)\n    })\n\n    result_df &lt;- data.frame(Country = df_z$Country)\n\n    if(length(input$selected_cols) &gt; 0) {\n      weighted_scores &lt;- mapply(function(col, weight) {\n        df_z[[col]] * weight\n      }, input$selected_cols, weights, SIMPLIFY = FALSE)\n\n      result_df$Score &lt;- Reduce(`+`, weighted_scores)\n      result_df$Rank &lt;- rank(-result_df$Score, ties.method = \"min\")\n      result_df &lt;- cbind(result_df, df_z[input$selected_cols])\n    } else {\n      result_df$Score &lt;- 0\n      result_df$Rank &lt;- nrow(df_z)\n    }\n\n    col_order &lt;- c(\"Rank\", \"Country\", \"Score\", input$selected_cols)\n    result_df &lt;- result_df[col_order[col_order %in% names(result_df)]]\n    result_df[order(result_df$Rank), ]\n  })\n\n  observe({\n    if(input$calculate == 0) {\n      weights &lt;- rep(1.0, length(score_cols))\n      names(weights) &lt;- score_cols\n\n      weighted_scores &lt;- mapply(function(col, weight) {\n        df_z[[col]] * weight\n      }, score_cols, weights, SIMPLIFY = FALSE)\n\n      initial_score &lt;- Reduce(`+`, weighted_scores)\n      initial_rank &lt;- rank(-initial_score, ties.method = \"min\")\n\n      initial_data &lt;- data.frame(\n        Rank = initial_rank,\n        Country = df_z$Country,\n        Score = initial_score,\n        df_z[score_cols]\n      )\n\n      initial_data &lt;- initial_data[order(initial_data$Rank), ]\n\n      output$result_table &lt;- DT::renderDataTable({\n        DT::datatable(\n          initial_data,\n          options = list(\n            pageLength = 20,\n            scrollX = TRUE,\n            columnDefs = list(\n              list(className = 'dt-center', targets = c(0, 2))\n            )\n          ),\n          rownames = FALSE\n        ) %&gt;%\n        DT::formatRound(columns = \"Score\", digits = 2) %&gt;%\n        DT::formatRound(columns = score_cols, digits = 3)\n      })\n    }\n  })\n\n  observeEvent(input$calculate, {\n    output$result_table &lt;- DT::renderDataTable({\n      data &lt;- scored_data()\n\n      DT::datatable(\n        data,\n        options = list(\n          pageLength = 20,\n          scrollX = TRUE,\n          columnDefs = list(\n            list(className = 'dt-center', targets = c(0, 2))\n          )\n        ),\n        rownames = FALSE\n      ) %&gt;%\n      DT::formatRound(columns = \"Score\", digits = 2) %&gt;%\n      DT::formatRound(columns = score_cols[score_cols %in% names(data)], digits = 3)\n    })\n  })\n}\n\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "research/index.html#posters-and-talks",
    "href": "research/index.html#posters-and-talks",
    "title": "Publications",
    "section": "",
    "text": "“A Cognitive Framework for Strategic AI Communication”\n\n\n\n\n\nMayer, L. W., Steyvers, M. CogSci 2025"
  },
  {
    "objectID": "blog/posts/phone2.html",
    "href": "blog/posts/phone2.html",
    "title": "My current ultra minimal phone",
    "section": "",
    "text": "I don’t use the phone much, as I prefer to use my laptop for most things 1. Of course, I do need it for some things like navigation, checking email, searching things on the go. This is all fine and dandy for a minimal setup, as you could just have your five apps, use bookmarks in the browser instead of apps where feasible and call it a day, right? Well, yes, you could, but it’s a bit bare-bones for my taste. I like to configure things in a way that maximizes my productivity (and thus, inevitably minimizes my screen time), which requires a certain design philosophy I’ve come to appreciate over the years. Basically, important things should be easy to reach, and everything else ought to be hidden away in multiple layers. I’ve written about this in my original phone post, but wanted to provide an updated overview with all my essentials here. Hopefully, you’ll like what you see!\n1 I actually really wish there would exist some kind of phone sized device that somehow folds out a screen and a keyboard… Imagine a modern folding phone but better and with a physical keyboard\n\n\nThe basics\nAs I mentioned, I don’t want unnecessary apps and visual clutter, and like to organize things hierarchically. My hierarchy goes like this:\n\n\nHome Screen: Only my calendar and to-do list live here as widgets so that no app opening is required. In particular, my calendar widget shows the Week view, so that it’s almost instantaneous to see where I am meant to be and my availability. The To-Do list widget simply serves as a convenient place to take a quick note. If you have a good idea, you should be able to write it down immediately, with as little delay as possible.\n\n\nA reduced drawer with important apps: Here are all the apps that I need on my phone and are used fairly regularly. Think Navigation and E-mail, messaging, the Banking app, the Password manager.\n\n\nEverything else: There are so many apps that you only need very irregularly, so I don’t see why I would have them take front and center real-estate when I can put them in a separate space\n\n\n\n\n\n\nMy specific set-up\nMy set-up revolves around a non-standard version of Android, a custom launcher, and a specific calendar app\n\nI use GrapheneOS as my operating system. This is a specialized, security-focused, version of Android that does not feature Google apps that usually come pre-installed. So for example, there is no Youtube app on my phone. There are other options available if you want a “de-googled” experience. If disabling the Youtube app is good enough for you, and you’re not concerned with the privacy and security of your phone you can safely ignore this.\nKvaesitso is hands-down the best launcher for my purposes. It’s completely free and open-source, and available on F-droid2. This has become the cornerstone of my phone, and so will get its own section (see below).\nBusiness Calendar 2 has been my calendar app of choice for something like 5 years now. The only real reason for that is that they provide a customizable week-view widget with a time-line showing where you are in the day. I genuinely cannot understand how no other calendar app, which all have a week view with a time-line, do not offer this same week view as a widget. Once you come to expect being able to see your schedule at a glance, there is no going back to having to open an app for it. Agenda view, the one widget all calendar apps seem to have, does not come even remotely close to a graphical representation of your week for visual clarity. BC2’s to-do widget is excellent too.\n\n2 Never heard of F-droid? Basically, a non-commercial app store where everything is free and open-source. Great for utility apps, from indie devs. Do not expect big brand apps here though!\n\n\n\nKvaesitso\nIt’s a recurring theme in my life to realize that the most powerful software can often be the most minimal. Kvaesitso serves this description really well as a pretty customizable launcher. It might not have the most features out of any launcher I have ever seen, but I’ve found Kvaesitso’s features to be extremely thoughtfully designed. With the right settings, my home screen is just my Calendar and to do widgets, plus a search bar. You access the search bar either by tapping on it or swiping down (my preferred method). Once your focus is on the search bar, your app drawer is shown, meaning a swipe and a tap is all you need to access a specific app. The search itself is really powerful, you can search for apps, contacts, do web-searches, calculations, set timers, convert units, etc. all in this one tiny text field. You can also customize which apps show up in the grid. In my case, I set every lesser used app to show “Search only” so that it will only appear in search results when I start typing its name, not in the app drawer that shows before you have typed anything. This is far more convenient than having to open a “hidden apps” folder as you would in other good Android launchers.\nWith Kvaesitso, I can achieve almost unparalleled levels of minimal. There is only the home screen, the search interface and the android notification center. These are the only three views you have outside of apps. There are no pages, and no scrolling is ever required. There is only one gesture: swiping down - either from anywhere in the main screen to open search or from the very top to open the notification center. It can even automatically theme your icons to be grayscale, which is nice since bright logos can be distracting.\n\n\nScreenshots\n\n\n\n\nBC2’s week widget and To-do widgets. Not necessarily the most modern design, but still the most functionality\n\n\n\n\n\nCombined app drawer and universal search in Kvaesitso"
  }
]